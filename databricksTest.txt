
> malloy@0.0.1 test
> jest --runInBand functions time

{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
  console.log
    BRIAN schema rows [
      { col_name: 't_date', data_type: 'date', comment: null },
      { col_name: 't_timestamp', data_type: 'timestamp', comment: null }
    ]

      at DatabricksTestConnection._callee4$ (packages/malloy-db-databricks/src/databricks_connection.ts:182:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         1 as `expect`,
         datediff(day, DATE '2000-01-01', DATE '2000-01-02') as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: day(@2000-01-01 to @2000-01-02) == 1',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         -1 as `expect`,
         datediff(day, DATE '2000-01-02', DATE '2000-01-01') as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: day(@2000-01-02 to @2000-01-01) == -1',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((1)=(datediff(second, CURRENT_TIMESTAMP(), (DATEADD(second, 1, CURRENT_TIMESTAMP()))))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: seconds(now to now + 1 second) == 1',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST((datediff(second, CURRENT_TIMESTAMP(), (DATEADD(second, 1, CURRENT_TIMESTAMP())))) AS string))) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((0)=(datediff(second, CURRENT_TIMESTAMP(), CURRENT_TIMESTAMP()))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: seconds(now to now) == 0',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST((datediff(second, CURRENT_TIMESTAMP(), CURRENT_TIMESTAMP())) AS string))) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((2)=(datediff(second, CURRENT_TIMESTAMP(), (DATEADD(second, 2, CURRENT_TIMESTAMP()))))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: seconds(now to now + 2 seconds) == 2',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST((datediff(second, CURRENT_TIMESTAMP(), (DATEADD(second, 2, CURRENT_TIMESTAMP())))) AS string))) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((-2)=(datediff(second, CURRENT_TIMESTAMP(), (DATEADD(second, 2*-1, CURRENT_TIMESTAMP()))))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: seconds(now to now - 2 seconds) == -2',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST((datediff(second, CURRENT_TIMESTAMP(), (DATEADD(second, 2*-1, CURRENT_TIMESTAMP())))) AS string))) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((0)=(datediff(second, timestamp '2001-01-01 00:00:00', timestamp '2001-01-01 00:00:00.999'))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: seconds(@2001-01-01 00:00:00 to @2001-01-01 00:00:00.999) == 0',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST((datediff(second, timestamp '2001-01-01 00:00:00', timestamp '2001-01-01 00:00:00.999')) AS string))) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((0)=(datediff(second, timestamp '2001-01-01 00:00:00.999', timestamp '2001-01-01 00:00:01'))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: seconds(@2001-01-01 00:00:00.999 to @2001-01-01 00:00:01) == 0',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST((datediff(second, timestamp '2001-01-01 00:00:00.999', timestamp '2001-01-01 00:00:01')) AS string))) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((0)=(datediff(minute, timestamp '2022-10-03 10:23:08', timestamp '2022-10-03 10:24:07'))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: minutes(@2022-10-03 10:23:08 to @2022-10-03 10:24:07) == 0',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST((datediff(minute, timestamp '2022-10-03 10:23:08', timestamp '2022-10-03 10:24:07')) AS string))) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((1)=(datediff(minute, CURRENT_TIMESTAMP(), (DATEADD(minute, 1, CURRENT_TIMESTAMP()))))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: minutes(now to now + 1 minute) == 1',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST((datediff(minute, CURRENT_TIMESTAMP(), (DATEADD(minute, 1, CURRENT_TIMESTAMP())))) AS string))) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((0)=(datediff(minute, CURRENT_TIMESTAMP(), (DATEADD(second, 59, CURRENT_TIMESTAMP()))))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: minutes(now to now + 59 seconds) == 0',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST((datediff(minute, CURRENT_TIMESTAMP(), (DATEADD(second, 59, CURRENT_TIMESTAMP())))) AS string))) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((2)=(datediff(minute, CURRENT_TIMESTAMP(), (DATEADD(minute, 2, CURRENT_TIMESTAMP()))))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: minutes(now to now + 2 minutes) == 2',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST((datediff(minute, CURRENT_TIMESTAMP(), (DATEADD(minute, 2, CURRENT_TIMESTAMP())))) AS string))) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((-2)=(datediff(minute, CURRENT_TIMESTAMP(), (DATEADD(minute, 2*-1, CURRENT_TIMESTAMP()))))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: minutes(now to now - 2 minutes) == -2',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST((datediff(minute, CURRENT_TIMESTAMP(), (DATEADD(minute, 2*-1, CURRENT_TIMESTAMP())))) AS string))) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((0)=(datediff(hour, timestamp '2022-10-03 10:23:00', timestamp '2022-10-03 11:22:00'))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: hours(@2022-10-03 10:23:00 to @2022-10-03 11:22:00) == 0',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST((datediff(hour, timestamp '2022-10-03 10:23:00', timestamp '2022-10-03 11:22:00')) AS string))) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((1)=(datediff(hour, CURRENT_TIMESTAMP(), (DATEADD(hour, 1, CURRENT_TIMESTAMP()))))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: hours(now to now + 1 hour) == 1',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST((datediff(hour, CURRENT_TIMESTAMP(), (DATEADD(hour, 1, CURRENT_TIMESTAMP())))) AS string))) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((0)=(datediff(hour, CURRENT_TIMESTAMP(), (DATEADD(minute, 59, CURRENT_TIMESTAMP()))))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: hours(now to now + 59 minutes) == 0',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST((datediff(hour, CURRENT_TIMESTAMP(), (DATEADD(minute, 59, CURRENT_TIMESTAMP())))) AS string))) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((2)=(datediff(hour, CURRENT_TIMESTAMP(), (DATEADD(minute, 120, CURRENT_TIMESTAMP()))))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: hours(now to now + 120 minutes) == 2',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST((datediff(hour, CURRENT_TIMESTAMP(), (DATEADD(minute, 120, CURRENT_TIMESTAMP())))) AS string))) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((-2)=(datediff(hour, CURRENT_TIMESTAMP(), (DATEADD(hour, 2*-1, CURRENT_TIMESTAMP()))))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: hours(now to now - 2 hours) == -2',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST((datediff(hour, CURRENT_TIMESTAMP(), (DATEADD(hour, 2*-1, CURRENT_TIMESTAMP())))) AS string))) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((1)=(datediff(day, DATE_TRUNC('day', CURRENT_TIMESTAMP()), (DATEADD(day, 1, DATE_TRUNC('day', CURRENT_TIMESTAMP())))))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: days(now.day to now.day + 1 day) == 1',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST((datediff(day, DATE_TRUNC('day', CURRENT_TIMESTAMP()), (DATEADD(day, 1, DATE_TRUNC('day', CURRENT_TIMESTAMP()))))) AS string))) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((0)=(datediff(day, DATE_TRUNC('day', CURRENT_TIMESTAMP()), (DATEADD(hour, 23, DATE_TRUNC('day', CURRENT_TIMESTAMP())))))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: days(now.day to now.day + 23 hours) == 0',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST((datediff(day, DATE_TRUNC('day', CURRENT_TIMESTAMP()), (DATEADD(hour, 23, DATE_TRUNC('day', CURRENT_TIMESTAMP()))))) AS string))) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((2)=(datediff(day, DATE_TRUNC('day', CURRENT_TIMESTAMP()), (DATEADD(hour, 48, DATE_TRUNC('day', CURRENT_TIMESTAMP())))))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: days(now.day to now.day + 48 hours) == 2',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST((datediff(day, DATE_TRUNC('day', CURRENT_TIMESTAMP()), (DATEADD(hour, 48, DATE_TRUNC('day', CURRENT_TIMESTAMP()))))) AS string))) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((-2)=(datediff(day, DATE_TRUNC('day', CURRENT_TIMESTAMP()), (DATEADD(hour, 48*-1, DATE_TRUNC('day', CURRENT_TIMESTAMP())))))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: days(now.day to now.day - 48 hours) == -2',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST((datediff(day, DATE_TRUNC('day', CURRENT_TIMESTAMP()), (DATEADD(hour, 48*-1, DATE_TRUNC('day', CURRENT_TIMESTAMP()))))) AS string))) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((0)=(datediff(day, timestamp '2022-10-03 10:23:00', timestamp '2022-10-04 09:23:00'))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: days(@2022-10-03 10:23:00 to @2022-10-04 09:23:00) == 0',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST((datediff(day, timestamp '2022-10-03 10:23:00', timestamp '2022-10-04 09:23:00')) AS string))) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN schema rows [ { col_name: '1', data_type: 'int', comment: null } ]

      at DatabricksTestConnection._callee4$ (packages/malloy-db-databricks/src/databricks_connection.ts:182:13)

  console.log
    BRIAN calling runSQL SELECT 
       FLOOR(datediff(day, DATE '2001-01-01', DATE '2002-01-01')) as `yd`
    FROM (SELECT 1) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         timestamp '2021-02-24 03:05:06' as `expect`,
         DATE_TRUNC('second', base.`t_timestamp`) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_timestamp.second == @2021-02-24 03:05:06',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         timestamp '2021-02-24 03:05:00' as `expect`,
         DATE_TRUNC('minute', base.`t_timestamp`) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_timestamp.minute == @2021-02-24 03:05:00',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         timestamp '2021-02-24 03:00:00' as `expect`,
         DATE_TRUNC('hour', base.`t_timestamp`) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_timestamp.hour == @2021-02-24 03:00:00',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         timestamp '2021-02-24 00:00:00' as `expect`,
         DATE_TRUNC('day', base.`t_timestamp`) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_timestamp.day == @2021-02-24 00:00:00',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         timestamp '2021-02-21 00:00:00' as `expect`,
         DATE_SUB(DATE_TRUNC('week', DATE_ADD(base.`t_timestamp`, 1)), 1) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_timestamp.week == @2021-02-21 00:00:00',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         timestamp '2021-02-01 00:00:00' as `expect`,
         DATE_TRUNC('month', base.`t_timestamp`) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_timestamp.month == @2021-02-01 00:00:00',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         timestamp '2021-01-01 00:00:00' as `expect`,
         DATE_TRUNC('quarter', base.`t_timestamp`) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_timestamp.quarter == @2021-01-01 00:00:00',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         timestamp '2021-01-01 00:00:00' as `expect`,
         DATE_TRUNC('year', base.`t_timestamp`) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_timestamp.year == @2021-01-01 00:00:00',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         6 as `expect`,
         EXTRACT(second FROM (base.`t_timestamp`)) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: second(t_timestamp) == 6',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         5 as `expect`,
         EXTRACT(minute FROM (base.`t_timestamp`)) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: minute(t_timestamp) == 5',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         3 as `expect`,
         EXTRACT(hour FROM (base.`t_timestamp`)) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: hour(t_timestamp) == 3',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         24 as `expect`,
         EXTRACT(day FROM (base.`t_timestamp`)) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: day(t_timestamp) == 24',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         4 as `expect`,
         EXTRACT(dayofweek FROM (base.`t_timestamp`)) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: day_of_week(t_timestamp) == 4',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         1 as `expect`,
         EXTRACT(dayofweek FROM (DATE_SUB(DATE_TRUNC('week', DATE_ADD(base.`t_timestamp`, 1)), 1))) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: day_of_week(t_timestamp.week) == 1',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         55 as `expect`,
         EXTRACT(doy FROM (base.`t_timestamp`)) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: day_of_year(t_timestamp) == 55',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         8 as `expect`,
         EXTRACT(week FROM (base.`t_timestamp`)) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: week(t_timestamp) == 8',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         2 as `expect`,
         EXTRACT(month FROM (base.`t_timestamp`)) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: month(t_timestamp) == 2',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         1 as `expect`,
         EXTRACT(quarter FROM (base.`t_timestamp`)) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: quarter(t_timestamp) == 1',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         2021 as `expect`,
         EXTRACT(year FROM (base.`t_timestamp`)) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: year(t_timestamp) == 2021',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         DATE_TRUNC('day', (DATE '2021-02-24')) as `expect`,
         DATE_TRUNC('day', (DATE_TRUNC('day', base.`t_date`))) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (DATE_TRUNC('day', (base.`expect`))=DATE_TRUNC('day', (base.`got`))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_date.day == @2021-02-24',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(DATE_TRUNC('day', (base.`got`)) AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         DATE_TRUNC('day', (DATE '2021-02-21')) as `expect`,
         DATE_SUB(DATE_TRUNC('week', DATE_ADD((DATE_SUB(DATE_TRUNC('week', DATE_ADD(base.`t_date`, 1)), 1)), 1)), 1) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (DATE_TRUNC('day', (base.`expect`))=DATE_SUB(DATE_TRUNC('week', DATE_ADD((base.`got`), 1)), 1)) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_date.week == @2021-02-21',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(DATE_SUB(DATE_TRUNC('week', DATE_ADD((base.`got`), 1)), 1) AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         DATE_TRUNC('day', (DATE '2021-02-01')) as `expect`,
         DATE_TRUNC('month', (DATE_TRUNC('month', base.`t_date`))) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (DATE_TRUNC('day', (base.`expect`))=DATE_TRUNC('month', (base.`got`))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_date.month == @2021-02-01',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(DATE_TRUNC('month', (base.`got`)) AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         DATE_TRUNC('day', (DATE '2021-01-01')) as `expect`,
         DATE_TRUNC('quarter', (DATE_TRUNC('quarter', base.`t_date`))) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (DATE_TRUNC('day', (base.`expect`))=DATE_TRUNC('quarter', (base.`got`))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_date.quarter == @2021-01-01',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(DATE_TRUNC('quarter', (base.`got`)) AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         DATE_TRUNC('year', (DATE '2021-01-01')) as `expect`,
         DATE_TRUNC('year', (DATE_TRUNC('year', base.`t_date`))) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (DATE_TRUNC('year', (base.`expect`))=DATE_TRUNC('year', (base.`got`))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_date.year == @2021',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(DATE_TRUNC('year', (base.`got`)) AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         24 as `expect`,
         EXTRACT(day FROM (base.`t_date`)) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: day(t_date) == 24',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         4 as `expect`,
         EXTRACT(dayofweek FROM (base.`t_date`)) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: day_of_week(t_date) == 4',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         55 as `expect`,
         EXTRACT(doy FROM (base.`t_date`)) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: day_of_year(t_date) == 55',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         8 as `expect`,
         EXTRACT(week FROM (base.`t_date`)) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: week(t_date) == 8',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         2 as `expect`,
         EXTRACT(month FROM (base.`t_date`)) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: month(t_date) == 2',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         1 as `expect`,
         EXTRACT(quarter FROM (base.`t_date`)) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: quarter(t_date) == 1',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         2021 as `expect`,
         EXTRACT(year FROM (base.`t_date`)) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: year(t_date) == 2021',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         timestamp '2021-02-24 03:05:16' as `expect`,
         DATEADD(second, 10, base.`t_timestamp`) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_timestamp + 10 seconds == @2021-02-24 03:05:16',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         timestamp '2021-02-24 03:05:00' as `expect`,
         DATEADD(second, 6*-1, base.`t_timestamp`) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_timestamp - 6 seconds == @2021-02-24 03:05:00',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         timestamp '2021-02-24 03:15:06' as `expect`,
         DATEADD(minute, 10, base.`t_timestamp`) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_timestamp + 10 minutes == @2021-02-24 03:15:06',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         timestamp '2021-02-24 13:05:06' as `expect`,
         DATEADD(hour, 10, base.`t_timestamp`) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_timestamp + 10 hours == @2021-02-24 13:05:06',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         DATE_TRUNC('day', (DATE '2021-02-10')) as `expect`,
         DATE(((DATEADD(day, (2*7)*-1, base.`t_timestamp`)))) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (DATE_TRUNC('day', (base.`expect`))=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: (t_timestamp - 2 weeks)::date == @2021-02-10',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         DATE_TRUNC('day', (DATE '2021-11-24')) as `expect`,
         DATE(((DATEADD(month, 9, base.`t_timestamp`)))) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (DATE_TRUNC('day', (base.`expect`))=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: (t_timestamp + 9 months)::date == @2021-11-24',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         DATE_TRUNC('day', (DATE '2021-08-24')) as `expect`,
         DATE(((DATEADD(month, (2*3), base.`t_timestamp`)))) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (DATE_TRUNC('day', (base.`expect`))=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: (t_timestamp + 2 quarters)::date == @2021-08-24',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         DATE_TRUNC('day', (DATE '2031-02-24')) as `expect`,
         DATE(((DATEADD(year, 10, base.`t_timestamp`)))) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (DATE_TRUNC('day', (base.`expect`))=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: (t_timestamp + 10 years)::date == @2031-02-24',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         DATE_TRUNC('day', (DATE '2021-02-10')) as `expect`,
         DATEADD(day, (2*7)*-1, base.`t_date`) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (DATE_TRUNC('day', (base.`expect`))=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_date - 2 weeks == @2021-02-10',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         DATE_TRUNC('day', (DATE '2021-11-24')) as `expect`,
         DATEADD(month, 9, base.`t_date`) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (DATE_TRUNC('day', (base.`expect`))=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_date + 9 months == @2021-11-24',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         DATE_TRUNC('day', (DATE '2021-08-24')) as `expect`,
         DATEADD(month, (2*3), base.`t_date`) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (DATE_TRUNC('day', (base.`expect`))=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_date + 2 quarters == @2021-08-24',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         DATE_TRUNC('day', (DATE '2031-02-24')) as `expect`,
         DATEADD(year, 10, base.`t_date`) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (DATE_TRUNC('day', (base.`expect`))=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_date + 10 years == @2031-02-24',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((base.`t_date`>=DATE '2021-02-25') and (base.`t_date`<(DATEADD(day, 1, DATE '2021-02-25')))) THEN (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_date ? @2021-02-25 for 1 day to be false')) ELSE '=' END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((base.`t_date`>=DATE '2021-02-24') and (base.`t_date`<(DATEADD(day, 1, DATE '2021-02-24')))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_date ? @2021-02-24 for 1 day to be true')) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((base.`t_date`>=DATE '2021-02-23') and (base.`t_date`<(DATEADD(day, 1, DATE '2021-02-23')))) THEN (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_date ? @2021-02-23 for 1 day to be false')) ELSE '=' END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((base.`t_timestamp`>=timestamp '2021-02-25 00:00:00') and (base.`t_timestamp`<(DATEADD(day, 1, timestamp '2021-02-25 00:00:00')))) THEN (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_timestamp ? @2021-02-25 00:00:00 for 1 day to be false')) ELSE '=' END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((base.`t_timestamp`>=timestamp '2021-02-24 03:04:05') and (base.`t_timestamp`<(DATEADD(day, 1, timestamp '2021-02-24 03:04:05')))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_timestamp ? @2021-02-24 03:04:05 for 1 day to be true')) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((base.`t_timestamp`>=timestamp '2021-02-23 03:05:06') and (base.`t_timestamp`<(DATEADD(day, 1, timestamp '2021-02-23 03:05:06')))) THEN (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_timestamp ? @2021-02-23 03:05:06 for 1 day to be false')) ELSE '=' END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((base.`t_date`>=DATE '2021-02-25') and (base.`t_date`<DATE '2021-03-01')) THEN (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_date ? @2021-02-25 to @2021-03-01 to be false')) ELSE '=' END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((base.`t_date`>=DATE '2021-02-24') and (base.`t_date`<DATE '2021-03-01')) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_date ? @2021-02-24 to @2021-03-01 to be true')) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((base.`t_date`>=DATE '2021-02-01') and (base.`t_date`<DATE '2021-02-24')) THEN (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_date ? @2021-02-01 to @2021-02-24 to be false')) ELSE '=' END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((base.`t_timestamp`>=timestamp '2021-02-25 00:00:00') and (base.`t_timestamp`<timestamp '2021-02-26 00:00:00')) THEN (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_timestamp ? @2021-02-25 00:00:00 to @2021-02-26 00:00:00 to be false')) ELSE '=' END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((base.`t_timestamp`>=timestamp '2021-02-24 03:04:05') and (base.`t_timestamp`<timestamp '2021-02-26 00:00:00')) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_timestamp ? @2021-02-24 03:04:05 to @2021-02-26 00:00:00 to be true')) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((base.`t_timestamp`>=timestamp '2021-02-24 00:00:00') and (base.`t_timestamp`<timestamp '2021-02-24 03:05:06')) THEN (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_timestamp ? @2021-02-24 00:00:00 to @2021-02-24 03:05:06 to be false')) ELSE '=' END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         DATE_TRUNC('day', (DATE '2021-02-24')) as `expect`,
         base.`t_date` as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (DATE_TRUNC('day', (base.`expect`))=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_date == @2021-02-24',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         timestamp '2021-02-24 03:05:06' as `expect`,
         base.`t_timestamp` as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_timestamp == @2021-02-24 03:05:06',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         2000 as `expect`,
         EXTRACT(year FROM (timestamp '2000-01-01 00:00:00')) as `got`
      FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
    )
    SELECT 
       CASE WHEN (base.`expect`=base.`got`) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: year(@2000-01-01 00:00) == 2000',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Received: ',CAST(base.`got` AS string))) END as `calc`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((timestamp '2021-02-24 03:05:06'>=DATE_TRUNC('minute', base.`t_timestamp`)) and (timestamp '2021-02-24 03:05:06'<(DATEADD(minute, 1, DATE_TRUNC('minute', base.`t_timestamp`))))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: @2021-02-24 03:05:06 ? t_timestamp.minute to be true')) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((timestamp '2021-03-24 03:04:59'>=DATE_TRUNC('minute', base.`t_timestamp`)) and (timestamp '2021-03-24 03:04:59'<(DATEADD(minute, 1, DATE_TRUNC('minute', base.`t_timestamp`))))) THEN (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: @2021-03-24 03:04:59 ? t_timestamp.minute to be false')) ELSE '=' END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((timestamp '2021-02-24 03:05:06'>=DATE_TRUNC('day', base.`t_timestamp`)) and (timestamp '2021-02-24 03:05:06'<(DATEADD(day, 1, DATE_TRUNC('day', base.`t_timestamp`))))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: @2021-02-24 03:05:06 ? t_timestamp.day to be true')) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((timestamp '2021-02-24 03:05:06'>=DATE_TRUNC('year', base.`t_timestamp`)) and (timestamp '2021-02-24 03:05:06'<(DATEADD(year, 1, DATE_TRUNC('year', base.`t_timestamp`))))) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: @2021-02-24 03:05:06 ? t_timestamp.year to be true')) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((base.`t_timestamp`>=timestamp '2021-02-24 03:05:00') and (base.`t_timestamp`<timestamp '2021-02-24 03:06:00')) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_timestamp ? @2021-02-24 03:05 to be true')) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((base.`t_timestamp`>=timestamp '2021-02-24 00:00:00') and (base.`t_timestamp`<timestamp '2021-02-25 00:00:00')) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_timestamp ? @2021-02-24 to be true')) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((base.`t_date`>=DATE '2021-02-01') and (base.`t_date`<DATE '2021-03-01')) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_date ? @2021-02 to be true')) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((base.`t_timestamp`>=timestamp '2021-02-01 00:00:00') and (base.`t_timestamp`<timestamp '2021-03-01 00:00:00')) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_timestamp ? @2021-02 to be true')) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN ((base.`t_timestamp`>=timestamp '2021-01-01 00:00:00') and (base.`t_timestamp`<timestamp '2022-01-01 00:00:00')) THEN '=' ELSE (CONCAT('sqlEq failed',CASE WHEN 10 = 0 THEN '' ELSE CHR(10) END,'    Expected: t_timestamp ? @2021 to be true')) END as `calc`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       DATE_TRUNC('month', joined_0.`t_timestamp`) as `t_month`
    FROM (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) as base
     LEFT JOIN (SELECT DATE '2021-02-24' as `t_date`, TIMESTAMP '2021-02-24 03:05:06' as `t_timestamp` ) AS joined_0
      ON base.`t_date`=joined_0.`t_date`
    GROUP BY 1
    ORDER BY 1 desc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN schema rows [ { col_name: 'one', data_type: 'int', comment: null } ]

      at DatabricksTestConnection._callee4$ (packages/malloy-db-databricks/src/databricks_connection.ts:182:13)

  console.log
    BRIAN calling runSQL SELECT 
       to_utc_timestamp(timestamp'2021-02-24 03:05:06', 'America/Los_Angeles') as `la_time`
    FROM (SELECT 1 as one) as base
    GROUP BY 1
    ORDER BY 1 desc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT
        group_set,
        timestamp '2021-02-24 03:05:06' as `default_time__0`,
        ARRAY_SORT(COALESCE(ARRAY_AGG(CASE WHEN group_set=0 THEN STRUCT(
          to_utc_timestamp(timestamp'2021-02-24 03:05:06', 'America/Los_Angeles') as `la_time`) END), ARRAY()), (x, y) -> CASE WHEN x.to_utc_timestamp(timestamp'2021-02-24 = y.to_utc_timestamp(timestamp'2021-02-24 THEN 0 WHEN x.to_utc_timestamp(timestamp'2021-02-24 < y.to_utc_timestamp(timestamp'2021-02-24 THEN -1 ELSE 1 END) as `la_query__0`
      FROM (SELECT 1 as one) as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,0,1)) as group_set)
      GROUP BY 1,2
    )
    SELECT
      `default_time__0` as `default_time`,
      GET((ARRAY_AGG(`la_query__0`) FILTER (WHERE group_set=0 AND `la_query__0` IS NOT NULL)),0) as `la_query`
    FROM __stage0
    GROUP BY 1
    ORDER BY 1 desc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    Exeption when running SQL:
     WITH __stage0 AS (
      SELECT
        group_set,
        timestamp '2021-02-24 03:05:06' as `default_time__0`,
        ARRAY_SORT(COALESCE(ARRAY_AGG(CASE WHEN group_set=0 THEN STRUCT(
          to_utc_timestamp(timestamp'2021-02-24 03:05:06', 'America/Los_Angeles') as `la_time`) END), ARRAY()), (x, y) -> CASE WHEN x.to_utc_timestamp(timestamp'2021-02-24 = y.to_utc_timestamp(timestamp'2021-02-24 THEN 0 WHEN x.to_utc_timestamp(timestamp'2021-02-24 < y.to_utc_timestamp(timestamp'2021-02-24 THEN -1 ELSE 1 END) as `la_query__0`
      FROM (SELECT 1 as one) as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,0,1)) as group_set)
      GROUP BY 1,2
    )
    SELECT
      `default_time__0` as `default_time`,
      GET((ARRAY_AGG(`la_query__0`) FILTER (WHERE group_set=0 AND `la_query__0` IS NOT NULL)),0) as `la_query`
    FROM __stage0
    GROUP BY 1
    ORDER BY 1 desc NULLS LAST

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:129:15)

  console.log
    Exception: Error: 
    [PARSE_SYNTAX_ERROR] Syntax error at or near '2021'. SQLSTATE: 42601 (line 6, pos 199)
    
    == SQL ==
    WITH __stage0 AS (
      SELECT
        group_set,
        timestamp '2021-02-24 03:05:06' as `default_time__0`,
        ARRAY_SORT(COALESCE(ARRAY_AGG(CASE WHEN group_set=0 THEN STRUCT(
          to_utc_timestamp(timestamp'2021-02-24 03:05:06', 'America/Los_Angeles') as `la_time`) END), ARRAY()), (x, y) -> CASE WHEN x.to_utc_timestamp(timestamp'2021-02-24 = y.to_utc_timestamp(timestamp'2021-02-24 THEN 0 WHEN x.to_utc_timestamp(timestamp'2021-02-24 < y.to_utc_timestamp(timestamp'2021-02-24 THEN -1 ELSE 1 END) as `la_query__0`
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------^^^
      FROM (SELECT 1 as one) as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,0,1)) as group_set)
      GROUP BY 1,2
    )
    SELECT
      `default_time__0` as `default_time`,
      GET((ARRAY_AGG(`la_query__0`) FILTER (WHERE group_set=0 AND `la_query__0` IS NOT NULL)),0) as `la_query`
    FROM __stage0
    GROUP BY 1
    ORDER BY 1 desc NULLS LAST

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:131:15)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT
        group_set,
        to_utc_timestamp(timestamp'2021-02-24 03:05:06', 'America/Los_Angeles') as `default_time__0`,
        ARRAY_SORT(COALESCE(ARRAY_AGG(CASE WHEN group_set=0 THEN STRUCT(
          timestamp '2021-02-24 03:05:06' as `undef_time`) END), ARRAY()), (x, y) -> CASE WHEN x.timestamp = y.timestamp THEN 0 WHEN x.timestamp < y.timestamp THEN -1 ELSE 1 END) as `undef_query__0`
      FROM (SELECT 1 as one) as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,0,1)) as group_set)
      GROUP BY 1,2
    )
    SELECT
      `default_time__0` as `default_time`,
      GET((ARRAY_AGG(`undef_query__0`) FILTER (WHERE group_set=0 AND `undef_query__0` IS NOT NULL)),0) as `undef_query`
    FROM __stage0
    GROUP BY 1
    ORDER BY 1 desc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    Exeption when running SQL:
     WITH __stage0 AS (
      SELECT
        group_set,
        to_utc_timestamp(timestamp'2021-02-24 03:05:06', 'America/Los_Angeles') as `default_time__0`,
        ARRAY_SORT(COALESCE(ARRAY_AGG(CASE WHEN group_set=0 THEN STRUCT(
          timestamp '2021-02-24 03:05:06' as `undef_time`) END), ARRAY()), (x, y) -> CASE WHEN x.timestamp = y.timestamp THEN 0 WHEN x.timestamp < y.timestamp THEN -1 ELSE 1 END) as `undef_query__0`
      FROM (SELECT 1 as one) as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,0,1)) as group_set)
      GROUP BY 1,2
    )
    SELECT
      `default_time__0` as `default_time`,
      GET((ARRAY_AGG(`undef_query__0`) FILTER (WHERE group_set=0 AND `undef_query__0` IS NOT NULL)),0) as `undef_query`
    FROM __stage0
    GROUP BY 1
    ORDER BY 1 desc NULLS LAST

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:129:15)

  console.log
    Exception: Error: [FIELD_NOT_FOUND] No such struct field `timestamp` in `undef_time`. SQLSTATE: 42704

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:131:15)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT
        group_set,
        to_utc_timestamp(timestamp'2021-02-24 03:05:06', 'America/New_York') as `ny_time__0`,
        ARRAY_SORT(COALESCE(ARRAY_AGG(CASE WHEN group_set=0 THEN STRUCT(
          to_utc_timestamp(timestamp'2021-02-24 03:05:06', 'America/Los_Angeles') as `la_time`) END), ARRAY()), (x, y) -> CASE WHEN x.to_utc_timestamp(timestamp'2021-02-24 = y.to_utc_timestamp(timestamp'2021-02-24 THEN 0 WHEN x.to_utc_timestamp(timestamp'2021-02-24 < y.to_utc_timestamp(timestamp'2021-02-24 THEN -1 ELSE 1 END) as `la_query__0`,
        ARRAY_SORT(COALESCE(ARRAY_AGG(CASE WHEN group_set=0 THEN STRUCT(
          to_utc_timestamp(timestamp'2021-02-24 03:05:06', 'America/Mexico_City') as `mex_time`) END), ARRAY()), (x, y) -> CASE WHEN x.to_utc_timestamp(timestamp'2021-02-24 = y.to_utc_timestamp(timestamp'2021-02-24 THEN 0 WHEN x.to_utc_timestamp(timestamp'2021-02-24 < y.to_utc_timestamp(timestamp'2021-02-24 THEN -1 ELSE 1 END) as `mex_query__0`
      FROM (SELECT 1 as one) as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,0,1)) as group_set)
      GROUP BY 1,2
    )
    SELECT
      `ny_time__0` as `ny_time`,
      GET((ARRAY_AGG(`la_query__0`) FILTER (WHERE group_set=0 AND `la_query__0` IS NOT NULL)),0) as `la_query`,
      GET((ARRAY_AGG(`mex_query__0`) FILTER (WHERE group_set=0 AND `mex_query__0` IS NOT NULL)),0) as `mex_query`
    FROM __stage0
    GROUP BY 1
    ORDER BY 1 desc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    Exeption when running SQL:
     WITH __stage0 AS (
      SELECT
        group_set,
        to_utc_timestamp(timestamp'2021-02-24 03:05:06', 'America/New_York') as `ny_time__0`,
        ARRAY_SORT(COALESCE(ARRAY_AGG(CASE WHEN group_set=0 THEN STRUCT(
          to_utc_timestamp(timestamp'2021-02-24 03:05:06', 'America/Los_Angeles') as `la_time`) END), ARRAY()), (x, y) -> CASE WHEN x.to_utc_timestamp(timestamp'2021-02-24 = y.to_utc_timestamp(timestamp'2021-02-24 THEN 0 WHEN x.to_utc_timestamp(timestamp'2021-02-24 < y.to_utc_timestamp(timestamp'2021-02-24 THEN -1 ELSE 1 END) as `la_query__0`,
        ARRAY_SORT(COALESCE(ARRAY_AGG(CASE WHEN group_set=0 THEN STRUCT(
          to_utc_timestamp(timestamp'2021-02-24 03:05:06', 'America/Mexico_City') as `mex_time`) END), ARRAY()), (x, y) -> CASE WHEN x.to_utc_timestamp(timestamp'2021-02-24 = y.to_utc_timestamp(timestamp'2021-02-24 THEN 0 WHEN x.to_utc_timestamp(timestamp'2021-02-24 < y.to_utc_timestamp(timestamp'2021-02-24 THEN -1 ELSE 1 END) as `mex_query__0`
      FROM (SELECT 1 as one) as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,0,1)) as group_set)
      GROUP BY 1,2
    )
    SELECT
      `ny_time__0` as `ny_time`,
      GET((ARRAY_AGG(`la_query__0`) FILTER (WHERE group_set=0 AND `la_query__0` IS NOT NULL)),0) as `la_query`,
      GET((ARRAY_AGG(`mex_query__0`) FILTER (WHERE group_set=0 AND `mex_query__0` IS NOT NULL)),0) as `mex_query`
    FROM __stage0
    GROUP BY 1
    ORDER BY 1 desc NULLS LAST

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:129:15)

  console.log
    Exception: Error: 
    [PARSE_SYNTAX_ERROR] Syntax error at or near '2021'. SQLSTATE: 42601 (line 6, pos 199)
    
    == SQL ==
    WITH __stage0 AS (
      SELECT
        group_set,
        to_utc_timestamp(timestamp'2021-02-24 03:05:06', 'America/New_York') as `ny_time__0`,
        ARRAY_SORT(COALESCE(ARRAY_AGG(CASE WHEN group_set=0 THEN STRUCT(
          to_utc_timestamp(timestamp'2021-02-24 03:05:06', 'America/Los_Angeles') as `la_time`) END), ARRAY()), (x, y) -> CASE WHEN x.to_utc_timestamp(timestamp'2021-02-24 = y.to_utc_timestamp(timestamp'2021-02-24 THEN 0 WHEN x.to_utc_timestamp(timestamp'2021-02-24 < y.to_utc_timestamp(timestamp'2021-02-24 THEN -1 ELSE 1 END) as `la_query__0`,
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------^^^
        ARRAY_SORT(COALESCE(ARRAY_AGG(CASE WHEN group_set=0 THEN STRUCT(
          to_utc_timestamp(timestamp'2021-02-24 03:05:06', 'America/Mexico_City') as `mex_time`) END), ARRAY()), (x, y) -> CASE WHEN x.to_utc_timestamp(timestamp'2021-02-24 = y.to_utc_timestamp(timestamp'2021-02-24 THEN 0 WHEN x.to_utc_timestamp(timestamp'2021-02-24 < y.to_utc_timestamp(timestamp'2021-02-24 THEN -1 ELSE 1 END) as `mex_query__0`
      FROM (SELECT 1 as one) as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,0,1)) as group_set)
      GROUP BY 1,2
    )
    SELECT
      `ny_time__0` as `ny_time`,
      GET((ARRAY_AGG(`la_query__0`) FILTER (WHERE group_set=0 AND `la_query__0` IS NOT NULL)),0) as `la_query`,
      GET((ARRAY_AGG(`mex_query__0`) FILTER (WHERE group_set=0 AND `mex_query__0` IS NOT NULL)),0) as `mex_query`
    FROM __stage0
    GROUP BY 1
    ORDER BY 1 desc NULLS LAST

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:131:15)

  console.log
    BRIAN calling runSQL SELECT 
       timestamp '2020-02-20 00:00:00' as `literal_time`
    FROM (SELECT 1 as one) as base
    GROUP BY 1
    ORDER BY 1 desc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       to_utc_timestamp(timestamp'2020-02-20 00:00:00', 'America/Mexico_City') as `literal_time`
    FROM (SELECT 1 as one) as base
    GROUP BY 1
    ORDER BY 1 desc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       to_utc_timestamp(timestamp'2020-02-20 00:00:00', 'America/Mexico_City') as `literal_time`
    FROM (SELECT 1 as one) as base
    GROUP BY 1
    ORDER BY 1 desc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       EXTRACT(hour FROM (from_utc_timestamp((to_utc_timestamp(timestamp'2020-02-20 00:00:00', 'UTC')), 'America/Mexico_City'))) as `mex_midnight`,
       EXTRACT(day FROM (from_utc_timestamp((to_utc_timestamp(timestamp'2020-02-20 00:00:00', 'UTC')), 'America/Mexico_City'))) as `mex_day`
    FROM (SELECT 1 as one) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN schema rows [ { col_name: 'x', data_type: 'int', comment: null } ]

      at DatabricksTestConnection._callee4$ (packages/malloy-db-databricks/src/databricks_connection.ts:182:13)

  console.log
    BRIAN calling runSQL SELECT 
       DATE_TRUNC('day', from_utc_timestamp((to_utc_timestamp(timestamp'2020-02-20 00:00:00', 'UTC')), 'America/Mexico_City')) as `mex_day`
    FROM (SELECT 1 as x) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       EXTRACT(day FROM (from_utc_timestamp(DATE((to_utc_timestamp(timestamp'2020-02-20 00:00:00', 'UTC'))), 'America/Mexico_City'))) as `mex_day`
    FROM (SELECT 1 as x) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN schema rows [ { col_name: 'mex_20', data_type: 'date', comment: null } ]

      at DatabricksTestConnection._callee4$ (packages/malloy-db-databricks/src/databricks_connection.ts:182:13)

  console.log
    BRIAN calling runSQL SELECT 
       to_utc_timestamp(TIMESTAMP(base.`mex_20`), 'America/Mexico_City') as `mex_ts`
    FROM ( SELECT DATE '2020-02-20'  AS `mex_20` ) as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

FAIL test/src/databases/all/time.spec.ts (68.627 s)
  databricks date and time
    ✓ date in sql_block no explore (402 ms)
    ✓ timestamp in sql_block no explore (376 ms)
    ✓ valid timestamp without seconds (403 ms)
    ✓ dependant join dialect fragments (859 ms)
    interval measurement
      ✓ forwards is positive (11582 ms)
      ✓ reverse is negative (809 ms)
      ✓ seconds (3971 ms)
      ✓ minutes (2288 ms)
      ✓ hours (2052 ms)
      ✓ days (2180 ms)
      ✓ timeDiff passed to a function preserves rhs (1158 ms)
    timestamp truncation
      ✓ trunc second (391 ms)
      ✓ trunc minute (379 ms)
      ✓ trunc hour (412 ms)
      ✓ trunc day (416 ms)
      ✓ trunc week (425 ms)
      ✓ trunc month (402 ms)
      ✓ trunc quarter (404 ms)
      ✓ trunc year (374 ms)
    timestamp extraction
      ✓ extract second (424 ms)
      ✓ extract minute (459 ms)
      ✓ extract hour (433 ms)
      ✓ extract day (412 ms)
      ✓ extract day_of_week (392 ms)
      ✓ first week day is one  (419 ms)
      ✓ extract day_of_year (397 ms)
      ✓ extract week (392 ms)
      ✓ extract month (386 ms)
      ✓ extract quarter (412 ms)
      ✓ extract year (366 ms)
    date truncation
      ✓ date trunc day (393 ms)
      ✓ date trunc week (526 ms)
      ✓ date trunc month (409 ms)
      ✓ date trunc quarter (402 ms)
      ✓ date trunc year (418 ms)
    date extraction
      ✓ date extract day (450 ms)
      ✓ date extract day_of_week (469 ms)
      ✓ date extract day_of_year (386 ms)
      ✓ date extract week (379 ms)
      ✓ date extract month (381 ms)
      ✓ date extract quarter (375 ms)
      ✓ date extract year (377 ms)
    delta computations
      ✓ timestamp delta second (388 ms)
      ✓ timestamp delta negative second (440 ms)
      ✓ timestamp delta minute (384 ms)
      ✓ timestamp delta hours (397 ms)
      ✓ timestamp delta week (429 ms)
      ✓ timestamp delta month (402 ms)
      ✓ timestamp delta quarter (404 ms)
      ✓ timestamp delta year (390 ms)
      ✓ date delta week (399 ms)
      ✓ date delta month (390 ms)
      ✓ date delta quarter (378 ms)
      ✓ date delta year (388 ms)
    for range edge tests
      date
        ✓ before for-range is outside (405 ms)
        ✓ first for-range is inside (372 ms)
        ✓ last for-range is outside (365 ms)
      timestamp
        ✓ before for-range is outside (368 ms)
        ✓ first for-range is inside (358 ms)
        ✓ last for-range is outside (361 ms)
    to range edge tests
      date
        ✓ before to is outside (346 ms)
        ✓ first to is inside (373 ms)
        ✓ last to is outside (360 ms)
      timestamp
        ✓ before to is outside (412 ms)
        ✓ first to is inside (360 ms)
        ✓ last to is outside (360 ms)
    granular time range checks
      ✓ minute implied truncated range (807 ms)
      ✓ day implied truncated range (390 ms)
      ✓ year implied truncated range (358 ms)
      ✓ timestamp in literal minute (365 ms)
      ✓ timestamp in literal day (352 ms)
      ✓ date in literal month (342 ms)
      ✓ timestamp in literal month (324 ms)
      ✓ timestamp in literal year (361 ms)
    timezone set correctly
      ✓ timezone set in source used by query (1156 ms)
      ✕ timezone set in view inside source (428 ms)
      ✕ timezone set in query using source (639 ms)
      ✕ multiple timezones (548 ms)
  databricks: tz literals
    ✓ databricks - default timezone is UTC (375 ms)
    ✓ literal with zone name (366 ms)
  databricks: query tz
    ✓ literal timestamps (333 ms)
    ✓ extract (383 ms)
    ✕ truncate day (1068 ms)
    ✓ cast timestamp to date (379 ms)
    ✓ cast date to timestamp (1091 ms)

  ● databricks date and time › timezone set correctly › timezone set in view inside source

    query.run failed: 
    [PARSE_SYNTAX_ERROR] Syntax error at or near '2021'. SQLSTATE: 42601 (line 6, pos 199)

    == SQL ==
    WITH __stage0 AS (
      SELECT
        group_set,
        timestamp '2021-02-24 03:05:06' as `default_time__0`,
        ARRAY_SORT(COALESCE(ARRAY_AGG(CASE WHEN group_set=0 THEN STRUCT(
          to_utc_timestamp(timestamp'2021-02-24 03:05:06', 'America/Los_Angeles') as `la_time`) END), ARRAY()), (x, y) -> CASE WHEN x.to_utc_timestamp(timestamp'2021-02-24 = y.to_utc_timestamp(timestamp'2021-02-24 THEN 0 WHEN x.to_utc_timestamp(timestamp'2021-02-24 < y.to_utc_timestamp(timestamp'2021-02-24 THEN -1 ELSE 1 END) as `la_query__0`
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------^^^
      FROM (SELECT 1 as one) as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,0,1)) as group_set)
      GROUP BY 1,2
    )
    SELECT
      `default_time__0` as `default_time`,
      GET((ARRAY_AGG(`la_query__0`) FILTER (WHERE group_set=0 AND `la_query__0` IS NOT NULL)),0) as `la_query`
    FROM __stage0
    GROUP BY 1
    ORDER BY 1 desc NULLS LAST

    SQL: WITH __stage0 AS (
      SELECT
        group_set,
        timestamp '2021-02-24 03:05:06' as `default_time__0`,
        ARRAY_SORT(COALESCE(ARRAY_AGG(CASE WHEN group_set=0 THEN STRUCT(
          to_utc_timestamp(timestamp'2021-02-24 03:05:06', 'America/Los_Angeles') as `la_time`) END), ARRAY()), (x, y) -> CASE WHEN x.to_utc_timestamp(timestamp'2021-02-24 = y.to_utc_timestamp(timestamp'2021-02-24 THEN 0 WHEN x.to_utc_timestamp(timestamp'2021-02-24 < y.to_utc_timestamp(timestamp'2021-02-24 THEN -1 ELSE 1 END) as `la_query__0`
      FROM (SELECT 1 as one) as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,0,1)) as group_set)
      GROUP BY 1,2
    )
    SELECT
      `default_time__0` as `default_time`,
      GET((ARRAY_AGG(`la_query__0`) FILTER (WHERE group_set=0 AND `la_query__0` IS NOT NULL)),0) as `la_query`
    FROM __stage0
    GROUP BY 1
    ORDER BY 1 desc NULLS LAST

    [PARSE_SYNTAX_ERROR] Syntax error at or near '2021'. SQLSTATE: 42601 (line 6, pos 199)

    == SQL ==
    WITH __stage0 AS (
      SELECT
        group_set,
        timestamp '2021-02-24 03:05:06' as `default_time__0`,
        ARRAY_SORT(COALESCE(ARRAY_AGG(CASE WHEN group_set=0 THEN STRUCT(
          to_utc_timestamp(timestamp'2021-02-24 03:05:06', 'America/Los_Angeles') as `la_time`) END), ARRAY()), (x, y) -> CASE WHEN x.to_utc_timestamp(timestamp'2021-02-24 = y.to_utc_timestamp(timestamp'2021-02-24 THEN 0 WHEN x.to_utc_timestamp(timestamp'2021-02-24 < y.to_utc_timestamp(timestamp'2021-02-24 THEN -1 ELSE 1 END) as `la_query__0`
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------^^^
      FROM (SELECT 1 as one) as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,0,1)) as group_set)
      GROUP BY 1,2
    )
    SELECT
      `default_time__0` as `default_time`,
      GET((ARRAY_AGG(`la_query__0`) FILTER (WHERE group_set=0 AND `la_query__0` IS NOT NULL)),0) as `la_query`
    FROM __stage0
    GROUP BY 1
    ORDER BY 1 desc NULLS LAST

      190 |     result = await query.run();
      191 |   } catch (e) {
    > 192 |     throw new Error(
          |           ^
      193 |       `query.run failed: ${e.message}\n` +
      194 |         `SQL: ${await query.getSQL()}\n` +
      195 |         e.stack

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)
      at runQuery (test/src/util/index.ts:192:11)
      at async Object.<anonymous> (test/src/databases/all/time.spec.ts:510:13)

  ● databricks date and time › timezone set correctly › timezone set in query using source

    query.run failed: [FIELD_NOT_FOUND] No such struct field `timestamp` in `undef_time`. SQLSTATE: 42704
    SQL: WITH __stage0 AS (
      SELECT
        group_set,
        to_utc_timestamp(timestamp'2021-02-24 03:05:06', 'America/Los_Angeles') as `default_time__0`,
        ARRAY_SORT(COALESCE(ARRAY_AGG(CASE WHEN group_set=0 THEN STRUCT(
          timestamp '2021-02-24 03:05:06' as `undef_time`) END), ARRAY()), (x, y) -> CASE WHEN x.timestamp = y.timestamp THEN 0 WHEN x.timestamp < y.timestamp THEN -1 ELSE 1 END) as `undef_query__0`
      FROM (SELECT 1 as one) as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,0,1)) as group_set)
      GROUP BY 1,2
    )
    SELECT
      `default_time__0` as `default_time`,
      GET((ARRAY_AGG(`undef_query__0`) FILTER (WHERE group_set=0 AND `undef_query__0` IS NOT NULL)),0) as `undef_query`
    FROM __stage0
    GROUP BY 1
    ORDER BY 1 desc NULLS LAST

    Error: [FIELD_NOT_FOUND] No such struct field `timestamp` in `undef_time`. SQLSTATE: 42704

      190 |     result = await query.run();
      191 |   } catch (e) {
    > 192 |     throw new Error(
          |           ^
      193 |       `query.run failed: ${e.message}\n` +
      194 |         `SQL: ${await query.getSQL()}\n` +
      195 |         e.stack

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)
      at runQuery (test/src/util/index.ts:192:11)
      at async Object.<anonymous> (test/src/databases/all/time.spec.ts:539:13)

  ● databricks date and time › timezone set correctly › multiple timezones

    query.run failed: 
    [PARSE_SYNTAX_ERROR] Syntax error at or near '2021'. SQLSTATE: 42601 (line 6, pos 199)

    == SQL ==
    WITH __stage0 AS (
      SELECT
        group_set,
        to_utc_timestamp(timestamp'2021-02-24 03:05:06', 'America/New_York') as `ny_time__0`,
        ARRAY_SORT(COALESCE(ARRAY_AGG(CASE WHEN group_set=0 THEN STRUCT(
          to_utc_timestamp(timestamp'2021-02-24 03:05:06', 'America/Los_Angeles') as `la_time`) END), ARRAY()), (x, y) -> CASE WHEN x.to_utc_timestamp(timestamp'2021-02-24 = y.to_utc_timestamp(timestamp'2021-02-24 THEN 0 WHEN x.to_utc_timestamp(timestamp'2021-02-24 < y.to_utc_timestamp(timestamp'2021-02-24 THEN -1 ELSE 1 END) as `la_query__0`,
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------^^^
        ARRAY_SORT(COALESCE(ARRAY_AGG(CASE WHEN group_set=0 THEN STRUCT(
          to_utc_timestamp(timestamp'2021-02-24 03:05:06', 'America/Mexico_City') as `mex_time`) END), ARRAY()), (x, y) -> CASE WHEN x.to_utc_timestamp(timestamp'2021-02-24 = y.to_utc_timestamp(timestamp'2021-02-24 THEN 0 WHEN x.to_utc_timestamp(timestamp'2021-02-24 < y.to_utc_timestamp(timestamp'2021-02-24 THEN -1 ELSE 1 END) as `mex_query__0`
      FROM (SELECT 1 as one) as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,0,1)) as group_set)
      GROUP BY 1,2
    )
    SELECT
      `ny_time__0` as `ny_time`,
      GET((ARRAY_AGG(`la_query__0`) FILTER (WHERE group_set=0 AND `la_query__0` IS NOT NULL)),0) as `la_query`,
      GET((ARRAY_AGG(`mex_query__0`) FILTER (WHERE group_set=0 AND `mex_query__0` IS NOT NULL)),0) as `mex_query`
    FROM __stage0
    GROUP BY 1
    ORDER BY 1 desc NULLS LAST

    SQL: WITH __stage0 AS (
      SELECT
        group_set,
        to_utc_timestamp(timestamp'2021-02-24 03:05:06', 'America/New_York') as `ny_time__0`,
        ARRAY_SORT(COALESCE(ARRAY_AGG(CASE WHEN group_set=0 THEN STRUCT(
          to_utc_timestamp(timestamp'2021-02-24 03:05:06', 'America/Los_Angeles') as `la_time`) END), ARRAY()), (x, y) -> CASE WHEN x.to_utc_timestamp(timestamp'2021-02-24 = y.to_utc_timestamp(timestamp'2021-02-24 THEN 0 WHEN x.to_utc_timestamp(timestamp'2021-02-24 < y.to_utc_timestamp(timestamp'2021-02-24 THEN -1 ELSE 1 END) as `la_query__0`,
        ARRAY_SORT(COALESCE(ARRAY_AGG(CASE WHEN group_set=0 THEN STRUCT(
          to_utc_timestamp(timestamp'2021-02-24 03:05:06', 'America/Mexico_City') as `mex_time`) END), ARRAY()), (x, y) -> CASE WHEN x.to_utc_timestamp(timestamp'2021-02-24 = y.to_utc_timestamp(timestamp'2021-02-24 THEN 0 WHEN x.to_utc_timestamp(timestamp'2021-02-24 < y.to_utc_timestamp(timestamp'2021-02-24 THEN -1 ELSE 1 END) as `mex_query__0`
      FROM (SELECT 1 as one) as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,0,1)) as group_set)
      GROUP BY 1,2
    )
    SELECT
      `ny_time__0` as `ny_time`,
      GET((ARRAY_AGG(`la_query__0`) FILTER (WHERE group_set=0 AND `la_query__0` IS NOT NULL)),0) as `la_query`,
      GET((ARRAY_AGG(`mex_query__0`) FILTER (WHERE group_set=0 AND `mex_query__0` IS NOT NULL)),0) as `mex_query`
    FROM __stage0
    GROUP BY 1
    ORDER BY 1 desc NULLS LAST

    [PARSE_SYNTAX_ERROR] Syntax error at or near '2021'. SQLSTATE: 42601 (line 6, pos 199)

    == SQL ==
    WITH __stage0 AS (
      SELECT
        group_set,
        to_utc_timestamp(timestamp'2021-02-24 03:05:06', 'America/New_York') as `ny_time__0`,
        ARRAY_SORT(COALESCE(ARRAY_AGG(CASE WHEN group_set=0 THEN STRUCT(
          to_utc_timestamp(timestamp'2021-02-24 03:05:06', 'America/Los_Angeles') as `la_time`) END), ARRAY()), (x, y) -> CASE WHEN x.to_utc_timestamp(timestamp'2021-02-24 = y.to_utc_timestamp(timestamp'2021-02-24 THEN 0 WHEN x.to_utc_timestamp(timestamp'2021-02-24 < y.to_utc_timestamp(timestamp'2021-02-24 THEN -1 ELSE 1 END) as `la_query__0`,
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------^^^
        ARRAY_SORT(COALESCE(ARRAY_AGG(CASE WHEN group_set=0 THEN STRUCT(
          to_utc_timestamp(timestamp'2021-02-24 03:05:06', 'America/Mexico_City') as `mex_time`) END), ARRAY()), (x, y) -> CASE WHEN x.to_utc_timestamp(timestamp'2021-02-24 = y.to_utc_timestamp(timestamp'2021-02-24 THEN 0 WHEN x.to_utc_timestamp(timestamp'2021-02-24 < y.to_utc_timestamp(timestamp'2021-02-24 THEN -1 ELSE 1 END) as `mex_query__0`
      FROM (SELECT 1 as one) as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,0,1)) as group_set)
      GROUP BY 1,2
    )
    SELECT
      `ny_time__0` as `ny_time`,
      GET((ARRAY_AGG(`la_query__0`) FILTER (WHERE group_set=0 AND `la_query__0` IS NOT NULL)),0) as `la_query`,
      GET((ARRAY_AGG(`mex_query__0`) FILTER (WHERE group_set=0 AND `mex_query__0` IS NOT NULL)),0) as `mex_query`
    FROM __stage0
    GROUP BY 1
    ORDER BY 1 desc NULLS LAST

      190 |     result = await query.run();
      191 |   } catch (e) {
    > 192 |     throw new Error(
          |           ^
      193 |       `query.run failed: ${e.message}\n` +
      194 |         `SQL: ${await query.getSQL()}\n` +
      195 |         e.stack

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)
      at runQuery (test/src/util/index.ts:192:11)
      at async Object.<anonymous> (test/src/databases/all/time.spec.ts:558:24)

  ● databricks: query tz › truncate day

    SQL Generated:
      SELECT 
         DATE_TRUNC('day', from_utc_timestamp((to_utc_timestamp(timestamp'2020-02-20 00:00:00', 'UTC')), 'America/Mexico_City')) as `mex_day`
      FROM (SELECT 1 as x) as base
      
    Expected {mex_day: "2020-02-19T06:00:00.000Z"} Got: "2020-02-19T00:00:00.000Z"

      711 |         select: mex_day is utc_midnight.day
      712 |       }`
    > 713 |     ).malloyResultMatches(runtime, {mex_day: mex_19.toJSDate()});
          |       ^
      714 |   });
      715 |
      716 |   test.when(

      at Object.<anonymous> (test/src/databases/all/time.spec.ts:713:7)

{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
  console.log
    BRIAN schema rows [
      {
        col_name: 'aircraft_model_code',
        data_type: 'string',
        comment: null
      },
      { col_name: 'manufacturer', data_type: 'string', comment: null },
      { col_name: 'model', data_type: 'string', comment: null },
      { col_name: 'aircraft_type_id', data_type: 'bigint', comment: null },
      {
        col_name: 'aircraft_engine_type_id',
        data_type: 'bigint',
        comment: null
      },
      {
        col_name: 'aircraft_category_id',
        data_type: 'bigint',
        comment: null
      },
      { col_name: 'amateur', data_type: 'bigint', comment: null },
      { col_name: 'engines', data_type: 'bigint', comment: null },
      { col_name: 'seats', data_type: 'bigint', comment: null },
      { col_name: 'weight', data_type: 'bigint', comment: null },
      { col_name: 'speed', data_type: 'bigint', comment: null }
    ]

      at DatabricksTestConnection._callee4$ (packages/malloy-db-databricks/src/databricks_connection.ts:182:13)

  console.log
    BRIAN schema rows [
      { col_name: 'id', data_type: 'bigint', comment: null },
      { col_name: 'tail_num', data_type: 'string', comment: null },
      { col_name: 'aircraft_serial', data_type: 'string', comment: null },
      {
        col_name: 'aircraft_model_code',
        data_type: 'string',
        comment: null
      },
      {
        col_name: 'aircraft_engine_code',
        data_type: 'string',
        comment: null
      },
      { col_name: 'year_built', data_type: 'bigint', comment: null },
      { col_name: 'aircraft_type_id', data_type: 'bigint', comment: null },
      {
        col_name: 'aircraft_engine_type_id',
        data_type: 'bigint',
        comment: null
      },
      {
        col_name: 'registrant_type_id',
        data_type: 'bigint',
        comment: null
      },
      { col_name: 'name', data_type: 'string', comment: null },
      { col_name: 'address1', data_type: 'string', comment: null },
      { col_name: 'address2', data_type: 'string', comment: null },
      { col_name: 'city', data_type: 'string', comment: null },
      { col_name: 'state', data_type: 'string', comment: null },
      { col_name: 'zip', data_type: 'string', comment: null },
      { col_name: 'region', data_type: 'string', comment: null },
      { col_name: 'county', data_type: 'string', comment: null },
      { col_name: 'country', data_type: 'string', comment: null },
      { col_name: 'certification', data_type: 'string', comment: null },
      { col_name: 'status_code', data_type: 'string', comment: null },
      { col_name: 'mode_s_code', data_type: 'string', comment: null },
      { col_name: 'fract_owner', data_type: 'string', comment: null },
      { col_name: 'last_action_date', data_type: 'date', comment: null },
      { col_name: 'cert_issue_date', data_type: 'date', comment: null },
      { col_name: 'air_worth_date', data_type: 'date', comment: null }
    ]

      at DatabricksTestConnection._callee4$ (packages/malloy-db-databricks/src/databricks_connection.ts:182:13)

  console.log
    BRIAN schema rows [
      { col_name: 'id', data_type: 'bigint', comment: null },
      { col_name: 'code', data_type: 'string', comment: null },
      { col_name: 'site_number', data_type: 'string', comment: null },
      { col_name: 'fac_type', data_type: 'string', comment: null },
      { col_name: 'fac_use', data_type: 'string', comment: null },
      { col_name: 'faa_region', data_type: 'string', comment: null },
      { col_name: 'faa_dist', data_type: 'string', comment: null },
      { col_name: 'city', data_type: 'string', comment: null },
      { col_name: 'county', data_type: 'string', comment: null },
      { col_name: 'state', data_type: 'string', comment: null },
      { col_name: 'full_name', data_type: 'string', comment: null },
      { col_name: 'own_type', data_type: 'string', comment: null },
      { col_name: 'longitude', data_type: 'double', comment: null },
      { col_name: 'latitude', data_type: 'double', comment: null },
      { col_name: 'elevation', data_type: 'bigint', comment: null },
      { col_name: 'aero_cht', data_type: 'string', comment: null },
      { col_name: 'cbd_dist', data_type: 'bigint', comment: null },
      { col_name: 'cbd_dir', data_type: 'string', comment: null },
      { col_name: 'act_date', data_type: 'string', comment: null },
      { col_name: 'cert', data_type: 'string', comment: null },
      { col_name: 'fed_agree', data_type: 'string', comment: null },
      { col_name: 'cust_intl', data_type: 'string', comment: null },
      { col_name: 'c_ldg_rts', data_type: 'string', comment: null },
      { col_name: 'joint_use', data_type: 'string', comment: null },
      { col_name: 'mil_rts', data_type: 'string', comment: null },
      { col_name: 'cntl_twr', data_type: 'string', comment: null },
      { col_name: 'major', data_type: 'string', comment: null }
    ]

      at DatabricksTestConnection._callee4$ (packages/malloy-db-databricks/src/databricks_connection.ts:182:13)

  console.log
    BRIAN schema rows [
      { col_name: 'state', data_type: 'string', comment: null },
      { col_name: 'aircraft_count', data_type: 'bigint', comment: null },
      { col_name: 'airport_count', data_type: 'bigint', comment: null },
      { col_name: 'births', data_type: 'bigint', comment: null },
      { col_name: 'popular_name', data_type: 'string', comment: null }
    ]

      at DatabricksTestConnection._callee4$ (packages/malloy-db-databricks/src/databricks_connection.ts:182:13)

  console.log
    BRIAN schema rows [
      { col_name: 'carrier', data_type: 'string', comment: null },
      { col_name: 'origin', data_type: 'string', comment: null },
      { col_name: 'destination', data_type: 'string', comment: null },
      { col_name: 'flight_num', data_type: 'string', comment: null },
      { col_name: 'flight_time', data_type: 'bigint', comment: null },
      { col_name: 'tail_num', data_type: 'string', comment: null },
      { col_name: 'dep_time', data_type: 'timestamp_ntz', comment: null },
      { col_name: 'arr_time', data_type: 'timestamp_ntz', comment: null },
      { col_name: 'dep_delay', data_type: 'bigint', comment: null },
      { col_name: 'arr_delay', data_type: 'bigint', comment: null },
      { col_name: 'taxi_out', data_type: 'bigint', comment: null },
      { col_name: 'taxi_in', data_type: 'bigint', comment: null },
      { col_name: 'distance', data_type: 'bigint', comment: null },
      { col_name: 'cancelled', data_type: 'string', comment: null },
      { col_name: 'diverted', data_type: 'string', comment: null },
      { col_name: 'id2', data_type: 'bigint', comment: null }
    ]

      at DatabricksTestConnection._callee4$ (packages/malloy-db-databricks/src/databricks_connection.ts:182:13)

  console.log
    BRIAN schema rows [
      { col_name: 'code', data_type: 'string', comment: null },
      { col_name: 'name', data_type: 'string', comment: null },
      { col_name: 'nickname', data_type: 'string', comment: null }
    ]

      at DatabricksTestConnection._callee4$ (packages/malloy-db-databricks/src/databricks_connection.ts:182:13)

  console.log
    BRIAN calling runSQL SELECT 
       CONCAT('foo','bar') as `f0`,
       CONCAT(1,'bar') as `f1`,
       CONCAT('foo',DATE '2003-01-01') as `f2`,
       CONCAT('foo',timestamp '2003-01-01 12:00:00') as `f3`,
       '' as `f4`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3,4,5
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       ROUND(12.222,1) as `f0`,
       ROUND(12.2,-1) as `f1`,
       ROUND(NULL) as `f2`,
       ROUND(1,NULL) as `f3`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3,4
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       FLOOR(1.9) as `f0`,
       FLOOR(-1.9) as `f1`,
       FLOOR(NULL) as `f2`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       FLOOR(1.9) as `f`
    FROM malloytest.aircraft as base
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CEIL(1.9) as `f0`,
       CEIL(-1.9) as `f1`,
       CEIL(NULL) as `f2`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       LENGTH('foo') as `f0`,
       LENGTH(NULL) as `f1`
    FROM malloytest.state_facts as base
    GROUP BY 1,2
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       LOWER('FoO') as `f0`,
       LOWER(NULL) as `f1`
    FROM malloytest.state_facts as base
    GROUP BY 1,2
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       UPPER('fOo') as `f0`,
       UPPER(NULL) as `f1`
    FROM malloytest.state_facts as base
    GROUP BY 1,2
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       REGEXP_EXTRACT('I have a dog', 'd[aeiou]g', 0) as `f0`,
       REGEXP_EXTRACT(NULL, 'd[aeiou]g', 0) as `f1`,
       REGEXP_EXTRACT('foo', NULL, 0) as `f2`,
       REGEXP_EXTRACT('I have a d0g', 'd.g', 0) as `f3`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3,4
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       REPLACE('aaaa','a','c') as `f0`,
       REGEXP_REPLACE('aaaa', '.', 'c') as `f1`,
       REGEXP_REPLACE('axbxc', '(a).(b).(c)', '\\0 - \\1 - \\2 - \\3') as `f2`,
       REPLACE('aaaa','','c') as `f3`,
       REPLACE(NULL,'a','c') as `f4`,
       REPLACE('aaaa',NULL,'c') as `f5`,
       REPLACE('aaaa','a',NULL) as `f6`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3,4,5,6,7
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       SUBSTR('foo', CASE WHEN 2 < 0 THEN LENGTH('foo') + 2 + 1 ELSE 2 END) as `f0`,
       SUBSTR('foo', CASE WHEN 2 < 0 THEN LENGTH('foo') + 2 + 1 ELSE 2 END, 1) as `f1`,
       SUBSTR('foo bar baz', CASE WHEN -3 < 0 THEN LENGTH('foo bar baz') + -3 + 1 ELSE -3 END) as `f2`,
       SUBSTR(NULLIF('x','x'), CASE WHEN 1 < 0 THEN LENGTH(NULLIF('x','x')) + 1 + 1 ELSE 1 END, 2) as `f3`,
       SUBSTR('aaaa', CASE WHEN NULL < 0 THEN LENGTH('aaaa') + NULL + 1 ELSE NULL END, 1) as `f4`,
       SUBSTR('aaaa', CASE WHEN 1 < 0 THEN LENGTH('aaaa') + 1 + 1 ELSE 1 END, NULL) as `f5`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3,4,5,6
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       FLOOR((sqrt(25))) as `f0`,
       FLOOR(sqrt(25)) as `f1`,
       SUBSTR('foo bar baz', CASE WHEN -3 < 0 THEN LENGTH('foo bar baz') + -3 + 1 ELSE -3 END) as `f2`,
       SUBSTR(NULLIF('x','x'), CASE WHEN 1 < 0 THEN LENGTH(NULLIF('x','x')) + 1 + 1 ELSE 1 END, 2) as `f3`,
       SUBSTR('aaaa', CASE WHEN NULL < 0 THEN LENGTH('aaaa') + NULL + 1 ELSE NULL END, 1) as `f4`,
       SUBSTR('aaaa', CASE WHEN 1 < 0 THEN LENGTH('aaaa') + 1 + 1 ELSE 1 END, NULL) as `f5`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3,4,5,6
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       base.`state` as `state`,
       ROW_NUMBER() OVER(  ORDER BY  base.`state` asc NULLS LAST ) as `row_num`
    FROM malloytest.state_facts as base
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       ROW_NUMBER() OVER(  ORDER BY  base.`state` asc NULLS LAST ) as `row_num`,
       base.`state` as `state`
    FROM malloytest.state_facts as base
    GROUP BY 2
    ORDER BY 2 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       base.`popular_name` as `popular_name`,
       COUNT(1) as `c`,
       ROW_NUMBER() OVER(  ORDER BY  COUNT(1) desc NULLS LAST ) as `row_num`
    FROM malloytest.state_facts as base
    GROUP BY 1
    ORDER BY 2 desc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       COUNT(1) as `c`,
       ROW_NUMBER() OVER(  ORDER BY  COUNT(1) desc NULLS LAST ) as `row_num`
    FROM malloytest.state_facts as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT
        group_set,
        base.`state` as `state__0`,
        CASE WHEN group_set=1 THEN
          airports_0.`county`
          END as `county__1`,
        CASE WHEN group_set=1 THEN ROW_NUMBER() OVER(PARTITION BY group_set, base.`state`  ORDER BY  CASE WHEN group_set=1 THEN
          airports_0.`county`
          END asc NULLS LAST ) END as `row_num__1`
      FROM malloytest.state_facts as base
       LEFT JOIN malloytest.airports AS airports_0
        ON airports_0.`state`=base.`state`
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,1,1)) as group_set)
      GROUP BY 1,2,3
    )
    SELECT
      `state__0` as `state`,
      ARRAY_SORT(COALESCE(ARRAY_AGG(CASE WHEN group_set=1 THEN STRUCT(
        `county__1` as `county`, 
        `row_num__1`::BIGINT as `row_num`) END), ARRAY()), (x, y) -> CASE WHEN x.county = y.county THEN 0 WHEN x.county < y.county THEN -1 ELSE 1 END) as `q`
    FROM __stage0
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    Exeption when running SQL:
     WITH __stage0 AS (
      SELECT
        group_set,
        base.`state` as `state__0`,
        CASE WHEN group_set=1 THEN
          airports_0.`county`
          END as `county__1`,
        CASE WHEN group_set=1 THEN ROW_NUMBER() OVER(PARTITION BY group_set, base.`state`  ORDER BY  CASE WHEN group_set=1 THEN
          airports_0.`county`
          END asc NULLS LAST ) END as `row_num__1`
      FROM malloytest.state_facts as base
       LEFT JOIN malloytest.airports AS airports_0
        ON airports_0.`state`=base.`state`
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,1,1)) as group_set)
      GROUP BY 1,2,3
    )
    SELECT
      `state__0` as `state`,
      ARRAY_SORT(COALESCE(ARRAY_AGG(CASE WHEN group_set=1 THEN STRUCT(
        `county__1` as `county`, 
        `row_num__1`::BIGINT as `row_num`) END), ARRAY()), (x, y) -> CASE WHEN x.county = y.county THEN 0 WHEN x.county < y.county THEN -1 ELSE 1 END) as `q`
    FROM __stage0
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:129:15)

  console.log
    Exception: Error: [MISSING_AGGREGATION] The non-aggregating expression "county" is based on columns which are not participating in the GROUP BY clause.
    Add the columns or the expression to the GROUP BY, aggregate the expression, or use "any_value(county)" if you do not care which of the values within a group is returned. SQLSTATE: 42803

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:131:15)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT
        group_set,
        base.`state` as `state__0`,
        CASE WHEN group_set=0 THEN ROW_NUMBER() OVER(PARTITION BY group_set  ORDER BY  base.`state` asc NULLS LAST ) END as `row_num__0`,
        CASE WHEN group_set=1 THEN
          base.`state`
          END as `state__1`
      FROM malloytest.state_facts as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,1,1)) as group_set)
      GROUP BY 1,2,4
    )
    SELECT
      `state__0` as `state`,
      GET((ARRAY_AGG(`row_num__0`) FILTER (WHERE group_set=0 AND `row_num__0` IS NOT NULL)),0) as `row_num`,
      ARRAY_SORT(COALESCE(ARRAY_AGG(CASE WHEN group_set=1 THEN STRUCT(
        `state__1` as `state`) END), ARRAY()), (x, y) -> CASE WHEN x.state = y.state THEN 0 WHEN x.state < y.state THEN -1 ELSE 1 END) as `nested`
    FROM __stage0
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       base.`state` as `state`,
       (CEIL(base.`births`*1.0/1000000))*1000000 as `births_ballpark`,
       RANK() OVER(  ORDER BY  (CEIL(base.`births`*1.0/1000000))*1000000 desc NULLS LAST ) as `births_ballpark_rank`
    FROM malloytest.state_facts as base
    GROUP BY 1,2
    ORDER BY 2 desc NULLS LAST
    LIMIT 20

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    Exeption when running SQL:
     SELECT 
       base.`state` as `state`,
       (CEIL(base.`births`*1.0/1000000))*1000000 as `births_ballpark`,
       RANK() OVER(  ORDER BY  (CEIL(base.`births`*1.0/1000000))*1000000 desc NULLS LAST ) as `births_ballpark_rank`
    FROM malloytest.state_facts as base
    GROUP BY 1,2
    ORDER BY 2 desc NULLS LAST
    LIMIT 20

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:129:15)

  console.log
    Exception: Error: [MISSING_AGGREGATION] The non-aggregating expression "births" is based on columns which are not participating in the GROUP BY clause.
    Add the columns or the expression to the GROUP BY, aggregate the expression, or use "any_value(births)" if you do not care which of the values within a group is returned. SQLSTATE: 42803

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:131:15)

  console.log
    BRIAN calling runSQL SELECT 
       SUBSTR(base.`state`, CASE WHEN 1 < 0 THEN LENGTH(base.`state`) + 1 + 1 ELSE 1 END, 1) as `first_letter`,
       (ROUND(COUNT(1)*1.0/2))*2 as `states_with_first_letter_ish`,
       RANK() OVER(  ORDER BY  (ROUND(COUNT(1)*1.0/2))*2 desc NULLS LAST ) as `r`
    FROM malloytest.state_facts as base
    GROUP BY 1
    ORDER BY 2 desc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       SUBSTR(base.`state`, CASE WHEN 1 < 0 THEN LENGTH(base.`state`) + 1 + 1 ELSE 1 END, 1) as `first_letter`,
       (ROUND(COUNT(1)*1.0/2))*2 as `states_with_first_letter_ish`,
       RANK() OVER(  ORDER BY  (ROUND(COUNT(1)*1.0/2))*2 desc NULLS LAST ) as `r`,
       -(RANK() OVER(  ORDER BY  (ROUND(COUNT(1)*1.0/2))*2 desc NULLS LAST )) as `neg_r`
    FROM malloytest.state_facts as base
    GROUP BY 1
    ORDER BY 2 desc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT
        group_set,
        base.`faa_region` as `faa_region__0`,
        CASE WHEN group_set=0 THEN
          COUNT(1)
          END as `airport_count__0`,
        CASE WHEN group_set=0 THEN ROW_NUMBER() OVER(PARTITION BY group_set  ORDER BY  CASE WHEN group_set=0 THEN
          COUNT(1)
          END desc NULLS LAST ) END as `id__0`,
        CASE WHEN group_set IN (1,2) THEN
          base.`fac_type`
          END as `fac_type__1`,
        CASE WHEN group_set=1 THEN
          COUNT(1)
          END as `airport_count__1`,
        CASE WHEN group_set=1 THEN ROW_NUMBER() OVER(PARTITION BY group_set, base.`faa_region`  ORDER BY  CASE WHEN group_set=1 THEN
          COUNT(1)
          END desc NULLS LAST ) END as `id2__1`,
        CASE WHEN group_set=2 THEN
          AVG(base.`elevation`)
          END as `avg_elevation__2`
      FROM malloytest.airports as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,2,1)) as group_set)
      GROUP BY 1,2,5
    )
    , __stage1 AS (
      SELECT 
        CASE WHEN group_set=2 THEN 1 ELSE group_set END as group_set,
        `faa_region__0` as `faa_region__0`,
        GET((ARRAY_AGG(`airport_count__0`) FILTER (WHERE group_set=0 AND `airport_count__0` IS NOT NULL)),0) as `airport_count__0`,
        GET((ARRAY_AGG(`id__0`) FILTER (WHERE group_set=0 AND `id__0` IS NOT NULL)),0) as `id__0`,
        CASE WHEN group_set IN (1,2) THEN
          `fac_type__1`
          END as `fac_type__1`,
        GET((ARRAY_AGG(`airport_count__1`) FILTER (WHERE group_set=1 AND `airport_count__1` IS NOT NULL)),0) as `airport_count__1`,
        GET((ARRAY_AGG(`id2__1`) FILTER (WHERE group_set=1 AND `id2__1` IS NOT NULL)),0) as `id2__1`,
        TO_JSONB((ARRAY_AGG((SELECT __x FROM (SELECT 
          `avg_elevation__2`::BIGINT as `avg_elevation`) as __x)) FILTER (WHERE group_set=2))[1]) as `elevation__1`
      FROM __stage0
      GROUP BY 1,2,5
    )
    , __stage2 AS (
      SELECT
        `faa_region__0` as `faa_region`,
        GET((ARRAY_AGG(`airport_count__0`) FILTER (WHERE group_set=0 AND `airport_count__0` IS NOT NULL)),0) as `airport_count`,
        GET((ARRAY_AGG(`id__0`) FILTER (WHERE group_set=0 AND `id__0` IS NOT NULL)),0) as `id`,
        SLICE(ARRAY_SORT(COALESCE(ARRAY_AGG(CASE WHEN group_set=1 THEN STRUCT(
          `airport_count__1`::BIGINT as `airport_count`, 
          `fac_type__1` as `fac_type`, 
          `id2__1`::BIGINT as `id2`, 
          `elevation__1` as `elevation`) END), ARRAY()), (x, y) -> CASE WHEN x.airport_count = y.airport_count THEN 0 WHEN x.airport_count < y.airport_count THEN 1 ELSE -1 END), 1, 2) as `by_fac_type`
      FROM __stage1
      GROUP BY 1
    )
    SELECT 
       CAST(by_fac_type_0.id2 AS DOUBLE) as `id2`
    FROM __stage2 as base
    LATERAL VIEW posexplode_outer(base.`by_fac_type`) by_fac_type_0 AS __row_id, by_fac_type_0
    GROUP BY 1
    ORDER BY 1 desc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    Exeption when running SQL:
     WITH __stage0 AS (
      SELECT
        group_set,
        base.`faa_region` as `faa_region__0`,
        CASE WHEN group_set=0 THEN
          COUNT(1)
          END as `airport_count__0`,
        CASE WHEN group_set=0 THEN ROW_NUMBER() OVER(PARTITION BY group_set  ORDER BY  CASE WHEN group_set=0 THEN
          COUNT(1)
          END desc NULLS LAST ) END as `id__0`,
        CASE WHEN group_set IN (1,2) THEN
          base.`fac_type`
          END as `fac_type__1`,
        CASE WHEN group_set=1 THEN
          COUNT(1)
          END as `airport_count__1`,
        CASE WHEN group_set=1 THEN ROW_NUMBER() OVER(PARTITION BY group_set, base.`faa_region`  ORDER BY  CASE WHEN group_set=1 THEN
          COUNT(1)
          END desc NULLS LAST ) END as `id2__1`,
        CASE WHEN group_set=2 THEN
          AVG(base.`elevation`)
          END as `avg_elevation__2`
      FROM malloytest.airports as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,2,1)) as group_set)
      GROUP BY 1,2,5
    )
    , __stage1 AS (
      SELECT 
        CASE WHEN group_set=2 THEN 1 ELSE group_set END as group_set,
        `faa_region__0` as `faa_region__0`,
        GET((ARRAY_AGG(`airport_count__0`) FILTER (WHERE group_set=0 AND `airport_count__0` IS NOT NULL)),0) as `airport_count__0`,
        GET((ARRAY_AGG(`id__0`) FILTER (WHERE group_set=0 AND `id__0` IS NOT NULL)),0) as `id__0`,
        CASE WHEN group_set IN (1,2) THEN
          `fac_type__1`
          END as `fac_type__1`,
        GET((ARRAY_AGG(`airport_count__1`) FILTER (WHERE group_set=1 AND `airport_count__1` IS NOT NULL)),0) as `airport_count__1`,
        GET((ARRAY_AGG(`id2__1`) FILTER (WHERE group_set=1 AND `id2__1` IS NOT NULL)),0) as `id2__1`,
        TO_JSONB((ARRAY_AGG((SELECT __x FROM (SELECT 
          `avg_elevation__2`::BIGINT as `avg_elevation`) as __x)) FILTER (WHERE group_set=2))[1]) as `elevation__1`
      FROM __stage0
      GROUP BY 1,2,5
    )
    , __stage2 AS (
      SELECT
        `faa_region__0` as `faa_region`,
        GET((ARRAY_AGG(`airport_count__0`) FILTER (WHERE group_set=0 AND `airport_count__0` IS NOT NULL)),0) as `airport_count`,
        GET((ARRAY_AGG(`id__0`) FILTER (WHERE group_set=0 AND `id__0` IS NOT NULL)),0) as `id`,
        SLICE(ARRAY_SORT(COALESCE(ARRAY_AGG(CASE WHEN group_set=1 THEN STRUCT(
          `airport_count__1`::BIGINT as `airport_count`, 
          `fac_type__1` as `fac_type`, 
          `id2__1`::BIGINT as `id2`, 
          `elevation__1` as `elevation`) END), ARRAY()), (x, y) -> CASE WHEN x.airport_count = y.airport_count THEN 0 WHEN x.airport_count < y.airport_count THEN 1 ELSE -1 END), 1, 2) as `by_fac_type`
      FROM __stage1
      GROUP BY 1
    )
    SELECT 
       CAST(by_fac_type_0.id2 AS DOUBLE) as `id2`
    FROM __stage2 as base
    LATERAL VIEW posexplode_outer(base.`by_fac_type`) by_fac_type_0 AS __row_id, by_fac_type_0
    GROUP BY 1
    ORDER BY 1 desc NULLS LAST

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:129:15)

  console.log
    Exception: Error: [UNRESOLVED_ROUTINE] Cannot resolve routine `TO_JSONB` on search path [`system`.`builtin`, `system`.`session`, `workspace`.`default`]. SQLSTATE: 42883; line 38 pos 4

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:131:15)

  console.log
    BRIAN calling runSQL SELECT 
       base.`state` as `state`,
       LAG((base.`state`)) OVER(  ORDER BY  base.`state` asc NULLS LAST ) as `prev_state`
    FROM malloytest.state_facts as base
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       LOWER(base.`state`) as `lower_state`,
       LAG((LOWER(base.`state`))) OVER(  ORDER BY  LOWER(base.`state`) asc NULLS LAST ) as `prev_state`
    FROM malloytest.state_facts as base
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    Exeption when running SQL:
     SELECT 
       LOWER(base.`state`) as `lower_state`,
       LAG((LOWER(base.`state`))) OVER(  ORDER BY  LOWER(base.`state`) asc NULLS LAST ) as `prev_state`
    FROM malloytest.state_facts as base
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:129:15)

  console.log
    Exception: Error: [MISSING_AGGREGATION] The non-aggregating expression "state" is based on columns which are not participating in the GROUP BY clause.
    Add the columns or the expression to the GROUP BY, aggregate the expression, or use "any_value(state)" if you do not care which of the values within a group is returned. SQLSTATE: 42803

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:131:15)

  console.log
    BRIAN calling runSQL SELECT 
       base.`state` as `state`,
       LAG(LOWER((base.`state`))) OVER(  ORDER BY  base.`state` asc NULLS LAST ) as `prev_state`
    FROM malloytest.state_facts as base
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       LOWER(base.`state`) as `lower_state`,
       COUNT(1) as `c`,
       LAG((COUNT(1))) OVER(  ORDER BY  LOWER(base.`state`) ASC NULLS LAST ) as `prev_count`
    FROM malloytest.state_facts as base
    GROUP BY 1
    ORDER BY 1 ASC NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    Exeption when running SQL:
     SELECT 
       LOWER(base.`state`) as `lower_state`,
       COUNT(1) as `c`,
       LAG((COUNT(1))) OVER(  ORDER BY  LOWER(base.`state`) ASC NULLS LAST ) as `prev_count`
    FROM malloytest.state_facts as base
    GROUP BY 1
    ORDER BY 1 ASC NULLS LAST

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:129:15)

  console.log
    Exception: Error: [MISSING_AGGREGATION] The non-aggregating expression "state" is based on columns which are not participating in the GROUP BY clause.
    Add the columns or the expression to the GROUP BY, aggregate the expression, or use "any_value(state)" if you do not care which of the values within a group is returned. SQLSTATE: 42803

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:131:15)

  console.log
    BRIAN calling runSQL SELECT 
       base.`state` as `state`,
       LAG((base.`state`),2) OVER(  ORDER BY  base.`state` asc NULLS LAST ) as `prev_prev_state`
    FROM malloytest.state_facts as base
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       base.`state` as `state`,
       LAG((base.`state`),1,'NONE') OVER(  ORDER BY  base.`state` asc NULLS LAST ) as `prev_state`
    FROM malloytest.state_facts as base
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       base.`state` as `state`,
       DATE_TRUNC('year', (LAG(timestamp '2011-11-11 11:11:11',1,CURRENT_TIMESTAMP()) OVER(  ORDER BY  base.`state` asc NULLS LAST )))=DATE_TRUNC('year', CURRENT_TIMESTAMP()) as `lag_val`
    FROM malloytest.state_facts as base
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       aircraft_models_0.`seats` as `s`,
       LAG((aircraft_models_0.`seats`)) OVER(  ORDER BY  aircraft_models_0.`seats` asc NULLS LAST ) as `a`
    FROM malloytest.aircraft as base
     LEFT JOIN malloytest.aircraft_models AS aircraft_models_0
      ON aircraft_models_0.`aircraft_model_code`=base.`aircraft_model_code`
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT
        group_set,
        base.`state` as `state__0`,
        CASE WHEN group_set=1 THEN
          base.`county`
          END as `county__1`,
        CASE WHEN group_set=1 THEN
          COUNT(1)
          END as `aircraft_count__1`,
        CASE WHEN group_set=1 THEN FIRST_VALUE(CASE WHEN group_set=1 THEN
          COUNT(1)
          END) OVER(PARTITION BY group_set, base.`state`  ORDER BY  CASE WHEN group_set=1 THEN
          COUNT(1)
          END desc NULLS LAST ) END as `first_count__1`
      FROM malloytest.aircraft as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,1,1)) as group_set)
      WHERE base.`state` IS NOT NULL
      GROUP BY 1,2,3
    )
    SELECT
      `state__0` as `state`,
      SLICE(ARRAY_SORT(COALESCE(ARRAY_AGG(CASE WHEN group_set=1 THEN STRUCT(
        `aircraft_count__1`::BIGINT as `aircraft_count`, 
        `county__1` as `county`, 
        `first_count__1`::BIGINT as `first_count`) END), ARRAY()), (x, y) -> CASE WHEN x.aircraft_count = y.aircraft_count THEN 0 WHEN x.aircraft_count < y.aircraft_count THEN 1 ELSE -1 END), 1, 2) as `by_county`
    FROM __stage0
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       base.`state` as `state`,
       base.`births` as `births`,
       FIRST_VALUE((base.`births`)) OVER(  ORDER BY  base.`births` desc NULLS LAST ) as `most_births`
    FROM malloytest.state_facts as base
    GROUP BY 1,2
    ORDER BY 2 desc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       base.`state` as `state`,
       LAG((COUNT(1))) OVER(  ORDER BY  base.`state` asc NULLS LAST ) as `prev_airport_count`
    FROM malloytest.airports as base
    WHERE base.`state` IS NOT NULL
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       aircraft_models_0.`seats` as `seats`,
       LAG(COALESCE((SUM(DISTINCT (CAST(conv(substring(md5(concat(aircraft_models_0.`aircraft_model_code`, '')), 1, 16), 16, 10) AS DECIMAL(38,0)) * 4294967296 + CAST(conv(substring(md5(concat(aircraft_models_0.`aircraft_model_code`, '')), 16, 8), 16, 10) AS DECIMAL(38,0))) + COALESCE(aircraft_models_0.`seats`, 0)) - SUM(DISTINCT (CAST(conv(substring(md5(concat(aircraft_models_0.`aircraft_model_code`, '')), 1, 16), 16, 10) AS DECIMAL(38,0)) * 4294967296 + CAST(conv(substring(md5(concat(aircraft_models_0.`aircraft_model_code`, '')), 16, 8), 16, 10) AS DECIMAL(38,0))))),0)) OVER(  ORDER BY  aircraft_models_0.`seats` asc NULLS LAST ) as `prev_sum_of_seats`
    FROM malloytest.aircraft as base
     LEFT JOIN malloytest.aircraft_models AS aircraft_models_0
      ON aircraft_models_0.`aircraft_model_code`=base.`aircraft_model_code`
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       IF (1.9 < 0, CEIL(1.9), FLOOR(1.9)) as `f0`,
       IF (-1.9 < 0, CEIL(-1.9), FLOOR(-1.9)) as `f1`,
       CASE WHEN 12.29 < 0 THEN CEIL(12.29 * POW(10, 1)) / POW(10, 1) ELSE FLOOR(12.29 * POW(10, 1)) / POW(10, 1) END as `f2`,
       CASE WHEN 19.2 < 0 THEN CEIL(19.2 * POW(10, -1)) / POW(10, -1) ELSE FLOOR(19.2 * POW(10, -1)) / POW(10, -1) END as `f3`,
       IF (NULL < 0, CEIL(NULL), FLOOR(NULL)) as `f4`,
       CASE WHEN 1 < 0 THEN CEIL(1 * POW(10, NULL)) / POW(10, NULL) ELSE FLOOR(1 * POW(10, NULL)) / POW(10, NULL) END as `f5`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3,4,5,6
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       LOG(10, 10) as `f0`,
       LOG(10, 100) as `f1`,
       LOG(2, 32) as `f2`,
       LOG(2, NULL) as `f3`,
       LOG(NULL, 10) as `f4`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3,4,5
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       LN(EXP(1)) as `f0`,
       LN(EXP(2)) as `f1`,
       LN(NULL) as `f2`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       EXP(0) as `f0`,
       LN(EXP(1)) as `f1`,
       EXP(NULL) as `f2`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       COS(0) as `f0`,
       COS(NULL) as `f1`
    FROM malloytest.state_facts as base
    GROUP BY 1,2
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       ACOS(1) as `f0`,
       ACOS(NULL) as `f1`
    FROM malloytest.state_facts as base
    GROUP BY 1,2
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       SIN(0) as `f0`,
       SIN(NULL) as `f1`
    FROM malloytest.state_facts as base
    GROUP BY 1,2
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       ASIN(0) as `f0`,
       ASIN(NULL) as `f1`
    FROM malloytest.state_facts as base
    GROUP BY 1,2
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       TAN(0) as `f0`,
       TAN(NULL) as `f1`
    FROM malloytest.state_facts as base
    GROUP BY 1,2
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       ATAN(0) as `f0`,
       ATAN(NULL) as `f1`
    FROM malloytest.state_facts as base
    GROUP BY 1,2
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       ATAN2(0,1) as `f0`,
       ATAN2(NULL,1) as `f1`,
       ATAN2(1,NULL) as `f2`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       SQRT(9) as `f0`,
       SQRT(6.25) as `f1`,
       SQRT(NULL) as `f2`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       POW(2,3) as `f0`,
       POW(NULL,3) as `f1`,
       POW(2,NULL) as `f2`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       ABS(-3) as `f0`,
       ABS(3) as `f1`,
       ABS(NULL) as `f2`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       SIGN(100) as `f0`,
       SIGN(-2) as `f1`,
       SIGN(0) as `f2`,
       SIGN(NULL) as `f3`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3,4
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       COALESCE(CAST('+inf' AS double) = double('infinity') OR CAST('+inf' AS double) = double('-infinity'), false) as `f0`,
       COALESCE(100 = double('infinity') OR 100 = double('-infinity'), false) as `f1`,
       COALESCE(NULL = double('infinity') OR NULL = double('-infinity'), false) as `f2`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       COALESCE(CAST('NaN' AS double) = double('NaN'), false) as `f0`,
       COALESCE(100 = double('NaN'), false) as `f1`,
       COALESCE(NULL = double('NaN'), false) as `f2`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN EXISTS (SELECT 1 FROM (VALUES 1,10,-100) AS t(val) WHERE val IS NULL) THEN NULL ELSE GREATEST(1,10,-100) END as `f0`,
       ((CASE WHEN EXISTS (SELECT 1 FROM (VALUES DATE '2003-01-01',DATE '2004-01-01',DATE '1994-01-01') AS t(val) WHERE val IS NULL) THEN NULL ELSE GREATEST(DATE '2003-01-01',DATE '2004-01-01',DATE '1994-01-01') END)>=DATE '2004-01-01') and ((CASE WHEN EXISTS (SELECT 1 FROM (VALUES DATE '2003-01-01',DATE '2004-01-01',DATE '1994-01-01') AS t(val) WHERE val IS NULL) THEN NULL ELSE GREATEST(DATE '2003-01-01',DATE '2004-01-01',DATE '1994-01-01') END)<DATE '2005-01-01') as `f1`,
       (CASE WHEN EXISTS (SELECT 1 FROM (VALUES timestamp '2023-05-26 11:58:00',timestamp '2023-05-26 11:59:00') AS t(val) WHERE val IS NULL) THEN NULL ELSE GREATEST(timestamp '2023-05-26 11:58:00',timestamp '2023-05-26 11:59:00') END)=timestamp '2023-05-26 11:59:00' as `f2`,
       CASE WHEN EXISTS (SELECT 1 FROM (VALUES 'a','b') AS t(val) WHERE val IS NULL) THEN NULL ELSE GREATEST('a','b') END as `f3`,
       CASE WHEN EXISTS (SELECT 1 FROM (VALUES 1,NULL,0) AS t(val) WHERE val IS NULL) THEN NULL ELSE GREATEST(1,NULL,0) END as `f4`,
       CASE WHEN EXISTS (SELECT 1 FROM (VALUES NULL,NULL) AS t(val) WHERE val IS NULL) THEN NULL ELSE GREATEST(NULL,NULL) END as `f5`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3,4,5,6
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN EXISTS (SELECT 1 FROM (VALUES 1,10,-100) AS t(val) WHERE val IS NULL) THEN NULL ELSE LEAST(1,10,-100) END as `f0`,
       ((CASE WHEN EXISTS (SELECT 1 FROM (VALUES DATE '2003-01-01',DATE '2004-01-01',DATE '1994-01-01') AS t(val) WHERE val IS NULL) THEN NULL ELSE LEAST(DATE '2003-01-01',DATE '2004-01-01',DATE '1994-01-01') END)>=DATE '1994-01-01') and ((CASE WHEN EXISTS (SELECT 1 FROM (VALUES DATE '2003-01-01',DATE '2004-01-01',DATE '1994-01-01') AS t(val) WHERE val IS NULL) THEN NULL ELSE LEAST(DATE '2003-01-01',DATE '2004-01-01',DATE '1994-01-01') END)<DATE '1995-01-01') as `f1`,
       (CASE WHEN EXISTS (SELECT 1 FROM (VALUES timestamp '2023-05-26 11:58:00',timestamp '2023-05-26 11:59:00') AS t(val) WHERE val IS NULL) THEN NULL ELSE LEAST(timestamp '2023-05-26 11:58:00',timestamp '2023-05-26 11:59:00') END)=timestamp '2023-05-26 11:58:00' as `f2`,
       CASE WHEN EXISTS (SELECT 1 FROM (VALUES 'a','b') AS t(val) WHERE val IS NULL) THEN NULL ELSE LEAST('a','b') END as `f3`,
       CASE WHEN EXISTS (SELECT 1 FROM (VALUES 1,NULL,0) AS t(val) WHERE val IS NULL) THEN NULL ELSE LEAST(1,NULL,0) END as `f4`,
       CASE WHEN EXISTS (SELECT 1 FROM (VALUES NULL,NULL) AS t(val) WHERE val IS NULL) THEN NULL ELSE LEAST(NULL,NULL) END as `f5`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3,4,5,6
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       DIV(3,2) as `f0`,
       DIV(NULL,2) as `f1`,
       DIV(2,NULL) as `f2`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       POSITION('3' IN '123456789') as `f0`,
       POSITION('0' IN '123456789') as `f1`,
       POSITION('0' IN NULL) as `f2`,
       POSITION(NULL IN '123456789') as `f3`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3,4
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       COALESCE(startswith('hello world', 'hello'), false) as `f0`,
       COALESCE(startswith('hello world', 'world'), false) as `f1`,
       COALESCE(startswith(NULL, 'world'), false) as `f2`,
       COALESCE(startswith('hello world', NULL), false) as `f3`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3,4
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       COALESCE(RIGHT('hello world', LENGTH('world')) = 'world', false) as `f0`,
       COALESCE(RIGHT('hello world', LENGTH('hello')) = 'hello', false) as `f1`,
       COALESCE(RIGHT(NULL, LENGTH('world')) = 'world', false) as `f2`,
       COALESCE(RIGHT('hello world', LENGTH(NULL)) = NULL, false) as `f3`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3,4
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       TRIM('  keep this  ') as `f0`,
       TRIM('_' FROM '__keep_this__') as `f1`,
       TRIM('' FROM ' keep everything ') as `f2`,
       TRIM(NULL FROM 'null example') as `f3`,
       TRIM('a' FROM NULL) as `f4`,
       TRIM(NULL) as `f5`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3,4,5,6
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       LTRIM('  keep this ->  ') as `f0`,
       LTRIM('_', '__keep_this -> __') as `f1`,
       LTRIM('', ' keep everything ') as `f2`,
       LTRIM(NULL, 'null example') as `f3`,
       LTRIM('a', NULL) as `f4`,
       LTRIM(NULL) as `f5`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3,4,5,6
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       RTRIM('  <- keep this  ') as `f0`,
       RTRIM('_', '__ <- keep_this__') as `f1`,
       RTRIM('', ' keep everything ') as `f2`,
       RTRIM(NULL, 'null example') as `f3`,
       RTRIM('a', NULL) as `f4`,
       RTRIM(NULL) as `f5`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3,4,5,6
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       (RANDOM())=(RANDOM()) as `f`
    FROM malloytest.aircraft as base
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       (ABS((PI())-3.141592653589793))<0.0000000000001 as `f`
    FROM malloytest.aircraft as base
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       OCTET_LENGTH('hello') as `f0`,
       OCTET_LENGTH('©') as `f1`,
       OCTET_LENGTH(NULL) as `f2`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       COALESCE('a', 'b') as `f0`,
       COALESCE(NULL, 'b') as `f1`,
       COALESCE('a', NULL) as `f2`,
       COALESCE(NULL, NULL) as `f3`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3,4
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       COALESCE('a','b') as `f0`,
       COALESCE(NULL,'a','b') as `f1`,
       COALESCE(NULL,'b') as `f2`,
       COALESCE('a',NULL) as `f3`,
       COALESCE(NULL,NULL) as `f4`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3,4,5
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       NULLIF('a','a') as `f0`,
       NULLIF('a','b') as `f1`,
       NULLIF('a',NULL) as `f2`,
       NULLIF(NULL,NULL) as `f3`,
       NULLIF(NULL,2) as `f4`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3,4,5
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       CASE WHEN 65 = 0 THEN '' ELSE CHR(65) END as `f0`,
       CASE WHEN 255 = 0 THEN '' ELSE CHR(255) END as `f1`
    FROM malloytest.state_facts as base
    GROUP BY 1,2
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       ASCII('A') as `f0`,
       ASCII('ABC') as `f1`,
       ASCII(NULL) as `f2`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       ASCII('A') as `f0`,
       ASCII('â') as `f1`,
       ASCII('âBC') as `f2`,
       ASCII(NULL) as `f3`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3,4
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       REPEAT('foo',0) as `f0`,
       REPEAT('foo',1) as `f1`,
       REPEAT('foo',2) as `f2`,
       REPEAT(NULL,2) as `f3`,
       REPEAT('foo',NULL) as `f4`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3,4,5
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       REVERSE('foo') as `f0`,
       REVERSE('') as `f1`,
       REVERSE(NULL) as `f2`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       base.`state` as `state`,
       LEAD((base.`state`)) OVER(  ORDER BY  base.`state` asc NULLS LAST ) as `next_state`
    FROM malloytest.state_facts as base
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       base.`state` as `state`,
       LEAD((base.`state`),2) OVER(  ORDER BY  base.`state` asc NULLS LAST ) as `next_next_state`
    FROM malloytest.state_facts as base
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         base.`aircraft_count` as `aircraft_count`,
         base.`airport_count` as `airport_count`,
         base.`births` as `births`,
         base.`popular_name` as `popular_name`,
         base.`state` as `state`
      FROM malloytest.state_facts as base
      LIMIT 10
    )
    SELECT 
       base.`state` as `state`,
       LEAD((base.`state`),1,'NONE') OVER(  ORDER BY  base.`state` asc NULLS LAST ) as `next_state`
    FROM __stage0 as base
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       base.`state` as `state`,
       base.`births` as `births`,
       LAST_VALUE((base.`births`)) OVER(  ORDER BY  base.`births` desc NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as `least_births`
    FROM malloytest.state_facts as base
    GROUP BY 1,2
    ORDER BY 2 desc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       base.`state` as `state`,
       base.`births` as `births`,
       AVG((base.`births`)) OVER(  ORDER BY  base.`births` desc NULLS LAST ROWS BETWEEN 2 PRECEDING AND 0 FOLLOWING) as `rolling_avg`
    FROM malloytest.state_facts as base
    GROUP BY 1,2
    ORDER BY 2 desc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         base.`aircraft_count` as `aircraft_count`,
         base.`airport_count` as `airport_count`,
         base.`births` as `births`,
         base.`popular_name` as `popular_name`,
         base.`state` as `state`
      FROM malloytest.state_facts as base
      LIMIT 3
    )
    SELECT 
       base.`state` as `state`,
       base.`births` as `births`,
       AVG((base.`births`)) OVER(  ORDER BY  base.`births` desc NULLS LAST ROWS BETWEEN 0 PRECEDING AND 2 FOLLOWING) as `rolling_avg`
    FROM __stage0 as base
    GROUP BY 1,2
    ORDER BY 2 desc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       base.`state` as `state`,
       base.`births` as `b`,
       SUM((base.`births`)) OVER(  ORDER BY  base.`births` desc NULLS LAST ROWS BETWEEN 2 PRECEDING AND 0 FOLLOWING) as `s`
    FROM malloytest.state_facts as base
    GROUP BY 1,2
    ORDER BY 2 desc NULLS LAST
    LIMIT 5

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       base.`state` as `state`,
       base.`births` as `b`,
       SUM((base.`births`)) OVER(  ORDER BY  base.`births` desc NULLS LAST ROWS BETWEEN 0 PRECEDING AND 2 FOLLOWING) as `s`
    FROM malloytest.state_facts as base
    GROUP BY 1,2
    ORDER BY 2 desc NULLS LAST
    LIMIT 7

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         base.`aircraft_count` as `aircraft_count`,
         base.`airport_count` as `airport_count`,
         base.`births` as `births`,
         base.`popular_name` as `popular_name`,
         base.`state` as `state`
      FROM malloytest.state_facts as base
      LIMIT 5
    )
    SELECT 
       base.`state` as `state`,
       base.`births` as `births`,
       MIN((base.`births`)) OVER(  ORDER BY  base.`births` asc NULLS LAST ) as `min_c`,
       MAX((base.`births`)) OVER(  ORDER BY  base.`births` asc NULLS LAST ) as `max_c`,
       SUM((base.`births`)) OVER(  ORDER BY  base.`births` asc NULLS LAST ) as `sum_c`,
       MIN((base.`births`)) OVER(  ) as `min_w`,
       MAX((base.`births`)) OVER(  ) as `max_w`,
       SUM((base.`births`)) OVER(  ) as `sum_w`
    FROM __stage0 as base
    GROUP BY 1,2
    ORDER BY 2 asc NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       ARRAY_JOIN(ARRAY_SORT(COLLECT_LIST(base.`name`)), ',') as `f`
    FROM malloytest.aircraft as base
    WHERE base.`name`='RUTHERFORD PAT R JR'

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       ARRAY_JOIN(ARRAY_SORT(COLLECT_LIST(base.`name`)), ',') as `f`
    FROM malloytest.aircraft as base
    WHERE base.`name`='RUTHERFORD PAT R JR'

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       ARRAY_JOIN(ARRAY_SORT(COLLECT_LIST(base.`name`)), ',') as `f`
    FROM malloytest.aircraft as base
    WHERE base.`name` RLIKE '.*RUTHERFORD.*'

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       COUNT(DISTINCT state_facts2_0.`__distinct_key`) as `c`,
       (
            SELECT ARRAY_JOIN(ARRAY_SORT(COLLECT_LIST(get_json_object(a.value, '$.val0'))), '') as value
            FROM (
              SELECT ARRAY_AGG(DISTINCT to_json(named_struct('key', base.`__distinct_key`, 'val0', 'o', 'val1', ''))) as arr
            ) t
            LATERAL VIEW EXPLODE(t.arr) a AS value
          ) as `s`
    FROM (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) as base
     LEFT JOIN (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) AS state_facts2_0
      ON state_facts2_0.`state`=base.`state`

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    Exeption when running SQL:
     SELECT 
       COUNT(DISTINCT state_facts2_0.`__distinct_key`) as `c`,
       (
            SELECT ARRAY_JOIN(ARRAY_SORT(COLLECT_LIST(get_json_object(a.value, '$.val0'))), '') as value
            FROM (
              SELECT ARRAY_AGG(DISTINCT to_json(named_struct('key', base.`__distinct_key`, 'val0', 'o', 'val1', ''))) as arr
            ) t
            LATERAL VIEW EXPLODE(t.arr) a AS value
          ) as `s`
    FROM (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) as base
     LEFT JOIN (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) AS state_facts2_0
      ON state_facts2_0.`state`=base.`state`

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:129:15)

  console.log
    Exception: Error: [SCALAR_SUBQUERY_IS_IN_GROUP_BY_OR_AGGREGATE_FUNCTION] The correlated scalar subquery '"scalarsubquery(collect_list(DISTINCT to_json(named_struct(key, __distinct_key, val0, o, val1, ))))"' is neither present in GROUP BY, nor in an aggregate function.
    Add it to GROUP BY using ordinal position or wrap it in `first()` (or `first_value`) if you don't care which value you get. SQLSTATE: 0A000; line 3 pos 3

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:131:15)

  console.log
    BRIAN calling runSQL SELECT 
       ARRAY_JOIN(ARRAY_SORT(COLLECT_SET(base.`name`)), ',') as `f`
    FROM malloytest.aircraft as base
    WHERE base.`name`='RUTHERFORD PAT R JR'

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       ARRAY_JOIN(ARRAY_SORT(COLLECT_SET(base.`name`)), ',') as `f`
    FROM malloytest.aircraft as base
    WHERE base.`name`='RUTHERFORD PAT R JR'

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       ARRAY_JOIN(ARRAY_SORT(COLLECT_SET(base.`name`)), ',') as `f`
    FROM malloytest.aircraft as base
    WHERE base.`name` RLIKE '.*RUTHERFORD.*'

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         base.`name` as `name`
      FROM malloytest.aircraft as base
      WHERE base.`name` RLIKE '.*FLY.*'
      GROUP BY 1
      ORDER BY 1 desc NULLS LAST
      LIMIT 3
    )
    SELECT 
       ARRAY_JOIN(ARRAY_SORT(COLLECT_SET(base.`name`)), ',') as `f`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL WITH __stage0 AS (
      SELECT 
         base.`name` as `name`
      FROM malloytest.aircraft as base
      WHERE base.`name` RLIKE '.*FLY.*'
      GROUP BY 1
      ORDER BY 1 desc NULLS LAST
      LIMIT 3
    )
    SELECT 
       ARRAY_JOIN(ARRAY_SORT(COLLECT_SET(base.`name`)), ',') as `f`
    FROM __stage0 as base

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       EXTRACT(year FROM (base.`dep_time`)) as `yr`,
       EXTRACT(quarter FROM (base.`dep_time`)) as `qtr`,
       COUNT(1) as `qtr_flights`,
       LAG((COUNT(1))) OVER(PARTITION BY (EXTRACT(quarter FROM (base.`dep_time`))) ORDER BY (EXTRACT(year FROM (base.`dep_time`))) ASC ) as `last_yr_qtr_flights`
    FROM malloytest.flights as base
    WHERE base.`dep_time`<timestamp '2002-01-01 00:00:00'
    GROUP BY 1,2
    ORDER BY 1 ASC NULLS LAST,2 ASC NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    Exeption when running SQL:
     SELECT 
       EXTRACT(year FROM (base.`dep_time`)) as `yr`,
       EXTRACT(quarter FROM (base.`dep_time`)) as `qtr`,
       COUNT(1) as `qtr_flights`,
       LAG((COUNT(1))) OVER(PARTITION BY (EXTRACT(quarter FROM (base.`dep_time`))) ORDER BY (EXTRACT(year FROM (base.`dep_time`))) ASC ) as `last_yr_qtr_flights`
    FROM malloytest.flights as base
    WHERE base.`dep_time`<timestamp '2002-01-01 00:00:00'
    GROUP BY 1,2
    ORDER BY 1 ASC NULLS LAST,2 ASC NULLS LAST

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:129:15)

  console.log
    Exception: Error: [MISSING_AGGREGATION] The non-aggregating expression "dep_time" is based on columns which are not participating in the GROUP BY clause.
    Add the columns or the expression to the GROUP BY, aggregate the expression, or use "any_value(dep_time)" if you do not care which of the values within a group is returned. SQLSTATE: 42803

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:131:15)

  console.log
    BRIAN calling runSQL SELECT 
       COUNT(1) as `c`,
       SUBSTR(base.`state`, CASE WHEN 1 < 0 THEN LENGTH(base.`state`) + 1 + 1 ELSE 1 END, 1) as `l`,
       LAG((SUBSTR(base.`state`, CASE WHEN 1 < 0 THEN LENGTH(base.`state`) + 1 + 1 ELSE 1 END, 1))) OVER(PARTITION BY (COUNT(1))  ORDER BY  SUBSTR(base.`state`, CASE WHEN 1 < 0 THEN LENGTH(base.`state`) + 1 + 1 ELSE 1 END, 1) ASC NULLS LAST ) as `prev`
    FROM malloytest.state_facts as base
    GROUP BY 2
    ORDER BY 2 ASC NULLS LAST
    LIMIT 5

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    Exeption when running SQL:
     SELECT 
       COUNT(1) as `c`,
       SUBSTR(base.`state`, CASE WHEN 1 < 0 THEN LENGTH(base.`state`) + 1 + 1 ELSE 1 END, 1) as `l`,
       LAG((SUBSTR(base.`state`, CASE WHEN 1 < 0 THEN LENGTH(base.`state`) + 1 + 1 ELSE 1 END, 1))) OVER(PARTITION BY (COUNT(1))  ORDER BY  SUBSTR(base.`state`, CASE WHEN 1 < 0 THEN LENGTH(base.`state`) + 1 + 1 ELSE 1 END, 1) ASC NULLS LAST ) as `prev`
    FROM malloytest.state_facts as base
    GROUP BY 2
    ORDER BY 2 ASC NULLS LAST
    LIMIT 5

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:129:15)

  console.log
    Exception: Error: [MISSING_AGGREGATION] The non-aggregating expression "state" is based on columns which are not participating in the GROUP BY clause.
    Add the columns or the expression to the GROUP BY, aggregate the expression, or use "any_value(state)" if you do not care which of the values within a group is returned. SQLSTATE: 42803

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:131:15)

  console.log
    BRIAN calling runSQL SELECT 
       base.`name` as `name`,
       RANK() OVER( ORDER BY COUNT(DISTINCT aircraft_models_0.`aircraft_model_code`) DESC, COALESCE((SUM(DISTINCT (CAST(conv(substring(md5(concat(aircraft_models_0.`aircraft_model_code`, '')), 1, 16), 16, 10) AS DECIMAL(38,0)) * 4294967296 + CAST(conv(substring(md5(concat(aircraft_models_0.`aircraft_model_code`, '')), 16, 8), 16, 10) AS DECIMAL(38,0))) + COALESCE(aircraft_models_0.`seats`, 0)) - SUM(DISTINCT (CAST(conv(substring(md5(concat(aircraft_models_0.`aircraft_model_code`, '')), 1, 16), 16, 10) AS DECIMAL(38,0)) * 4294967296 + CAST(conv(substring(md5(concat(aircraft_models_0.`aircraft_model_code`, '')), 16, 8), 16, 10) AS DECIMAL(38,0))))),0) DESC ) as `r`
    FROM malloytest.aircraft as base
     LEFT JOIN malloytest.aircraft_models AS aircraft_models_0
      ON aircraft_models_0.`aircraft_model_code`=base.`aircraft_model_code`
    WHERE base.`name` IN ('UNITED AIR LINES INC','FEDERAL EXPRESS CORP','AMERICAN AIRLINES INC','CESSNA AIRCRAFT COMPANY')
    GROUP BY 1
    ORDER BY 1 ASC NULLS LAST

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

  console.log
    BRIAN calling runSQL SELECT 
       base.`state` as `state`,
       base.`births` as `births`,
       base.`popular_name` as `popular_name`,
       LAG((base.`births`)) OVER(PARTITION BY (base.`popular_name`) ORDER BY (base.`births`) DESC ) as `prev_births_by_name`
    FROM malloytest.state_facts as base
    ORDER BY 2 desc NULLS LAST
    LIMIT 3

      at DatabricksTestConnection._callee9$ (packages/malloy-db-databricks/src/databricks_connection.ts:277:13)

FAIL test/src/databases/all/functions.spec.ts (92.44 s)
  concat
    ✕ works - databricks (8553 ms)
  round
    ✓ works - databricks (739 ms)
  floor
    ✓ works - databricks (1616 ms)
  ceil
    ✓ works - databricks (819 ms)
  length
    ✓ works - databricks (818 ms)
  lower
    ✓ works - databricks (2460 ms)
  upper
    ✓ works - databricks (712 ms)
  regexp_extract
    ✓ works - databricks (731 ms)
  replace
    ✓ works - databricks (723 ms)
  substr
    ✓ works - databricks (904 ms)
  raw function call
    ✓ works - databricks (716 ms)
  row_number
    ✓ works when the order by is a dimension  - databricks (3862 ms)
    ✓ works when the order by is a dimension in the other order  - databricks (729 ms)
    ✓ works when the order by is a measure - databricks (834 ms)
    ✓ works when the order by is a measure but there is no group by - databricks (921 ms)
    ✕ works inside nest - databricks (818 ms)
    ✓ works outside nest, but with a nest nearby - databricks (2227 ms)
  rank
    ✕ works ordered by dimension - databricks (514 ms)
    ✓ works ordered by aggregate - databricks (826 ms)
    ✓ works using unary minus in calculate block - databricks (741 ms)
    ✕ properly isolated nested calculations - databricks (634 ms)
  lag
    ✓ works with one param - databricks (784 ms)
    ✕ works with expression field - databricks (511 ms)
    ✓ works with expression - databricks (672 ms)
    ✕ works with field, ordering by expression field - databricks (559 ms)
    ✓ works with offset - databricks (718 ms)
    ✓ works with default value - databricks (647 ms)
    ✓ works with now as the default value - databricks (754 ms)
  output field in calculate
    ✓ output field referenceable in calculate - databricks (3635 ms)
  first_value
    ✓ works in nest - databricks (2850 ms)
    ✓ works outside nest - databricks (714 ms)
    ✓ works with an aggregate which is not in the query - databricks (1024 ms)
    ✓ works with a localized aggregate - databricks (1128 ms)
  trunc
    ✓ works - databricks (710 ms)
  log
    ✓ works - databricks (590 ms)
  ln
    ✓ works - databricks (739 ms)
  exp
    ✓ works - databricks (619 ms)
  cos
    ✓ works - databricks (610 ms)
  acos
    ✓ works - databricks (618 ms)
  sin
    ✓ works - databricks (459 ms)
  asin
    ✓ works - databricks (445 ms)
  tan
    ✓ works - databricks (420 ms)
  atan
    ✓ works - databricks (439 ms)
  atan2
    ✓ works - databricks (621 ms)
  sqrt
    ✓ works - databricks (596 ms)
  pow
    ✓ works - databricks (629 ms)
  abs
    ✓ works - databricks (686 ms)
  sign
    ✓ works - databricks (617 ms)
  is_inf
    ✓ works - databricks (717 ms)
  is_nan
    ✓ works - databricks (497 ms)
  greatest
    ✓ works - databricks (965 ms)
  least
    ✓ works - databricks (704 ms)
  div
    ✓ works - databricks (568 ms)
  strpos
    ✓ works - databricks (608 ms)
  starts_with
    ✓ works - databricks (578 ms)
  ends_with
    ✓ works - databricks (455 ms)
  trim
    ✓ trim works - databricks (547 ms)
  ltrim
    ✓ ltrim works - databricks (586 ms)
  rtrim
    ✓ rtrim works - databricks (553 ms)
  rand
    ✓ is usually not the same value - databricks (632 ms)
  pi
    ✓ is pi - databricks (640 ms)
  byte_length
    ✓ works - databricks (649 ms)
  ifnull
    ✓ works - databricks (587 ms)
  coalesce
    ✓ works - databricks (646 ms)
  nullif
    ✓ works - databricks (579 ms)
  chr
    ✓ works - databricks (601 ms)
  ascii
    ✓ works - databricks (561 ms)
  unicode
    ✓ works - databricks (593 ms)
  string_repeat
    ✓ works - databricks (565 ms)
    ○ skipped works floor decimal - databricks
  reverse
    ✓ works - databricks (572 ms)
  lead
    ✓ works with one param - databricks (610 ms)
    ✓ works with offset - databricks (618 ms)
    ✓ works with default value - databricks (845 ms)
  count_approx
    ○ skipped works generally
    ○ skipped works with fanout
  last_value
    ✓ works - databricks (613 ms)
  avg_moving
    ✓ works - databricks (621 ms)
    ✓ works forward - databricks (655 ms)
  sum_moving
    ✓ works - databricks (662 ms)
    ✓ works forward - databricks (661 ms)
  min, max, sum / window, cumulative
    ✓ works - databricks (792 ms)
  hll_functions
    ○ skipped hyperloglog basic - databricks
    ○ skipped hyperloglog combine - databricks
    ○ skipped hyperloglog import/export - databricks
  snowflake_statistical_functions
    ○ skipped stddev works - databricks
    ○ skipped stddev_pop works - databricks
    ○ skipped variance works - databricks
    ○ skipped var_pop works - databricks
    ○ skipped var_samp works - databricks
    ○ skipped corr works - databricks
    ○ skipped covar_pop works - databricks
    ○ skipped covar_samp works - databricks
    ○ skipped percent_rank basic - databricks
    ○ skipped percent_rank with partition - databricks
  dialect functions
    duckdb
      ○ skipped to_timestamp
      ○ skipped list_extract
      ○ skipped date_part,to_seconds
    trino
      ○ skipped from_unixtime
  databricks
    string_agg
      ✓ works no order by - databricks (662 ms)
      ✓ works with dotted shortcut - databricks (492 ms)
      ✕ works with order by field - databricks (27 ms)
      ✓ works with order by direction - databricks (12 ms)
      ✕ works with multiple order_bys - databricks (12 ms)
      ✕ works with order by expression - databricks (10 ms)
      ✕ works with order by join expression - databricks (9 ms)
      ✕ works with order asc - databricks (9 ms)
      ✕ works with order desc - databricks (10 ms)
      ✓ works with fanout and order_by - databricks
      ✓ works with fanout - databricks
      ✕ works with fanout and separator - databricks (729 ms)
      ✓ works with limit - databricks (25 ms)
    string_agg_distinct
      ✕ actually distincts - databricks (22 ms)
      ✓ works no order by - databricks (638 ms)
      ✓ works with dotted shortcut - databricks (488 ms)
      ✓ works with order by direction - databricks (595 ms)
      ✓ works with order asc - databricks (642 ms)
      ✕ works with order desc - databricks (558 ms)
      ✓ works with limit - databricks (20 ms)
    partition_by
      ✕ works - databricks (596 ms)
      ✕ works with aggregate - databricks (447 ms)
      ✓ works with multiple order_bys - databricks (1048 ms)
      ✓ can be used in a select (631 ms)

  ● concat › works - databricks

    expect(received).toBe(expected) // Object.is equality

    Expected: "foo2003-01-01 00:00:00"
    Received: "foo2003-01-01 12:00:00"

      119 |       // console.log(databaseName, result.sql);
      120 |       // console.log(result.data);
    > 121 |       expect(result.data.path(0, `f${i}`).value).toBe(testCase[1]);
          |                                                  ^
      122 |     });
      123 |   };
      124 |

      at test/src/databases/all/functions.spec.ts:121:50
          at Array.forEach (<anonymous>)
      at funcTestMultiple (test/src/databases/all/functions.spec.ts:118:15)
      at async Object.<anonymous> (test/src/databases/all/functions.spec.ts:136:7)

  ● row_number › works inside nest - databricks

    [MISSING_AGGREGATION] The non-aggregating expression "county" is based on columns which are not participating in the GROUP BY clause.
    Add the columns or the expression to the GROUP BY, aggregate the expression, or use "any_value(county)" if you do not care which of the values within a group is returned. SQLSTATE: 42803

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)

  ● rank › works ordered by dimension - databricks

    [MISSING_AGGREGATION] The non-aggregating expression "births" is based on columns which are not participating in the GROUP BY clause.
    Add the columns or the expression to the GROUP BY, aggregate the expression, or use "any_value(births)" if you do not care which of the values within a group is returned. SQLSTATE: 42803

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)

  ● rank › properly isolated nested calculations - databricks

    query.run failed: [UNRESOLVED_ROUTINE] Cannot resolve routine `TO_JSONB` on search path [`system`.`builtin`, `system`.`session`, `workspace`.`default`]. SQLSTATE: 42883; line 38 pos 4
    SQL: WITH __stage0 AS (
      SELECT
        group_set,
        base.`faa_region` as `faa_region__0`,
        CASE WHEN group_set=0 THEN
          COUNT(1)
          END as `airport_count__0`,
        CASE WHEN group_set=0 THEN ROW_NUMBER() OVER(PARTITION BY group_set  ORDER BY  CASE WHEN group_set=0 THEN
          COUNT(1)
          END desc NULLS LAST ) END as `id__0`,
        CASE WHEN group_set IN (1,2) THEN
          base.`fac_type`
          END as `fac_type__1`,
        CASE WHEN group_set=1 THEN
          COUNT(1)
          END as `airport_count__1`,
        CASE WHEN group_set=1 THEN ROW_NUMBER() OVER(PARTITION BY group_set, base.`faa_region`  ORDER BY  CASE WHEN group_set=1 THEN
          COUNT(1)
          END desc NULLS LAST ) END as `id2__1`,
        CASE WHEN group_set=2 THEN
          AVG(base.`elevation`)
          END as `avg_elevation__2`
      FROM malloytest.airports as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,2,1)) as group_set)
      GROUP BY 1,2,5
    )
    , __stage1 AS (
      SELECT 
        CASE WHEN group_set=2 THEN 1 ELSE group_set END as group_set,
        `faa_region__0` as `faa_region__0`,
        GET((ARRAY_AGG(`airport_count__0`) FILTER (WHERE group_set=0 AND `airport_count__0` IS NOT NULL)),0) as `airport_count__0`,
        GET((ARRAY_AGG(`id__0`) FILTER (WHERE group_set=0 AND `id__0` IS NOT NULL)),0) as `id__0`,
        CASE WHEN group_set IN (1,2) THEN
          `fac_type__1`
          END as `fac_type__1`,
        GET((ARRAY_AGG(`airport_count__1`) FILTER (WHERE group_set=1 AND `airport_count__1` IS NOT NULL)),0) as `airport_count__1`,
        GET((ARRAY_AGG(`id2__1`) FILTER (WHERE group_set=1 AND `id2__1` IS NOT NULL)),0) as `id2__1`,
        TO_JSONB((ARRAY_AGG((SELECT __x FROM (SELECT 
          `avg_elevation__2`::BIGINT as `avg_elevation`) as __x)) FILTER (WHERE group_set=2))[1]) as `elevation__1`
      FROM __stage0
      GROUP BY 1,2,5
    )
    , __stage2 AS (
      SELECT
        `faa_region__0` as `faa_region`,
        GET((ARRAY_AGG(`airport_count__0`) FILTER (WHERE group_set=0 AND `airport_count__0` IS NOT NULL)),0) as `airport_count`,
        GET((ARRAY_AGG(`id__0`) FILTER (WHERE group_set=0 AND `id__0` IS NOT NULL)),0) as `id`,
        SLICE(ARRAY_SORT(COALESCE(ARRAY_AGG(CASE WHEN group_set=1 THEN STRUCT(
          `airport_count__1`::BIGINT as `airport_count`, 
          `fac_type__1` as `fac_type`, 
          `id2__1`::BIGINT as `id2`, 
          `elevation__1` as `elevation`) END), ARRAY()), (x, y) -> CASE WHEN x.airport_count = y.airport_count THEN 0 WHEN x.airport_count < y.airport_count THEN 1 ELSE -1 END), 1, 2) as `by_fac_type`
      FROM __stage1
      GROUP BY 1
    )
    SELECT 
       CAST(by_fac_type_0.id2 AS DOUBLE) as `id2`
    FROM __stage2 as base
    LATERAL VIEW posexplode_outer(base.`by_fac_type`) by_fac_type_0 AS __row_id, by_fac_type_0
    GROUP BY 1
    ORDER BY 1 desc NULLS LAST

    Error: [UNRESOLVED_ROUTINE] Cannot resolve routine `TO_JSONB` on search path [`system`.`builtin`, `system`.`session`, `workspace`.`default`]. SQLSTATE: 42883; line 38 pos 4

      512 |             order_by: id2 desc
      513 |           }
    > 514 |       `).malloyResultMatches(expressionModel, {
          |          ^
      515 |         id2: 2,
      516 |       });
      517 |     });

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)
      at Object.<anonymous> (test/src/databases/all/functions.spec.ts:514:10)

  ● lag › works with expression field - databricks

    [MISSING_AGGREGATION] The non-aggregating expression "state" is based on columns which are not participating in the GROUP BY clause.
    Add the columns or the expression to the GROUP BY, aggregate the expression, or use "any_value(state)" if you do not care which of the values within a group is returned. SQLSTATE: 42803

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)

  ● lag › works with field, ordering by expression field - databricks

    [MISSING_AGGREGATION] The non-aggregating expression "state" is based on columns which are not participating in the GROUP BY clause.
    Add the columns or the expression to the GROUP BY, aggregate the expression, or use "any_value(state)" if you do not care which of the values within a group is returned. SQLSTATE: 42803

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)

  ● databricks › string_agg › works with order by field - databricks

    Could not prepare query to run: Error(s) compiling model:
    FILE: internal://internal.malloy
    line 5: `order_by` must be only `asc` or `desc` with no expression
      |           order_by: name
      |                     ^

      1496 |           order_by: name
      1497 |         }
    > 1498 |       }`).malloyResultMatches(expressionModel, {
           |           ^
      1499 |         f: 'RUTHERFORD JAMES C,RUTHERFORD PAT R JR',
      1500 |       });
      1501 |     });

      at Object.<anonymous> (test/src/databases/all/functions.spec.ts:1498:11)

  ● databricks › string_agg › works with multiple order_bys - databricks

    Could not prepare query to run: Error(s) compiling model:
    FILE: internal://internal.malloy
    line 5: `order_by` must be only `asc` or `desc` with no expression
      |           order_by: city, name
      |                     ^
    line 5: `order_by` must be only `asc` or `desc` with no expression
      |           order_by: city, name
      |                           ^

      1520 |           order_by: city, name
      1521 |         }
    > 1522 |       }`).malloyResultMatches(expressionModel, {
           |           ^
      1523 |         f: 'RUTHERFORD PAT R JR,RUTHERFORD JAMES C',
      1524 |       });
      1525 |     });

      at Object.<anonymous> (test/src/databases/all/functions.spec.ts:1522:11)

  ● databricks › string_agg › works with order by expression - databricks

    Could not prepare query to run: Error(s) compiling model:
    FILE: internal://internal.malloy
    line 9: `order_by` must be only `asc` or `desc` with no expression
      |           order_by: length(name)
      |                     ^

      1536 |           order_by: length(name)
      1537 |         }
    > 1538 |       }`).malloyResultMatches(expressionModel, {
           |           ^
      1539 |         f: 'YANKEE FLYING CLUB INC,WESTCHESTER FLYING CLUB,WILSON FLYING SERVICE INC',
      1540 |       });
      1541 |     });

      at Object.<anonymous> (test/src/databases/all/functions.spec.ts:1538:11)

  ● databricks › string_agg › works with order by join expression - databricks

    Could not prepare query to run: Error(s) compiling model:
    FILE: internal://internal.malloy
    line 4: `order_by` must be only `asc` or `desc` with no expression
      |         aggregate: f is string_agg(name, ',') { order_by: aircraft_models.model }
      |                                                           ^

      1546 |         where: name ~ r'.*ADVENTURE.*'
      1547 |         aggregate: f is string_agg(name, ',') { order_by: aircraft_models.model }
    > 1548 |       }`).malloyResultMatches(expressionModel, {
           |           ^
      1549 |         f: 'ADVENTURE INC,SEA PLANE ADVENTURE INC,A BALLOON ADVENTURES ALOFT,A AERONAUTICAL ADVENTURE INC',
      1550 |       });
      1551 |     });

      at Object.<anonymous> (test/src/databases/all/functions.spec.ts:1548:11)

  ● databricks › string_agg › works with order asc - databricks

    Could not prepare query to run: Error(s) compiling model:
    FILE: internal://internal.malloy
    line 8: `order_by` must be only `asc` or `desc` with no expression
      |         aggregate: f is string_agg(name, ',') { order_by: name asc }
      |                                                           ^

      1560 |       } -> {
      1561 |         aggregate: f is string_agg(name, ',') { order_by: name asc }
    > 1562 |       }`).malloyResultMatches(expressionModel, {
           |           ^
      1563 |         f: 'WESTCHESTER FLYING CLUB,WILSON FLYING SERVICE INC,YANKEE FLYING CLUB INC',
      1564 |       });
      1565 |     });

      at Object.<anonymous> (test/src/databases/all/functions.spec.ts:1562:11)

  ● databricks › string_agg › works with order desc - databricks

    Could not prepare query to run: Error(s) compiling model:
    FILE: internal://internal.malloy
    line 8: `order_by` must be only `asc` or `desc` with no expression
      |         aggregate: f is string_agg(name, ',') { order_by: name desc }
      |                                                           ^

      1574 |       } -> {
      1575 |         aggregate: f is string_agg(name, ',') { order_by: name desc }
    > 1576 |       }`).malloyResultMatches(expressionModel, {
           |           ^
      1577 |         f: 'YANKEE FLYING CLUB INC,WILSON FLYING SERVICE INC,WESTCHESTER FLYING CLUB',
      1578 |       });
      1579 |     });

      at Object.<anonymous> (test/src/databases/all/functions.spec.ts:1576:11)

  ● databricks › string_agg › works with fanout and separator - databricks

    query.run failed: [SCALAR_SUBQUERY_IS_IN_GROUP_BY_OR_AGGREGATE_FUNCTION] The correlated scalar subquery '"scalarsubquery(collect_list(DISTINCT to_json(named_struct(key, __distinct_key, val0, o, val1, ))))"' is neither present in GROUP BY, nor in an aggregate function.
    Add it to GROUP BY using ordinal position or wrap it in `first()` (or `first_value`) if you don't care which value you get. SQLSTATE: 0A000; line 3 pos 3
    SQL: SELECT 
       COUNT(DISTINCT state_facts2_0.`__distinct_key`) as `c`,
       (
            SELECT ARRAY_JOIN(ARRAY_SORT(COLLECT_LIST(get_json_object(a.value, '$.val0'))), '') as value
            FROM (
              SELECT ARRAY_AGG(DISTINCT to_json(named_struct('key', base.`__distinct_key`, 'val0', 'o', 'val1', ''))) as arr
            ) t
            LATERAL VIEW EXPLODE(t.arr) a AS value
          ) as `s`
    FROM (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) as base
     LEFT JOIN (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) AS state_facts2_0
      ON state_facts2_0.`state`=base.`state`

    Error: [SCALAR_SUBQUERY_IS_IN_GROUP_BY_OR_AGGREGATE_FUNCTION] The correlated scalar subquery '"scalarsubquery(collect_list(DISTINCT to_json(named_struct(key, __distinct_key, val0, o, val1, ))))"' is neither present in GROUP BY, nor in an aggregate function.
    Add it to GROUP BY using ordinal position or wrap it in `first()` (or `first_value`) if you don't care which value you get. SQLSTATE: 0A000; line 3 pos 3

      1638 |         aggregate: c is state_facts2.count()
      1639 |         aggregate: s is string_agg('o', '')
    > 1640 |       }`).malloyResultMatches(expressionModel, {
           |           ^
      1641 |         s: 'ooooooooooooooooooooooooooooooooooooooooooooooooooo',
      1642 |         c: 51,
      1643 |       });

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)
      at Object.<anonymous> (test/src/databases/all/functions.spec.ts:1640:11)

  ● databricks › string_agg_distinct › actually distincts - databricks

    Could not prepare query to run: Error(s) compiling model:
    FILE: internal://internal.malloy
    line 14: `order_by` must be only `asc` or `desc` with no expression
      |           aggregate: f_all is aircraft.name.string_agg() { order_by: aircraft.name }
      |                                                                      ^

      1685 |           aggregate: f_dist is aircraft.name.string_agg_distinct() { order_by: asc }
      1686 |           aggregate: f_all is aircraft.name.string_agg() { order_by: aircraft.name }
    > 1687 |       }`).malloyResultMatches(runtime, {
           |           ^
      1688 |         f_dist: 'FOWLER IRA R DBA,RAYTHEON AIRCRAFT COMPANY',
      1689 |         f_all:
      1690 |           'FOWLER IRA R DBA,FOWLER IRA R DBA,RAYTHEON AIRCRAFT COMPANY,RAYTHEON AIRCRAFT COMPANY',

      at Object.<anonymous> (test/src/databases/all/functions.spec.ts:1687:11)

  ● databricks › string_agg_distinct › works with order desc - databricks

    SQL Generated:
      WITH __stage0 AS (
        SELECT 
           base.`name` as `name`
        FROM malloytest.aircraft as base
        WHERE base.`name` RLIKE '.*FLY.*'
        GROUP BY 1
        ORDER BY 1 desc NULLS LAST
        LIMIT 3
      )
      SELECT 
         ARRAY_JOIN(ARRAY_SORT(COLLECT_SET(base.`name`)), ',') as `f`
      FROM __stage0 as base
      
    Expected {f: "YANKEE FLYING CLUB INC,WILSON FLYING SERVICE INC,WESTCHESTER FLYING CLUB"} Got: "WESTCHESTER FLYING CLUB,WILSON FLYING SERVICE INC,YANKEE FLYING CLUB INC"

      1745 |       } -> {
      1746 |         aggregate: f is string_agg_distinct(name, ',') { order_by: desc }
    > 1747 |       }`).malloyResultMatches(expressionModel, {
           |           ^
      1748 |         f: 'YANKEE FLYING CLUB INC,WILSON FLYING SERVICE INC,WESTCHESTER FLYING CLUB',
      1749 |       });
      1750 |     });

      at Object.<anonymous> (test/src/databases/all/functions.spec.ts:1747:11)

  ● databricks › partition_by › works - databricks

    query.run failed: [MISSING_AGGREGATION] The non-aggregating expression "dep_time" is based on columns which are not participating in the GROUP BY clause.
    Add the columns or the expression to the GROUP BY, aggregate the expression, or use "any_value(dep_time)" if you do not care which of the values within a group is returned. SQLSTATE: 42803
    SQL: SELECT 
       EXTRACT(year FROM (base.`dep_time`)) as `yr`,
       EXTRACT(quarter FROM (base.`dep_time`)) as `qtr`,
       COUNT(1) as `qtr_flights`,
       LAG((COUNT(1))) OVER(PARTITION BY (EXTRACT(quarter FROM (base.`dep_time`))) ORDER BY (EXTRACT(year FROM (base.`dep_time`))) ASC ) as `last_yr_qtr_flights`
    FROM malloytest.flights as base
    WHERE base.`dep_time`<timestamp '2002-01-01 00:00:00'
    GROUP BY 1,2
    ORDER BY 1 ASC NULLS LAST,2 ASC NULLS LAST

    Error: [MISSING_AGGREGATION] The non-aggregating expression "dep_time" is based on columns which are not participating in the GROUP BY clause.
    Add the columns or the expression to the GROUP BY, aggregate the expression, or use "any_value(dep_time)" if you do not care which of the values within a group is returned. SQLSTATE: 42803

      1793 |         order_by: yr, qtr
      1794 |         where: dep_time < @2002
    > 1795 |       }`).malloyResultMatches(expressionModel, [
           |           ^
      1796 |         {yr: 2000, qtr: 1, qtr_flights: 12148, last_yr_qtr_flights: null},
      1797 |         {yr: 2000, qtr: 2, qtr_flights: 11599, last_yr_qtr_flights: null},
      1798 |         {yr: 2000, qtr: 3, qtr_flights: 12075, last_yr_qtr_flights: null},

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)
      at Object.<anonymous> (test/src/databases/all/functions.spec.ts:1795:11)

  ● databricks › partition_by › works with aggregate - databricks

    query.run failed: [MISSING_AGGREGATION] The non-aggregating expression "state" is based on columns which are not participating in the GROUP BY clause.
    Add the columns or the expression to the GROUP BY, aggregate the expression, or use "any_value(state)" if you do not care which of the values within a group is returned. SQLSTATE: 42803
    SQL: SELECT 
       COUNT(1) as `c`,
       SUBSTR(base.`state`, CASE WHEN 1 < 0 THEN LENGTH(base.`state`) + 1 + 1 ELSE 1 END, 1) as `l`,
       LAG((SUBSTR(base.`state`, CASE WHEN 1 < 0 THEN LENGTH(base.`state`) + 1 + 1 ELSE 1 END, 1))) OVER(PARTITION BY (COUNT(1))  ORDER BY  SUBSTR(base.`state`, CASE WHEN 1 < 0 THEN LENGTH(base.`state`) + 1 + 1 ELSE 1 END, 1) ASC NULLS LAST ) as `prev`
    FROM malloytest.state_facts as base
    GROUP BY 2
    ORDER BY 2 ASC NULLS LAST
    LIMIT 5

    Error: [MISSING_AGGREGATION] The non-aggregating expression "state" is based on columns which are not participating in the GROUP BY clause.
    Add the columns or the expression to the GROUP BY, aggregate the expression, or use "any_value(state)" if you do not care which of the values within a group is returned. SQLSTATE: 42803

      1817 |         order_by: l
      1818 |         limit: 5
    > 1819 |       }`).malloyResultMatches(expressionModel, [
           |           ^
      1820 |         {l: 'A', c: 4, prev: null},
      1821 |         {l: 'C', c: 3, prev: null},
      1822 |         {l: 'D', c: 2, prev: null},

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)
      at Object.<anonymous> (test/src/databases/all/functions.spec.ts:1819:11)

Test Suites: 2 failed, 2 skipped, 2 of 4 total
Tests:       21 failed, 28 skipped, 167 passed, 216 total
Snapshots:   0 total
Time:        163.35 s
Ran all test suites matching /functions|time/i.

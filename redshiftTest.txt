
> malloy@0.0.1 test
> jest --runInBand expressions

PASS test/src/databases/all/sql_expressions.spec.ts (26.508 s)
  ✓ sql expression with turducken - redshift (5024 ms)
  ✓ sql expression in second of two queries in same block, dependent on first query - redshift (3086 ms)
  ✓ sql expression in other sql expression - redshift (4699 ms)
  ✓ run sql expression as query - redshift (1586 ms)

PASS packages/malloy/src/lang/test/expressions.spec.ts
  expressions
    ✓ field name (2 ms)
    ✓ function call (3 ms)
    ✓ raw function call codegen (7 ms)
    ✓ filtered measure (5 ms)
    ✓ filtered ungrouped aggregate (25 ms)
    ✓ correctly flags filtered scalar (1 ms)
    ✓ correctly flags filtered analytic (4 ms)
    ✓ can use calculate with partition by in select (31 ms)
    ✓ paren and applied div (1 ms)
    ✓ Can compare field ats (type timestamp) to NULL (1 ms)
    ✓ Can compare field ad (type date) to NULL
    ✓ Can compare field ai (type number) to NULL (1 ms)
    ✓ Can compare field astr (type string) to NULL (1 ms)
    ✓ Can compare field abool (type boolean) to NULL (1 ms)
    timeframes
      ✓ timestamp truncate second (201 ms)
      ✓ date truncate week (3 ms)
      ✓ timestamp difference - second (21 ms)
      ✓ timestamp difference - second (3 ms)
    operators
      ✓ addition (2 ms)
      ✓ typecheck addition lhs (3 ms)
      ✓ typecheck addition rhs (1 ms)
      ✓ subtraction (3 ms)
      ✓ multiplication (1 ms)
      ✓ mod (2 ms)
      ✓ division (2 ms)
      ✓ unary negation (2 ms)
      ✓ equal (7 ms)
      ✓ not equal (2 ms)
      ✓ greater than (2 ms)
      ✓ greater than or equal (1 ms)
      ✓ less than or equal (4 ms)
      ✓ less than (2 ms)
      ✓ match (2 ms)
      ✓ not match (2 ms)
      ✓ regexp-match (2 ms)
      ✓ not regexp-match (1 ms)
      ✓ apply as equality (3 ms)
      ✓ not (4 ms)
      ✓ and (2 ms)
      ✓ or (5 ms)
      ✓ null-check (??) (6 ms)
      ✓ normal is-null (2 ms)
      ✓ normal is-not-null (1 ms)
      ✓ apply is-null (4 ms)
      ✓ apply is-not-null (1 ms)
      ✓ coalesce type mismatch (2 ms)
      ✓ disallow date OP number (1 ms)
      ✓ disallow date OP timestamp (2 ms)
      ✓ disallow interval from date to timestamp (2 ms)
      ✓ compare to truncation uses straight comparison (2 ms)
      ✓ compare to granular result expression uses straight comparison (3 ms)
      ✓ apply granular-truncation uses range (2 ms)
      ✓ apply granular-literal alternation uses all literals for range (2 ms)
      ✓ apply followed by another condition (1 ms)
      ✓ apply followed by another condition, with parenthesis (3 ms)
      ✓ apply or-tree granular-literal doesnt turn into IN (3 ms)
      ✓ comparison promotes date literal to timestamp (5 ms)
      ✓ can apply range to date (12 ms)
      ✓ disallow date delta second (8 ms)
      ✓ disallow date delta minute (9 ms)
      ✓ disallow date delta hour (8 ms)
      ✓ apply with parens (3 ms)
      sql friendly warnings
        ✓ = null with warning (2 ms)
        ✓ is not null with warning (2 ms)
        ✓ like with warning (9 ms)
        ✓ NOT LIKE with warning (2 ms)
        ✓ x is expr y is not null (12 ms)
        ✓ not null::number (2 ms)
        ✓ (not null)::number (1 ms)
    expr props
      ✓ aggregate order by not allowed without experiments enabled (4 ms)
      ✓ aggregate limit not allowed without experiments enabled (4 ms)
      ✓ aggregate order_by not allowed with different experiment enabled (3 ms)
      ✓ aggregate limit not allowed with different experiment enabled (2 ms)
      ✓ props not allowed on most expressions (5 ms)
      ✓ analytics can take parititon_by and order_by (2 ms)
      ✓ partition by works with scalar and aggregate (5 ms)
      ✓ partition by fails with analytic and ungrouped aggregate (3 ms)
      ✓ analytics order_by requires expression (3 ms)
      ✓ string_agg_distinct order by cannot specify expression (3 ms)
      ✓ string_agg_distinct order by can be just direction (2 ms)
      ✓ string_agg order by can be just direction (3 ms)
      ✓ can specify multiple partition_bys (19 ms)
      ✓ can specify multiple order_bys (3 ms)
      ✓ aggregate order by cannot be aggregate (2 ms)
      ✓ aggregate order by cannot be analytic (2 ms)
      ✓ analytic order by can be an aggregate (3 ms)
      ✓ analytic order by can be an output field (3 ms)
      ✓ analytic order by must be an output field (2 ms)
      ✓ can specify multiple wheres (3 ms)
      ✓ string_agg can take order_by (5 ms)
    aggregate forms
      ✓ one.column.min() (3 ms)
      ✓ one.min(one.column) (1 ms)
      ✓ min(one.column) (2 ms)
      ✓ min(many.column) (2 ms)
      ✓ min() (1 ms)
      ✓ source.min(column) (4 ms)
      ✓ many.column.max() (2 ms)
      ✓ max(many.column) (2 ms)
      ✓ max() (1 ms)
      ✓ source.max(many.column) (2 ms)
      ✓ many.column.count() (1 ms)
      ✓ count() (2 ms)
      ✓ count(many.column) (2 ms)
      ✓ source.count() (2 ms)
      ✓ many.count() (3 ms)
      ✓ sum() (1 ms)
      ✓ sum(column) (2 ms)
      ✓ sum(column * 2) (3 ms)
      ✓ column.sum() (2 ms)
      ✓ source.sum(column) (2 ms)
      ✓ sum(many.column) (2 ms)
      ✓ source.sum(many.column) (2 ms)
      ✓ many.column.sum() (2 ms)
      ✓ many.sum(many.column) (2 ms)
      ✓ sum(one.column) (4 ms)
      ✓ sum(many.constant) (2 ms)
      ✓ source.sum(many.constant) (2 ms)
      ✓ sum(nested.column) (3 ms)
      ✓ nested.column.sum() (2 ms)
      ✓ source.sum(nested.column) (2 ms)
      ✓ can aggregate field defined with no join usage (4 ms)
      ✓ sum(inline.column) (2 ms)
      ✓ inline.column.sum() (2 ms)
      ✓ source.sum(inline.column) (4 ms)
      ✓ sum(many.field) (2 ms)
      ✓ source.sum(many.field) (2 ms)
      ✓ many.field.sum() (3 ms)
      ✓ many.sum(many.field) (2 ms)
      ✓ sum(many.field + many.field) (3 ms)
      ✓ source.sum(many.field + many.field) (2 ms)
      ✓ many.field + many.field.sum() (3 ms)
      ✓ many.sum(many.field + many.field) (2 ms)
      ✓ sum(many_field) (4 ms)
      ✓ source.sum(many_field) (2 ms)
      ✓ many_field.sum() (2 ms)
      ✓ many.sum(many_field) (2 ms)
      ✓ sum(one.many_field) (3 ms)
      ✓ source.sum(one.many_field) (2 ms)
      ✓ one.many_field.sum() (3 ms)
      ✓ many.sum(one.many_field) (2 ms)
      ✓ sum(many.field + one.field) (3 ms)
      ✓ source.sum(many.field + one.field) (5 ms)
      ✓ many.sum(many.field + one.field) (3 ms)
      ✓ many_one_field.sum() (2 ms)
      ✓ sum(many_one_field) (2 ms)
      ✓ source.sum(many_one_field) (3 ms)
      ✓ many.sum(many_one_field) (3 ms)
      ✓ sum(many.one.field) (2 ms)
      ✓ sum(many.one.one.field) (3 ms)
      ✓ many.avg(field) (3 ms)
      ✓ one.avg(field) (5 ms)
      ✓ cross.avg(field) (2 ms)
      ✓ cross.avg(cross.field) (2 ms)
      ✓ one.column.sum() (2 ms)
      ✓ one.sum(one.column) (2 ms)
      ✓ source.sum(one.column) (3 ms)
      ✓ sum(one.column + one.column) (3 ms)
      ✓ one.sum(one.column + one.column) (2 ms)
      ✓ source.sum(one.column + one.column) (3 ms)
      ✓ lag(sum(output)) (5 ms)
    case statements
      ✓ full (6 ms)
      ✓ with value (2 ms)
      ✓ no else (2 ms)
      ✓ wrong then type (2 ms)
      ✓ wrong when type (1 ms)
      ✓ wrong else type (1 ms)
      ✓ null then type okay second (2 ms)
      ✓ null then type okay first (1 ms)
      ✓ null else type okay (2 ms)
      ✓ null then type before else okay (1 ms)
      ✓ non boolean when (4 ms)
      ✓ type of null then second (1 ms)
      ✓ type of null then first (2 ms)
      ✓ type of null else (1 ms)
      ✓ type of null then type before else (1 ms)
      ✓ replacement for full case (1 ms)
      ✓ replacement for case with no else
      ✓ replacement for case with value
      ✓ interaction with pick (15 ms)
    pick statements
      ✓ full (8 ms)
      ✓ applied (2 ms)
      ✓ filtering (2 ms)
      ✓ null branch with else (8 ms)
      ✓ null branch no else (1 ms)
      ✓ null branch no apply (1 ms)
      ✓ tiering (2 ms)
      ✓ transforming (1 ms)
      ✓ when single values (2 ms)
      ✓ n-ary without else (2 ms)
      ✓ n-ary with mismatch when clauses (4 ms)
      ✓ n-ary with mismatched else clause (3 ms)
      ✓ applied else mismatch (3 ms)
      ✓ applied default mismatch (1 ms)
      ✓ applied when mismatch (4 ms)
  alternations as in
    ✓ a=b|c (2 ms)
    ✓ a!=b|c (1 ms)
    ✓ a=(b|c) (1 ms)
    ✓ a?b|c (1 ms)
    ✓ a=(b)|c (2 ms)
    ✓ a=b|c|d (1 ms)
    ✓ a=(b|c)|d (3 ms)
    ✓ a=b|(c|d) (2 ms)
    ✓ a=b|c&d (1 ms)
    ✓ a=b|>d (3 ms)
    ✓ a ? (= (b | c)) (1 ms)
    ✓ legacy in (2 ms)
    ○ skipped a ? (( =1) | 2)
  sql native fields in schema
    ✓ sql native reference in result allowed (2 ms)
    ✓ sql native reference can be compared to NULL (4 ms)
    ✓ flag unsupported equality (2 ms)
    ✓ flag unsupported compare (4 ms)
    ✓ allow unsupported equality when raw types match (1 ms)
    ✓ flag not applied to unsupported (2 ms)
    ✓ allow unsupported to be cast (1 ms)
    ✓ negative numbers are not tokens (1 ms)
    sql functions
      ✓ can aggregate a sql_ function (3 ms)
      ✓ error when interpolating field that does not exist (1 ms)
      ✓ error when using sql_ function without experiment (1 ms)
    cast
      ✓ sql cast (5 ms)
      ✓ sql safe cast (6 ms)
      ✓ malloy cast (1 ms)
      ✓ malloy safe cast (1 ms)
      ✓ sql cast illegal type name (1 ms)

Test Suites: 2 passed, 2 total
Tests:       1 skipped, 226 passed, 227 total
Snapshots:   0 total
Time:        28.292 s, estimated 30 s
Ran all test suites matching /expressions/i.

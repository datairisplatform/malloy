
> malloy@0.0.1 test
> jest --runInBand nomodel

  console.log
    Error in SQL:
     WITH __stage0 AS (
      SELECT
        group_set,
        base."state" as "state__0",
        CASE WHEN group_set=0 THEN
          COALESCE(SUM(base."airport_count"),0)
          END as "c__0",
        CASE WHEN group_set=1 THEN
          base."popular_name"
          END as "popular_name__1",
        CASE WHEN group_set=1 THEN
          COALESCE(SUM(base."airport_count"),0)
          END as "d__1"
      FROM "malloytest"."state_facts" as base
      CROSS JOIN (
            SELECT 0 AS group_set
            UNION ALL SELECT 1
          )
      GROUP BY 1,2,4
    )
    , __stage1 AS (
      SELECT
        "state__0" as "state",
        (ARRAY_AGG(CASE WHEN group_set=0 AND "c__0" IS NOT NULL THEN "c__0" END))[1] as "c",
        COALESCE(TO_JSONB((ARRAY_AGG((SELECT TO_JSONB(__x) FROM (SELECT 
          "popular_name__1" as "popular_name", 
          "d__1"::DOUBLE PRECISION as "d"
          ) as __x)  ORDER BY  "d__1" desc NULLS LAST ) FILTER (WHERE group_set=1))),'[]'::JSONB) as "p"
      FROM __stage0
      GROUP BY 1
    )
    SELECT 
       base."state" as "state",
       base."c" as "c",
       COALESCE(SUM(JSONB_EXTRACT_PATH_TEXT(p_0,'d')::double precision),0) as "d"
    FROM __stage1 as base
    LEFT JOIN JSONB_ARRAY_ELEMENTS(base."p") as p_0 ON true
    GROUP BY 1,2
    ORDER BY 3 desc NULLS LAST

      at RedshiftTestConnection.runSQL (test/src/runtimes.ts:148:15)

FAIL test/src/databases/all/nomodel.spec.ts (15.782 s)
  ✕ nest/unnest -basic - redshift (3518 ms)
  ○ skipped parenthesize output field values - redshift
  ○ skipped bug 151 which used to throw unknown dialect is still fixed- redshift
  ○ skipped refine query from query - redshift
  ○ skipped source- not -found  - redshift
  ○ skipped join_many - redshift
  ○ skipped join_many condition no primary key - redshift
  ○ skipped join_many filter multiple values - redshift
  ○ skipped join_one condition no primary key - redshift
  ○ skipped join_one filter multiple values - redshift
  ○ skipped join_many cross from  - redshift
  ○ skipped join_one only  - redshift
  ○ skipped join_many cross ON  - redshift
  ○ skipped limit - provided - redshift
  ○ skipped join inner- redshift
  ○ skipped join left - redshift
  ○ skipped join right - redshift
  ○ skipped join full - redshift
  ○ skipped leafy count - redshift
  ○ skipped count at root should not use distinct key - redshift
  ○ skipped leafy nested count - redshift
  ○ skipped basic index - redshift
  ○ skipped number as null 2 - redshift
  ○ skipped sql block- redshift
  ○ skipped avg ignore null- redshift
  ○ skipped limit - not provided - redshift
  ○ skipped ungrouped top level - redshift
  ○ skipped ungrouped top level with nested  - redshift
  ○ skipped ungrouped - eliminate rows  - redshift
  ○ skipped ungrouped nested with no grouping above - redshift
  ○ skipped ungrouped - partial grouping - redshift
  ○ skipped ungrouped - all nested - redshift
  ○ skipped ungrouped nested  - redshift
  ○ skipped ungrouped nested expression  - redshift
  ○ skipped ungrouped nested group by float  - redshift
  ○ skipped run simple sql - redshift
  ○ skipped simple sql is exactly as written - redshift
  ○ skipped source from query defined as sql query - redshift
  ○ skipped source from query defined as other query - redshift
  ○ skipped all with parameters - basic  - redshift
  ○ skipped all with parameters - nest  - redshift
  ○ skipped single value to udf - redshift
  ○ skipped Multi value to udf - redshift
  ○ skipped Multi value to udf group by - redshift
  ○ skipped sql as source - redshift
  ○ skipped sql directly - redshift
  ○ skipped sql with turducken- redshift
  ○ skipped local declarations external query - redshift
  ○ skipped local declarations named query - redshift
  ○ skipped local declarations refined named query - redshift
  ○ skipped regexp match- redshift
  ○ skipped substitution precedence- redshift
  ○ skipped array unnest - redshift
  ○ skipped array unnest x 2 - redshift
  ○ skipped can unnest simply from file - redshift
  ○ skipped can unnest from file - redshift
  ○ skipped can double unnest - redshift
  ○ skipped nest null - redshift
  ○ skipped Nested pipelines sort properly - redshift
  ○ skipped number as null- redshift
  ○ skipped removes surpuflous order_by - solo aggregates - redshift
  ○ skipped removes surpuflous order_by - pipeline - redshift
  ○ skipped removes surpuflous order_by - joined_query - redshift
  ○ skipped removes surpuflous order_by - joined_query pipeline - redshift
  quoting and strings
    ○ skipped backslash quote
    ○ skipped backslash backslash
    ○ skipped source with reserve word
    ○ skipped spaces in names

  ● nest/unnest -basic - redshift

    query.run failed: Batch error: 
     sql: SET search_path TO malloytest;
    WITH __stage0 AS (
      SELECT
        group_set,
        base."state" as "state__0",
        CASE WHEN group_set=0 THEN
          COALESCE(SUM(base."airport_count"),0)
          END as "c__0",
        CASE WHEN group_set=1 THEN
          base."popular_name"
          END as "popular_name__1",
        CASE WHEN group_set=1 THEN
          COALESCE(SUM(base."airport_count"),0)
          END as "d__1"
      FROM "malloytest"."state_facts" as base
      CROSS JOIN (
            SELECT 0 AS group_set
            UNION ALL SELECT 1
          )
      GROUP BY 1,2,4
    )
    , __stage1 AS (
      SELECT
        "state__0" as "state",
        (ARRAY_AGG(CASE WHEN group_set=0 AND "c__0" IS NOT NULL THEN "c__0" END))[1] as "c",
        COALESCE(TO_JSONB((ARRAY_AGG((SELECT TO_JSONB(__x) FROM (SELECT 
          "popular_name__1" as "popular_name", 
          "d__1"::DOUBLE PRECISION as "d"
          ) as __x)  ORDER BY  "d__1" desc NULLS LAST ) FILTER (WHERE group_set=1))),'[]'::JSONB) as "p"
      FROM __stage0
      GROUP BY 1
    )
    SELECT 
       base."state" as "state",
       base."c" as "c",
       COALESCE(SUM(JSONB_EXTRACT_PATH_TEXT(p_0,'d')::double precision),0) as "d"
    FROM __stage1 as base
    LEFT JOIN JSONB_ARRAY_ELEMENTS(base."p") as p_0 ON true
    GROUP BY 1,2
    ORDER BY 3 desc NULLS LAST
     
     {
      "$metadata": {
        "httpStatusCode": 200,
        "requestId": "a995cc26-9fab-4612-8ac4-0f4c99697d36",
        "attempts": 1,
        "totalRetryDelay": 0
      },
      "CreatedAt": "2025-03-03T20:17:32.862Z",
      "Database": "dev",
      "Duration": 45196364,
      "Error": "Query #2 failed with ERROR: syntax error at or near \"ORDER\" in context \"as __x)  ORDER\", at line 28, column 18\n  Position: 806",
      "HasResultSet": false,
      "Id": "91c8d6f1-30f5-43c0-aec2-41f648c9c8af",
      "RedshiftPid": 1073848426,
      "RedshiftQueryId": 0,
      "ResultFormat": "json",
      "ResultRows": -1,
      "ResultSize": -1,
      "SecretArn": "arn:aws:secretsmanager:us-west-1:977099028464:secret:redshift-access-secret-4MyGTg",
      "Status": "FAILED",
      "SubStatements": [
        {
          "CreatedAt": "2025-03-03T20:17:32.976Z",
          "Duration": 45196364,
          "HasResultSet": false,
          "Id": "91c8d6f1-30f5-43c0-aec2-41f648c9c8af:1",
          "QueryString": "SET search_path TO malloytest;",
          "RedshiftQueryId": 0,
          "ResultRows": 0,
          "ResultSize": 0,
          "Status": "FINISHED",
          "UpdatedAt": "2025-03-03T20:17:33.415Z"
        },
        {
          "CreatedAt": "2025-03-03T20:17:32.979Z",
          "Duration": -1,
          "Error": "ERROR: syntax error at or near \"ORDER\" in context \"as __x)  ORDER\", at line 28, column 18\n  Position: 806",
          "HasResultSet": false,
          "Id": "91c8d6f1-30f5-43c0-aec2-41f648c9c8af:2",
          "QueryString": "WITH __stage0 AS (\n  SELECT\n    group_set,\n    base.\"state\" as \"state__0\",\n    CASE WHEN group_set=0 THEN\n      COALESCE(SUM(base.\"airport_count\"),0)\n      END as \"c__0\",\n    CASE WHEN group_set=1 THEN\n      base.\"popular_name\"\n      END as \"popular_name__1\",\n    CASE WHEN group_set=1 THEN\n      COALESCE(SUM(base.\"airport_count\"),0)\n      END as \"d__1\"\n  FROM \"malloytest\".\"state_facts\" as base\n  CROSS JOIN (\n        SELECT 0 AS group_set\n        UNION ALL SELECT 1\n      )\n  GROUP BY 1,2,4\n)\n, __stage1 AS (\n  SELECT\n    \"state__0\" as \"state\",\n    (ARRAY_AGG(CASE WHEN group_set=0 AND \"c__0\" IS NOT NULL THEN \"c__0\" END))[1] as \"c\",\n    COALESCE(TO_JSONB((ARRAY_AGG((SELECT TO_JSONB(__x) FROM (SELECT \n      \"popular_name__1\" as \"popular_name\", \n      \"d__1\"::DOUBLE PRECISION as \"d\"\n      ) as __x)  ORDER BY  \"d__1\" desc NULLS LAST ) FILTER (WHERE group_set=1))),'[]'::JSONB) as \"p\"\n  FROM __stage0\n  GROUP BY 1\n)\nSELECT \n   base.\"state\" as \"state\",\n   base.\"c\" as \"c\",\n   COALESCE(SUM(JSONB_EXTRACT_PATH_TEXT(p_0,'d')::double precision),0) as \"d\"\nFROM __stage1 as base\nLEFT JOIN JSONB_ARRAY_ELEMENTS(base.\"p\") as p_0 ON true\nGROUP BY 1,2\nORDER BY 3 desc NULLS LAST\n",
          "RedshiftQueryId": 0,
          "ResultRows": -1,
          "ResultSize": -1,
          "Status": "FAILED",
          "UpdatedAt": "2025-03-03T20:17:33.415Z"
        }
      ],
      "UpdatedAt": "2025-03-03T20:17:33.481Z",
      "WorkgroupName": "default-workgroup"
    }
    SQL: WITH __stage0 AS (
      SELECT
        group_set,
        base."state" as "state__0",
        CASE WHEN group_set=0 THEN
          COALESCE(SUM(base."airport_count"),0)
          END as "c__0",
        CASE WHEN group_set=1 THEN
          base."popular_name"
          END as "popular_name__1",
        CASE WHEN group_set=1 THEN
          COALESCE(SUM(base."airport_count"),0)
          END as "d__1"
      FROM "malloytest"."state_facts" as base
      CROSS JOIN (
            SELECT 0 AS group_set
            UNION ALL SELECT 1
          )
      GROUP BY 1,2,4
    )
    , __stage1 AS (
      SELECT
        "state__0" as "state",
        (ARRAY_AGG(CASE WHEN group_set=0 AND "c__0" IS NOT NULL THEN "c__0" END))[1] as "c",
        COALESCE(TO_JSONB((ARRAY_AGG((SELECT TO_JSONB(__x) FROM (SELECT 
          "popular_name__1" as "popular_name", 
          "d__1"::DOUBLE PRECISION as "d"
          ) as __x)  ORDER BY  "d__1" desc NULLS LAST ) FILTER (WHERE group_set=1))),'[]'::JSONB) as "p"
      FROM __stage0
      GROUP BY 1
    )
    SELECT 
       base."state" as "state",
       base."c" as "c",
       COALESCE(SUM(JSONB_EXTRACT_PATH_TEXT(p_0,'d')::double precision),0) as "d"
    FROM __stage1 as base
    LEFT JOIN JSONB_ARRAY_ELEMENTS(base."p") as p_0 ON true
    GROUP BY 1,2
    ORDER BY 3 desc NULLS LAST

    Error: Batch error: 
     sql: SET search_path TO malloytest;
    WITH __stage0 AS (
      SELECT
        group_set,
        base."state" as "state__0",
        CASE WHEN group_set=0 THEN
          COALESCE(SUM(base."airport_count"),0)
          END as "c__0",
        CASE WHEN group_set=1 THEN
          base."popular_name"
          END as "popular_name__1",
        CASE WHEN group_set=1 THEN
          COALESCE(SUM(base."airport_count"),0)
          END as "d__1"
      FROM "malloytest"."state_facts" as base
      CROSS JOIN (
            SELECT 0 AS group_set
            UNION ALL SELECT 1
          )
      GROUP BY 1,2,4
    )
    , __stage1 AS (
      SELECT
        "state__0" as "state",
        (ARRAY_AGG(CASE WHEN group_set=0 AND "c__0" IS NOT NULL THEN "c__0" END))[1] as "c",
        COALESCE(TO_JSONB((ARRAY_AGG((SELECT TO_JSONB(__x) FROM (SELECT 
          "popular_name__1" as "popular_name", 
          "d__1"::DOUBLE PRECISION as "d"
          ) as __x)  ORDER BY  "d__1" desc NULLS LAST ) FILTER (WHERE group_set=1))),'[]'::JSONB) as "p"
      FROM __stage0
      GROUP BY 1
    )
    SELECT 
       base."state" as "state",
       base."c" as "c",
       COALESCE(SUM(JSONB_EXTRACT_PATH_TEXT(p_0,'d')::double precision),0) as "d"
    FROM __stage1 as base
    LEFT JOIN JSONB_ARRAY_ELEMENTS(base."p") as p_0 ON true
    GROUP BY 1,2
    ORDER BY 3 desc NULLS LAST
     
     {
      "$metadata": {
        "httpStatusCode": 200,
        "requestId": "a995cc26-9fab-4612-8ac4-0f4c99697d36",
        "attempts": 1,
        "totalRetryDelay": 0
      },
      "CreatedAt": "2025-03-03T20:17:32.862Z",
      "Database": "dev",
      "Duration": 45196364,
      "Error": "Query #2 failed with ERROR: syntax error at or near \"ORDER\" in context \"as __x)  ORDER\", at line 28, column 18\n  Position: 806",
      "HasResultSet": false,
      "Id": "91c8d6f1-30f5-43c0-aec2-41f648c9c8af",
      "RedshiftPid": 1073848426,
      "RedshiftQueryId": 0,
      "ResultFormat": "json",
      "ResultRows": -1,
      "ResultSize": -1,
      "SecretArn": "arn:aws:secretsmanager:us-west-1:977099028464:secret:redshift-access-secret-4MyGTg",
      "Status": "FAILED",
      "SubStatements": [
        {
          "CreatedAt": "2025-03-03T20:17:32.976Z",
          "Duration": 45196364,
          "HasResultSet": false,
          "Id": "91c8d6f1-30f5-43c0-aec2-41f648c9c8af:1",
          "QueryString": "SET search_path TO malloytest;",
          "RedshiftQueryId": 0,
          "ResultRows": 0,
          "ResultSize": 0,
          "Status": "FINISHED",
          "UpdatedAt": "2025-03-03T20:17:33.415Z"
        },
        {
          "CreatedAt": "2025-03-03T20:17:32.979Z",
          "Duration": -1,
          "Error": "ERROR: syntax error at or near \"ORDER\" in context \"as __x)  ORDER\", at line 28, column 18\n  Position: 806",
          "HasResultSet": false,
          "Id": "91c8d6f1-30f5-43c0-aec2-41f648c9c8af:2",
          "QueryString": "WITH __stage0 AS (\n  SELECT\n    group_set,\n    base.\"state\" as \"state__0\",\n    CASE WHEN group_set=0 THEN\n      COALESCE(SUM(base.\"airport_count\"),0)\n      END as \"c__0\",\n    CASE WHEN group_set=1 THEN\n      base.\"popular_name\"\n      END as \"popular_name__1\",\n    CASE WHEN group_set=1 THEN\n      COALESCE(SUM(base.\"airport_count\"),0)\n      END as \"d__1\"\n  FROM \"malloytest\".\"state_facts\" as base\n  CROSS JOIN (\n        SELECT 0 AS group_set\n        UNION ALL SELECT 1\n      )\n  GROUP BY 1,2,4\n)\n, __stage1 AS (\n  SELECT\n    \"state__0\" as \"state\",\n    (ARRAY_AGG(CASE WHEN group_set=0 AND \"c__0\" IS NOT NULL THEN \"c__0\" END))[1] as \"c\",\n    COALESCE(TO_JSONB((ARRAY_AGG((SELECT TO_JSONB(__x) FROM (SELECT \n      \"popular_name__1\" as \"popular_name\", \n      \"d__1\"::DOUBLE PRECISION as \"d\"\n      ) as __x)  ORDER BY  \"d__1\" desc NULLS LAST ) FILTER (WHERE group_set=1))),'[]'::JSONB) as \"p\"\n  FROM __stage0\n  GROUP BY 1\n)\nSELECT \n   base.\"state\" as \"state\",\n   base.\"c\" as \"c\",\n   COALESCE(SUM(JSONB_EXTRACT_PATH_TEXT(p_0,'d')::double precision),0) as \"d\"\nFROM __stage1 as base\nLEFT JOIN JSONB_ARRAY_ELEMENTS(base.\"p\") as p_0 ON true\nGROUP BY 1,2\nORDER BY 3 desc NULLS LAST\n",
          "RedshiftQueryId": 0,
          "ResultRows": -1,
          "ResultSize": -1,
          "Status": "FAILED",
          "UpdatedAt": "2025-03-03T20:17:33.415Z"
        }
      ],
      "UpdatedAt": "2025-03-03T20:17:33.481Z",
      "WorkgroupName": "default-workgroup"
    }

      362 |       }
      363 |     } else {
    > 364 |       throw new Error(
          |             ^
      365 |         `Batch error: \n sql: ${sqlArray.join('\n')} \n ${JSON.stringify(
      366 |           statusResponse,
      367 |           null,

      at _callee10$ (packages/malloy-db-redshift/src/redshift_connection.ts:364:13)
      at tryCatch (node_modules/@babel/runtime/helpers/regeneratorRuntime.js:45:16)
      at Generator.<anonymous> (node_modules/@babel/runtime/helpers/regeneratorRuntime.js:133:17)
      at Generator.next (node_modules/@babel/runtime/helpers/regeneratorRuntime.js:74:21)
      at asyncGeneratorStep (node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:24)
      at _next (node_modules/@babel/runtime/helpers/asyncToGenerator.js:22:9)
      at Object.<anonymous> (test/src/databases/all/nomodel.spec.ts:476:10)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 67 skipped, 68 total
Snapshots:   0 total
Time:        15.854 s, estimated 17 s
Ran all test suites matching /nomodel/i.

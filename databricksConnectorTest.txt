
> malloy@0.0.1 test
> jest --runInBand functions

{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
  console.log
    Exeption when running SQL:
     WITH __stage0 AS (
      SELECT
        group_set,
        base.`state` as `state__0`,
        CASE WHEN group_set=1 THEN
          airports_0.`county`
          END as `county__1`,
        CASE WHEN group_set=1 THEN ROW_NUMBER() OVER(PARTITION BY group_set, base.`state`  ORDER BY  CASE WHEN group_set=1 THEN
          airports_0.`county`
          END asc NULLS LAST ) END as `row_num__1`
      FROM malloytest.state_facts as base
       LEFT JOIN malloytest.airports AS airports_0
        ON airports_0.`state`=base.`state`
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,1,1)) as group_set)
      GROUP BY 1,2,3
    )
    SELECT
      `state__0` as `state`,
      COALESCE(TO_JSONB((ARRAY_AGG((SELECT TO_JSONB(__x) FROM (SELECT 
        `county__1` as `county`, 
        `row_num__1`::BIGINT as `row_num`
        ) as __x)  ORDER BY  `county__1` asc NULLS LAST ) FILTER (WHERE group_set=1))),'[]'::JSONB) as `q`
    FROM __stage0
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:128:15)

  console.log
    Exception: Error: 
    [PARSE_SYNTAX_ERROR] Syntax error at or near 'ORDER'. SQLSTATE: 42601 (line 22, pos 15)
    
    == SQL ==
    WITH __stage0 AS (
      SELECT
        group_set,
        base.`state` as `state__0`,
        CASE WHEN group_set=1 THEN
          airports_0.`county`
          END as `county__1`,
        CASE WHEN group_set=1 THEN ROW_NUMBER() OVER(PARTITION BY group_set, base.`state`  ORDER BY  CASE WHEN group_set=1 THEN
          airports_0.`county`
          END asc NULLS LAST ) END as `row_num__1`
      FROM malloytest.state_facts as base
       LEFT JOIN malloytest.airports AS airports_0
        ON airports_0.`state`=base.`state`
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,1,1)) as group_set)
      GROUP BY 1,2,3
    )
    SELECT
      `state__0` as `state`,
      COALESCE(TO_JSONB((ARRAY_AGG((SELECT TO_JSONB(__x) FROM (SELECT 
        `county__1` as `county`, 
        `row_num__1`::BIGINT as `row_num`
        ) as __x)  ORDER BY  `county__1` asc NULLS LAST ) FILTER (WHERE group_set=1))),'[]'::JSONB) as `q`
    ---------------^^^
    FROM __stage0
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:130:15)

{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
  console.log
    Exeption when running SQL:
     WITH __stage0 AS (
      SELECT
        group_set,
        base.`state` as `state__0`,
        CASE WHEN group_set=0 THEN ROW_NUMBER() OVER(PARTITION BY group_set  ORDER BY  base.`state` asc NULLS LAST ) END as `row_num__0`,
        CASE WHEN group_set=1 THEN
          base.`state`
          END as `state__1`
      FROM malloytest.state_facts as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,1,1)) as group_set)
      GROUP BY 1,2,4
    )
    SELECT
      `state__0` as `state`,
      GET((ARRAY_AGG(`row_num__0`) FILTER (WHERE group_set=0 AND `row_num__0` IS NOT NULL)),0) as `row_num`,
      COALESCE(TO_JSONB((ARRAY_AGG((SELECT TO_JSONB(__x) FROM (SELECT 
        `state__1` as `state`
        ) as __x)  ORDER BY  `state__1` asc NULLS LAST ) FILTER (WHERE group_set=1))),'[]'::JSONB) as `nested`
    FROM __stage0
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:128:15)

  console.log
    Exception: Error: 
    [PARSE_SYNTAX_ERROR] Syntax error at or near 'ORDER'. SQLSTATE: 42601 (line 18, pos 15)
    
    == SQL ==
    WITH __stage0 AS (
      SELECT
        group_set,
        base.`state` as `state__0`,
        CASE WHEN group_set=0 THEN ROW_NUMBER() OVER(PARTITION BY group_set  ORDER BY  base.`state` asc NULLS LAST ) END as `row_num__0`,
        CASE WHEN group_set=1 THEN
          base.`state`
          END as `state__1`
      FROM malloytest.state_facts as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,1,1)) as group_set)
      GROUP BY 1,2,4
    )
    SELECT
      `state__0` as `state`,
      GET((ARRAY_AGG(`row_num__0`) FILTER (WHERE group_set=0 AND `row_num__0` IS NOT NULL)),0) as `row_num`,
      COALESCE(TO_JSONB((ARRAY_AGG((SELECT TO_JSONB(__x) FROM (SELECT 
        `state__1` as `state`
        ) as __x)  ORDER BY  `state__1` asc NULLS LAST ) FILTER (WHERE group_set=1))),'[]'::JSONB) as `nested`
    ---------------^^^
    FROM __stage0
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:130:15)

{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
  console.log
    Exeption when running SQL:
     SELECT 
       base.`state` as `state`,
       (CEIL(base.`births`*1.0/1000000))*1000000 as `births_ballpark`,
       RANK() OVER(  ORDER BY  (CEIL(base.`births`*1.0/1000000))*1000000 desc NULLS LAST ) as `births_ballpark_rank`
    FROM malloytest.state_facts as base
    GROUP BY 1,2
    ORDER BY 2 desc NULLS LAST
    LIMIT 20

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:128:15)

  console.log
    Exception: Error: [MISSING_AGGREGATION] The non-aggregating expression "births" is based on columns which are not participating in the GROUP BY clause.
    Add the columns or the expression to the GROUP BY, aggregate the expression, or use "any_value(births)" if you do not care which of the values within a group is returned. SQLSTATE: 42803

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:130:15)

{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
  console.log
    Exeption when running SQL:
     WITH __stage0 AS (
      SELECT
        group_set,
        base.`faa_region` as `faa_region__0`,
        CASE WHEN group_set=0 THEN
          COUNT(1)
          END as `airport_count__0`,
        CASE WHEN group_set=0 THEN ROW_NUMBER() OVER(PARTITION BY group_set  ORDER BY  CASE WHEN group_set=0 THEN
          COUNT(1)
          END desc NULLS LAST ) END as `id__0`,
        CASE WHEN group_set IN (1,2) THEN
          base.`fac_type`
          END as `fac_type__1`,
        CASE WHEN group_set=1 THEN
          COUNT(1)
          END as `airport_count__1`,
        CASE WHEN group_set=1 THEN ROW_NUMBER() OVER(PARTITION BY group_set, base.`faa_region`  ORDER BY  CASE WHEN group_set=1 THEN
          COUNT(1)
          END desc NULLS LAST ) END as `id2__1`,
        CASE WHEN group_set=2 THEN
          AVG(base.`elevation`)
          END as `avg_elevation__2`
      FROM malloytest.airports as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,2,1)) as group_set)
      GROUP BY 1,2,5
    )
    , __stage1 AS (
      SELECT 
        CASE WHEN group_set=2 THEN 1 ELSE group_set END as group_set,
        `faa_region__0` as `faa_region__0`,
        ANY(`airport_count__0`) as `airport_count__0`,
        ANY(`id__0`) as `id__0`,
        CASE WHEN group_set IN (1,2) THEN
          `fac_type__1`
          END as `fac_type__1`,
        ANY(`airport_count__1`) as `airport_count__1`,
        ANY(`id2__1`) as `id2__1`,
        TO_JSONB((ARRAY_AGG((SELECT __x FROM (SELECT 
          `avg_elevation__2`::BIGINT as `avg_elevation`) as __x)) FILTER (WHERE group_set=2))[1]) as `elevation__1`
      FROM __stage0
      GROUP BY 1,2,5
    )
    , __stage2 AS (
      SELECT
        `faa_region__0` as `faa_region`,
        GET((ARRAY_AGG(`airport_count__0`) FILTER (WHERE group_set=0 AND `airport_count__0` IS NOT NULL)),0) as `airport_count`,
        GET((ARRAY_AGG(`id__0`) FILTER (WHERE group_set=0 AND `id__0` IS NOT NULL)),0) as `id`,
        COALESCE(TO_JSONB((ARRAY_AGG((SELECT TO_JSONB(__x) FROM (SELECT 
          `fac_type__1` as `fac_type`, 
          `airport_count__1`::BIGINT as `airport_count`, 
          `id2__1`::BIGINT as `id2`, 
          `elevation__1` as `elevation`
          ) as __x)  ORDER BY  `airport_count__1` desc NULLS LAST ) FILTER (WHERE group_set=1))[1:2]),'[]'::JSONB) as `by_fac_type`
      FROM __stage1
      GROUP BY 1
    )
    SELECT 
       JSONB_EXTRACT_PATH_TEXT(by_fac_type_0,'id2')::double as `id2`
    FROM __stage2 as base
    LEFT JOIN JSONB_ARRAY_ELEMENTS(base.`by_fac_type`) as by_fac_type_0 ON true
    GROUP BY 1
    ORDER BY 1 desc NULLS LAST

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:128:15)

  console.log
    Exception: Error: 
    [PARSE_SYNTAX_ERROR] Syntax error at or near 'ORDER'. SQLSTATE: 42601 (line 53, pos 17)
    
    == SQL ==
    WITH __stage0 AS (
      SELECT
        group_set,
        base.`faa_region` as `faa_region__0`,
        CASE WHEN group_set=0 THEN
          COUNT(1)
          END as `airport_count__0`,
        CASE WHEN group_set=0 THEN ROW_NUMBER() OVER(PARTITION BY group_set  ORDER BY  CASE WHEN group_set=0 THEN
          COUNT(1)
          END desc NULLS LAST ) END as `id__0`,
        CASE WHEN group_set IN (1,2) THEN
          base.`fac_type`
          END as `fac_type__1`,
        CASE WHEN group_set=1 THEN
          COUNT(1)
          END as `airport_count__1`,
        CASE WHEN group_set=1 THEN ROW_NUMBER() OVER(PARTITION BY group_set, base.`faa_region`  ORDER BY  CASE WHEN group_set=1 THEN
          COUNT(1)
          END desc NULLS LAST ) END as `id2__1`,
        CASE WHEN group_set=2 THEN
          AVG(base.`elevation`)
          END as `avg_elevation__2`
      FROM malloytest.airports as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,2,1)) as group_set)
      GROUP BY 1,2,5
    )
    , __stage1 AS (
      SELECT 
        CASE WHEN group_set=2 THEN 1 ELSE group_set END as group_set,
        `faa_region__0` as `faa_region__0`,
        ANY(`airport_count__0`) as `airport_count__0`,
        ANY(`id__0`) as `id__0`,
        CASE WHEN group_set IN (1,2) THEN
          `fac_type__1`
          END as `fac_type__1`,
        ANY(`airport_count__1`) as `airport_count__1`,
        ANY(`id2__1`) as `id2__1`,
        TO_JSONB((ARRAY_AGG((SELECT __x FROM (SELECT 
          `avg_elevation__2`::BIGINT as `avg_elevation`) as __x)) FILTER (WHERE group_set=2))[1]) as `elevation__1`
      FROM __stage0
      GROUP BY 1,2,5
    )
    , __stage2 AS (
      SELECT
        `faa_region__0` as `faa_region`,
        GET((ARRAY_AGG(`airport_count__0`) FILTER (WHERE group_set=0 AND `airport_count__0` IS NOT NULL)),0) as `airport_count`,
        GET((ARRAY_AGG(`id__0`) FILTER (WHERE group_set=0 AND `id__0` IS NOT NULL)),0) as `id`,
        COALESCE(TO_JSONB((ARRAY_AGG((SELECT TO_JSONB(__x) FROM (SELECT 
          `fac_type__1` as `fac_type`, 
          `airport_count__1`::BIGINT as `airport_count`, 
          `id2__1`::BIGINT as `id2`, 
          `elevation__1` as `elevation`
          ) as __x)  ORDER BY  `airport_count__1` desc NULLS LAST ) FILTER (WHERE group_set=1))[1:2]),'[]'::JSONB) as `by_fac_type`
    -----------------^^^
      FROM __stage1
      GROUP BY 1
    )
    SELECT 
       JSONB_EXTRACT_PATH_TEXT(by_fac_type_0,'id2')::double as `id2`
    FROM __stage2 as base
    LEFT JOIN JSONB_ARRAY_ELEMENTS(base.`by_fac_type`) as by_fac_type_0 ON true
    GROUP BY 1
    ORDER BY 1 desc NULLS LAST

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:130:15)

{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
  console.log
    Exeption when running SQL:
     SELECT 
       LOWER(base.`state`) as `lower_state`,
       LAG((LOWER(base.`state`))) OVER(  ORDER BY  LOWER(base.`state`) asc NULLS LAST ) as `prev_state`
    FROM malloytest.state_facts as base
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:128:15)

  console.log
    Exception: Error: [MISSING_AGGREGATION] The non-aggregating expression "state" is based on columns which are not participating in the GROUP BY clause.
    Add the columns or the expression to the GROUP BY, aggregate the expression, or use "any_value(state)" if you do not care which of the values within a group is returned. SQLSTATE: 42803

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:130:15)

{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
  console.log
    Exeption when running SQL:
     SELECT 
       LOWER(base.`state`) as `lower_state`,
       COUNT(1) as `c`,
       LAG((COUNT(1))) OVER(  ORDER BY  LOWER(base.`state`) ASC NULLS LAST ) as `prev_count`
    FROM malloytest.state_facts as base
    GROUP BY 1
    ORDER BY 1 ASC NULLS LAST

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:128:15)

  console.log
    Exception: Error: [MISSING_AGGREGATION] The non-aggregating expression "state" is based on columns which are not participating in the GROUP BY clause.
    Add the columns or the expression to the GROUP BY, aggregate the expression, or use "any_value(state)" if you do not care which of the values within a group is returned. SQLSTATE: 42803

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:130:15)

{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
  console.log
    Exeption when running SQL:
     WITH __stage0 AS (
      SELECT
        group_set,
        base.`state` as `state__0`,
        CASE WHEN group_set=1 THEN
          base.`county`
          END as `county__1`,
        CASE WHEN group_set=1 THEN
          COUNT(1)
          END as `aircraft_count__1`,
        CASE WHEN group_set=1 THEN FIRST_VALUE(CASE WHEN group_set=1 THEN
          COUNT(1)
          END) OVER(PARTITION BY group_set, base.`state`  ORDER BY  CASE WHEN group_set=1 THEN
          COUNT(1)
          END desc NULLS LAST ) END as `first_count__1`
      FROM malloytest.aircraft as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,1,1)) as group_set)
      WHERE base.`state` IS NOT NULL
      GROUP BY 1,2,3
    )
    SELECT
      `state__0` as `state`,
      COALESCE(TO_JSONB((ARRAY_AGG((SELECT TO_JSONB(__x) FROM (SELECT 
        `county__1` as `county`, 
        `aircraft_count__1`::BIGINT as `aircraft_count`, 
        `first_count__1`::BIGINT as `first_count`
        ) as __x)  ORDER BY  `aircraft_count__1` desc NULLS LAST ) FILTER (WHERE group_set=1))[1:2]),'[]'::JSONB) as `by_county`
    FROM __stage0
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:128:15)

  console.log
    Exception: Error: 
    [PARSE_SYNTAX_ERROR] Syntax error at or near 'ORDER'. SQLSTATE: 42601 (line 27, pos 15)
    
    == SQL ==
    WITH __stage0 AS (
      SELECT
        group_set,
        base.`state` as `state__0`,
        CASE WHEN group_set=1 THEN
          base.`county`
          END as `county__1`,
        CASE WHEN group_set=1 THEN
          COUNT(1)
          END as `aircraft_count__1`,
        CASE WHEN group_set=1 THEN FIRST_VALUE(CASE WHEN group_set=1 THEN
          COUNT(1)
          END) OVER(PARTITION BY group_set, base.`state`  ORDER BY  CASE WHEN group_set=1 THEN
          COUNT(1)
          END desc NULLS LAST ) END as `first_count__1`
      FROM malloytest.aircraft as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,1,1)) as group_set)
      WHERE base.`state` IS NOT NULL
      GROUP BY 1,2,3
    )
    SELECT
      `state__0` as `state`,
      COALESCE(TO_JSONB((ARRAY_AGG((SELECT TO_JSONB(__x) FROM (SELECT 
        `county__1` as `county`, 
        `aircraft_count__1`::BIGINT as `aircraft_count`, 
        `first_count__1`::BIGINT as `first_count`
        ) as __x)  ORDER BY  `aircraft_count__1` desc NULLS LAST ) FILTER (WHERE group_set=1))[1:2]),'[]'::JSONB) as `by_county`
    ---------------^^^
    FROM __stage0
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:130:15)

{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
  console.log
    Exeption when running SQL:
     SELECT 
       TRUNC(1.9::NUMERIC) as `f0`,
       TRUNC(-1.9::NUMERIC) as `f1`,
       TRUNC((12.29::NUMERIC), 1) as `f2`,
       TRUNC((19.2::NUMERIC), -1) as `f3`,
       TRUNC(NULL::NUMERIC) as `f4`,
       TRUNC((1::NUMERIC), NULL) as `f5`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3,4,5,6
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:128:15)

  console.log
    Exception: Error: [WRONG_NUM_ARGS.WITHOUT_SUGGESTION] The `trunc` requires 2 parameters but the actual number is 1. Please, refer to 'https://spark.apache.org/docs/latest/sql-ref-functions.html' for a fix. SQLSTATE: 42605; line 2 pos 3

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:130:15)

{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
  console.log
    Exeption when running SQL:
     SELECT 
       COALESCE(CAST('+inf' AS double) = DOUBLE 'Infinity' OR CAST('+inf' AS double) = DOUBLE '-Infinity', false) as `f0`,
       COALESCE(100 = DOUBLE 'Infinity' OR 100 = DOUBLE '-Infinity', false) as `f1`,
       COALESCE(NULL = DOUBLE 'Infinity' OR NULL = DOUBLE '-Infinity', false) as `f2`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:128:15)

  console.log
    Exception: Error: 
    [UNSUPPORTED_TYPED_LITERAL] Literals of the type "DOUBLE" are not supported. Supported types are "DATE", "TIMESTAMP_NTZ", "TIMESTAMP_LTZ", "TIMESTAMP", "INTERVAL", "X". SQLSTATE: 0A000
    == SQL (line 2, position 38) ==
    ...ALESCE(CAST('+inf' AS double) = DOUBLE 'Infinity' OR CAST('+inf' AS double) = DOU...
                                       ^^^^^^^^^^^^^^^^^

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:130:15)

{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
  console.log
    Exeption when running SQL:
     SELECT 
       COALESCE(CAST('NaN' AS double) = NUMERIC 'NaN', false) as `f0`,
       COALESCE(100 = NUMERIC 'NaN', false) as `f1`,
       COALESCE(NULL = NUMERIC 'NaN', false) as `f2`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:128:15)

  console.log
    Exception: Error: 
    [UNSUPPORTED_TYPED_LITERAL] Literals of the type "NUMERIC" are not supported. Supported types are "DATE", "TIMESTAMP_NTZ", "TIMESTAMP_LTZ", "TIMESTAMP", "INTERVAL", "X". SQLSTATE: 0A000
    == SQL (line 2, position 37) ==
    ...OALESCE(CAST('NaN' AS double) = NUMERIC 'NaN', false) as `f0`,
                                       ^^^^^^^^^^^^^

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:130:15)

{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
  console.log
    Exeption when running SQL:
     SELECT 
       CASE WHEN NUM_NULLS(1,10,-100) > 0 THEN NULL ELSE GREATEST(1,10,-100) END as `f0`,
       ((CASE WHEN NUM_NULLS(DATE(timestamp'2003-01-01'),DATE(timestamp'2004-01-01'),DATE(timestamp'1994-01-01')) > 0 THEN NULL ELSE GREATEST(DATE(timestamp'2003-01-01'),DATE(timestamp'2004-01-01'),DATE(timestamp'1994-01-01')) END)>=DATE(timestamp'2004-01-01')) and ((CASE WHEN NUM_NULLS(DATE(timestamp'2003-01-01'),DATE(timestamp'2004-01-01'),DATE(timestamp'1994-01-01')) > 0 THEN NULL ELSE GREATEST(DATE(timestamp'2003-01-01'),DATE(timestamp'2004-01-01'),DATE(timestamp'1994-01-01')) END)<DATE(timestamp'2005-01-01')) as `f1`,
       (CASE WHEN NUM_NULLS(timestamp'2023-05-26 11:58:00',timestamp'2023-05-26 11:59:00') > 0 THEN NULL ELSE GREATEST(timestamp'2023-05-26 11:58:00',timestamp'2023-05-26 11:59:00') END)=timestamp'2023-05-26 11:59:00' as `f2`,
       CASE WHEN NUM_NULLS('a','b') > 0 THEN NULL ELSE GREATEST('a','b') END as `f3`,
       CASE WHEN NUM_NULLS(1,NULL,0) > 0 THEN NULL ELSE GREATEST(1,NULL,0) END as `f4`,
       CASE WHEN NUM_NULLS(NULL,NULL) > 0 THEN NULL ELSE GREATEST(NULL,NULL) END as `f5`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3,4,5,6
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:128:15)

  console.log
    Exception: Error: [UNRESOLVED_ROUTINE] Cannot resolve routine `NUM_NULLS` on search path [`system`.`builtin`, `system`.`session`, `workspace`.`default`]. SQLSTATE: 42883; line 2 pos 13

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:130:15)

{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
  console.log
    Exeption when running SQL:
     SELECT 
       CASE WHEN NUM_NULLS(1,10,-100) > 0 THEN NULL ELSE LEAST(1,10,-100) END as `f0`,
       ((CASE WHEN NUM_NULLS(DATE(timestamp'2003-01-01'),DATE(timestamp'2004-01-01'),DATE(timestamp'1994-01-01')) > 0 THEN NULL ELSE LEAST(DATE(timestamp'2003-01-01'),DATE(timestamp'2004-01-01'),DATE(timestamp'1994-01-01')) END)>=DATE(timestamp'1994-01-01')) and ((CASE WHEN NUM_NULLS(DATE(timestamp'2003-01-01'),DATE(timestamp'2004-01-01'),DATE(timestamp'1994-01-01')) > 0 THEN NULL ELSE LEAST(DATE(timestamp'2003-01-01'),DATE(timestamp'2004-01-01'),DATE(timestamp'1994-01-01')) END)<DATE(timestamp'1995-01-01')) as `f1`,
       (CASE WHEN NUM_NULLS(timestamp'2023-05-26 11:58:00',timestamp'2023-05-26 11:59:00') > 0 THEN NULL ELSE LEAST(timestamp'2023-05-26 11:58:00',timestamp'2023-05-26 11:59:00') END)=timestamp'2023-05-26 11:58:00' as `f2`,
       CASE WHEN NUM_NULLS('a','b') > 0 THEN NULL ELSE LEAST('a','b') END as `f3`,
       CASE WHEN NUM_NULLS(1,NULL,0) > 0 THEN NULL ELSE LEAST(1,NULL,0) END as `f4`,
       CASE WHEN NUM_NULLS(NULL,NULL) > 0 THEN NULL ELSE LEAST(NULL,NULL) END as `f5`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3,4,5,6
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:128:15)

  console.log
    Exception: Error: [UNRESOLVED_ROUTINE] Cannot resolve routine `NUM_NULLS` on search path [`system`.`builtin`, `system`.`session`, `workspace`.`default`]. SQLSTATE: 42883; line 2 pos 13

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:130:15)

{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
  console.log
    Exeption when running SQL:
     SELECT 
       STRPOS('123456789','3') as `f0`,
       STRPOS('123456789','0') as `f1`,
       STRPOS(NULL,'0') as `f2`,
       STRPOS('123456789',NULL) as `f3`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3,4
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:128:15)

  console.log
    Exception: Error: [UNRESOLVED_ROUTINE] Cannot resolve routine `STRPOS` on search path [`system`.`builtin`, `system`.`session`, `workspace`.`default`]. SQLSTATE: 42883; line 2 pos 3

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:130:15)

{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
  console.log
    Exeption when running SQL:
     SELECT 
       COALESCE(STARTS_WITH('hello world', 'hello'), false) as `f0`,
       COALESCE(STARTS_WITH('hello world', 'world'), false) as `f1`,
       COALESCE(STARTS_WITH(NULL, 'world'), false) as `f2`,
       COALESCE(STARTS_WITH('hello world', NULL), false) as `f3`
    FROM malloytest.state_facts as base
    GROUP BY 1,2,3,4
    ORDER BY 1 asc NULLS LAST

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:128:15)

  console.log
    Exception: Error: [UNRESOLVED_ROUTINE] Cannot resolve routine `STARTS_WITH` on search path [`system`.`builtin`, `system`.`session`, `workspace`.`default`]. SQLSTATE: 42883; line 2 pos 12

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:130:15)

{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
  console.log
    Exeption when running SQL:
     SELECT 
       COUNT(DISTINCT state_facts2_0.`__distinct_key`) as `c`,
       (
          SELECT ARRAY_JOIN(ARRAY_SORT(COLLECT_LIST((a::json->>'f2'))), ', ') as value
          FROM (
            SELECT UNNEST(array_agg(distinct row_to_json(row(base.`__distinct_key`,base.`state`,base.`popular_name`,base.`state`))::text)) a
          ) a
        ) as `s`
    FROM (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) as base
     LEFT JOIN (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) AS state_facts2_0
      ON state_facts2_0.`state`=base.`state`

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:128:15)

  console.log
    Exception: Error: 
    [PARSE_SYNTAX_ERROR] Syntax error at or near '->'. SQLSTATE: 42601 (line 4, pos 56)
    
    == SQL ==
    SELECT 
       COUNT(DISTINCT state_facts2_0.`__distinct_key`) as `c`,
       (
          SELECT ARRAY_JOIN(ARRAY_SORT(COLLECT_LIST((a::json->>'f2'))), ', ') as value
    --------------------------------------------------------^^^
          FROM (
            SELECT UNNEST(array_agg(distinct row_to_json(row(base.`__distinct_key`,base.`state`,base.`popular_name`,base.`state`))::text)) a
          ) a
        ) as `s`
    FROM (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) as base
     LEFT JOIN (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) AS state_facts2_0
      ON state_facts2_0.`state`=base.`state`

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:130:15)

{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
  console.log
    Exeption when running SQL:
     SELECT 
       COUNT(DISTINCT state_facts2_0.`__distinct_key`) as `c`,
       (
          SELECT ARRAY_JOIN(ARRAY_SORT(COLLECT_LIST((a::json->>'f2'))), ', ') as value
          FROM (
            SELECT UNNEST(array_agg(distinct row_to_json(row(base.`__distinct_key`,'o'))::text)) a
          ) a
        ) as `s`
    FROM (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) as base
     LEFT JOIN (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) AS state_facts2_0
      ON state_facts2_0.`state`=base.`state`

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:128:15)

  console.log
    Exception: Error: 
    [PARSE_SYNTAX_ERROR] Syntax error at or near '->'. SQLSTATE: 42601 (line 4, pos 56)
    
    == SQL ==
    SELECT 
       COUNT(DISTINCT state_facts2_0.`__distinct_key`) as `c`,
       (
          SELECT ARRAY_JOIN(ARRAY_SORT(COLLECT_LIST((a::json->>'f2'))), ', ') as value
    --------------------------------------------------------^^^
          FROM (
            SELECT UNNEST(array_agg(distinct row_to_json(row(base.`__distinct_key`,'o'))::text)) a
          ) a
        ) as `s`
    FROM (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) as base
     LEFT JOIN (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) AS state_facts2_0
      ON state_facts2_0.`state`=base.`state`

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:130:15)

{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
  console.log
    Exeption when running SQL:
     SELECT 
       COUNT(DISTINCT state_facts2_0.`__distinct_key`) as `c`,
       (
          SELECT ARRAY_JOIN(ARRAY_SORT(COLLECT_LIST((a::json->>'f2'))), '') as value
          FROM (
            SELECT UNNEST(array_agg(distinct row_to_json(row(base.`__distinct_key`,'o',''))::text)) a
          ) a
        ) as `s`
    FROM (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) as base
     LEFT JOIN (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) AS state_facts2_0
      ON state_facts2_0.`state`=base.`state`

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:128:15)

  console.log
    Exception: Error: 
    [PARSE_SYNTAX_ERROR] Syntax error at or near '->'. SQLSTATE: 42601 (line 4, pos 56)
    
    == SQL ==
    SELECT 
       COUNT(DISTINCT state_facts2_0.`__distinct_key`) as `c`,
       (
          SELECT ARRAY_JOIN(ARRAY_SORT(COLLECT_LIST((a::json->>'f2'))), '') as value
    --------------------------------------------------------^^^
          FROM (
            SELECT UNNEST(array_agg(distinct row_to_json(row(base.`__distinct_key`,'o',''))::text)) a
          ) a
        ) as `s`
    FROM (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) as base
     LEFT JOIN (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) AS state_facts2_0
      ON state_facts2_0.`state`=base.`state`

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:130:15)

{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
  console.log
    Exeption when running SQL:
     SELECT 
       EXTRACT(year FROM base.`dep_time`) as `yr`,
       EXTRACT(quarter FROM base.`dep_time`) as `qtr`,
       COUNT(1) as `qtr_flights`,
       LAG((COUNT(1))) OVER(PARTITION BY (EXTRACT(quarter FROM base.`dep_time`)) ORDER BY (EXTRACT(year FROM base.`dep_time`)) ASC ) as `last_yr_qtr_flights`
    FROM malloytest.flights as base
    WHERE base.`dep_time`<timestamp'2002-01-01 00:00:00'
    GROUP BY 1,2
    ORDER BY 1 ASC NULLS LAST,2 ASC NULLS LAST

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:128:15)

  console.log
    Exception: Error: [MISSING_AGGREGATION] The non-aggregating expression "dep_time" is based on columns which are not participating in the GROUP BY clause.
    Add the columns or the expression to the GROUP BY, aggregate the expression, or use "any_value(dep_time)" if you do not care which of the values within a group is returned. SQLSTATE: 42803

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:130:15)

{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
  console.log
    Exeption when running SQL:
     SELECT 
       COUNT(1) as `c`,
       SUBSTR(base.`state`, CASE WHEN 1 < 0 THEN LENGTH(base.`state`) + 1 + 1 ELSE 1 END, 1) as `l`,
       LAG((SUBSTR(base.`state`, CASE WHEN 1 < 0 THEN LENGTH(base.`state`) + 1 + 1 ELSE 1 END, 1))) OVER(PARTITION BY (COUNT(1))  ORDER BY  SUBSTR(base.`state`, CASE WHEN 1 < 0 THEN LENGTH(base.`state`) + 1 + 1 ELSE 1 END, 1) ASC NULLS LAST ) as `prev`
    FROM malloytest.state_facts as base
    GROUP BY 2
    ORDER BY 2 ASC NULLS LAST
    LIMIT 5

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:128:15)

  console.log
    Exception: Error: [MISSING_AGGREGATION] The non-aggregating expression "state" is based on columns which are not participating in the GROUP BY clause.
    Add the columns or the expression to the GROUP BY, aggregate the expression, or use "any_value(state)" if you do not care which of the values within a group is returned. SQLSTATE: 42803

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:130:15)

{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
FAIL test/src/databases/all/functions.spec.ts (91.123 s)
  concat
    ✕ works - databricks (6445 ms)
  round
    ✓ works - databricks (828 ms)
  floor
    ✓ works - databricks (1630 ms)
  ceil
    ✓ works - databricks (881 ms)
  length
    ✓ works - databricks (756 ms)
  lower
    ✓ works - databricks (819 ms)
  upper
    ✓ works - databricks (820 ms)
  regexp_extract
    ✓ works - databricks (825 ms)
  replace
    ✓ works - databricks (850 ms)
  substr
    ✓ works - databricks (772 ms)
  raw function call
    ✓ works - databricks (1139 ms)
  row_number
    ✓ works when the order by is a dimension  - databricks (815 ms)
    ✓ works when the order by is a dimension in the other order  - databricks (733 ms)
    ✓ works when the order by is a measure - databricks (864 ms)
    ✓ works when the order by is a measure but there is no group by - databricks (946 ms)
    ✕ works inside nest - databricks (452 ms)
    ✕ works outside nest, but with a nest nearby - databricks (428 ms)
  rank
    ✕ works ordered by dimension - databricks (560 ms)
    ✓ works ordered by aggregate - databricks (797 ms)
    ✓ works using unary minus in calculate block - databricks (865 ms)
    ✕ properly isolated nested calculations - databricks (492 ms)
  lag
    ✓ works with one param - databricks (747 ms)
    ✕ works with expression field - databricks (479 ms)
    ✓ works with expression - databricks (770 ms)
    ✕ works with field, ordering by expression field - databricks (463 ms)
    ✓ works with offset - databricks (762 ms)
    ✓ works with default value - databricks (784 ms)
    ✓ works with now as the default value - databricks (747 ms)
  output field in calculate
    ✓ output field referenceable in calculate - databricks (900 ms)
  first_value
    ✕ works in nest - databricks (439 ms)
    ✓ works outside nest - databricks (859 ms)
    ✓ works with an aggregate which is not in the query - databricks (1253 ms)
    ✓ works with a localized aggregate - databricks (1080 ms)
  trunc
    ✕ works - databricks (559 ms)
  log
    ✓ works - databricks (771 ms)
  ln
    ✓ works - databricks (793 ms)
  exp
    ✓ works - databricks (789 ms)
  cos
    ✓ works - databricks (732 ms)
  acos
    ✓ works - databricks (700 ms)
  sin
    ✓ works - databricks (580 ms)
  asin
    ✓ works - databricks (596 ms)
  tan
    ✓ works - databricks (673 ms)
  atan
    ✓ works - databricks (655 ms)
  atan2
    ✓ works - databricks (738 ms)
  sqrt
    ✓ works - databricks (852 ms)
  pow
    ✓ works - databricks (886 ms)
  abs
    ✓ works - databricks (723 ms)
  sign
    ✓ works - databricks (738 ms)
  is_inf
    ✕ works - databricks (439 ms)
  is_nan
    ✕ works - databricks (424 ms)
  greatest
    ✕ works - databricks (510 ms)
  least
    ✕ works - databricks (494 ms)
  div
    ✓ works - databricks (788 ms)
  strpos
    ✕ works - databricks (601 ms)
  starts_with
    ✕ works - databricks (463 ms)
  ends_with
    ✓ works - databricks (724 ms)
  trim
    ✕ trim works - databricks (754 ms)
  ltrim
    ✕ ltrim works - databricks (710 ms)
  rtrim
    ✕ rtrim works - databricks (859 ms)
  rand
    ✓ is usually not the same value - databricks (835 ms)
  pi
    ✓ is pi - databricks (768 ms)
  byte_length
    ✓ works - databricks (750 ms)
  ifnull
    ✓ works - databricks (765 ms)
  coalesce
    ✓ works - databricks (873 ms)
  nullif
    ✓ works - databricks (769 ms)
  chr
    ✓ works - databricks (722 ms)
  ascii
    ✓ works - databricks (830 ms)
  unicode
    ✓ works - databricks (716 ms)
  string_repeat
    ✓ works - databricks (756 ms)
    ○ skipped works floor decimal - databricks
  reverse
    ✓ works - databricks (844 ms)
  lead
    ✓ works with one param - databricks (711 ms)
    ✓ works with offset - databricks (727 ms)
    ✓ works with default value - databricks (932 ms)
  count_approx
    ○ skipped works generally
    ○ skipped works with fanout
  last_value
    ✓ works - databricks (799 ms)
  avg_moving
    ✓ works - databricks (799 ms)
    ✓ works forward - databricks (844 ms)
  sum_moving
    ✓ works - databricks (770 ms)
    ✓ works forward - databricks (792 ms)
  min, max, sum / window, cumulative
    ✓ works - databricks (830 ms)
  hll_functions
    ○ skipped hyperloglog basic - databricks
    ○ skipped hyperloglog combine - databricks
    ○ skipped hyperloglog import/export - databricks
  dialect functions
    duckdb
      ○ skipped to_timestamp
      ○ skipped list_extract
      ○ skipped date_part,to_seconds
    trino
      ○ skipped from_unixtime
  databricks
    string_agg
      ✓ works no order by - databricks (633 ms)
      ✓ works with dotted shortcut - databricks (667 ms)
      ✓ works with order by field - databricks (965 ms)
      ✓ works with order by direction - databricks (20 ms)
      ✕ works with multiple order_bys - databricks (662 ms)
      ✕ works with order by expression - databricks (610 ms)
      ✕ works with order by join expression - databricks (654 ms)
      ✓ works with order asc - databricks (715 ms)
      ✕ works with order desc - databricks (650 ms)
      ✕ works with fanout and order_by - databricks (428 ms)
      ✕ works with fanout - databricks (386 ms)
      ✕ works with fanout and separator - databricks (361 ms)
      ✓ works with limit - databricks (37 ms)
    string_agg_distinct
      ✕ actually distincts - databricks (690 ms)
      ✓ works no order by - databricks (940 ms)
      ✓ works with dotted shortcut - databricks (612 ms)
      ✓ works with order by direction - databricks (586 ms)
      ✓ works with order asc - databricks (603 ms)
      ✕ works with order desc - databricks (857 ms)
      ✓ works with limit - databricks (24 ms)
    partition_by
      ✕ works - databricks (664 ms)
      ✕ works with aggregate - databricks (467 ms)
      ✓ works with multiple order_bys - databricks (780 ms)
      ✓ can be used in a select (646 ms)

  ● concat › works - databricks

    expect(received).toBe(expected) // Object.is equality

    Expected: "foo2003-01-01 00:00:00"
    Received: "foo2003-01-01 12:00:00"

      119 |       // console.log(databaseName, result.sql);
      120 |       // console.log(result.data);
    > 121 |       expect(result.data.path(0, `f${i}`).value).toBe(testCase[1]);
          |                                                  ^
      122 |     });
      123 |   };
      124 |

      at test/src/databases/all/functions.spec.ts:121:50
          at Array.forEach (<anonymous>)
      at funcTestMultiple (test/src/databases/all/functions.spec.ts:118:15)
      at async Object.<anonymous> (test/src/databases/all/functions.spec.ts:137:7)

  ● row_number › works inside nest - databricks


    [PARSE_SYNTAX_ERROR] Syntax error at or near 'ORDER'. SQLSTATE: 42601 (line 22, pos 15)

    == SQL ==
    WITH __stage0 AS (
      SELECT
        group_set,
        base.`state` as `state__0`,
        CASE WHEN group_set=1 THEN
          airports_0.`county`
          END as `county__1`,
        CASE WHEN group_set=1 THEN ROW_NUMBER() OVER(PARTITION BY group_set, base.`state`  ORDER BY  CASE WHEN group_set=1 THEN
          airports_0.`county`
          END asc NULLS LAST ) END as `row_num__1`
      FROM malloytest.state_facts as base
       LEFT JOIN malloytest.airports AS airports_0
        ON airports_0.`state`=base.`state`
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,1,1)) as group_set)
      GROUP BY 1,2,3
    )
    SELECT
      `state__0` as `state`,
      COALESCE(TO_JSONB((ARRAY_AGG((SELECT TO_JSONB(__x) FROM (SELECT 
        `county__1` as `county`, 
        `row_num__1`::BIGINT as `row_num`
        ) as __x)  ORDER BY  `county__1` asc NULLS LAST ) FILTER (WHERE group_set=1))),'[]'::JSONB) as `q`
    ---------------^^^
    FROM __stage0
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)

  ● row_number › works outside nest, but with a nest nearby - databricks


    [PARSE_SYNTAX_ERROR] Syntax error at or near 'ORDER'. SQLSTATE: 42601 (line 18, pos 15)

    == SQL ==
    WITH __stage0 AS (
      SELECT
        group_set,
        base.`state` as `state__0`,
        CASE WHEN group_set=0 THEN ROW_NUMBER() OVER(PARTITION BY group_set  ORDER BY  base.`state` asc NULLS LAST ) END as `row_num__0`,
        CASE WHEN group_set=1 THEN
          base.`state`
          END as `state__1`
      FROM malloytest.state_facts as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,1,1)) as group_set)
      GROUP BY 1,2,4
    )
    SELECT
      `state__0` as `state`,
      GET((ARRAY_AGG(`row_num__0`) FILTER (WHERE group_set=0 AND `row_num__0` IS NOT NULL)),0) as `row_num`,
      COALESCE(TO_JSONB((ARRAY_AGG((SELECT TO_JSONB(__x) FROM (SELECT 
        `state__1` as `state`
        ) as __x)  ORDER BY  `state__1` asc NULLS LAST ) FILTER (WHERE group_set=1))),'[]'::JSONB) as `nested`
    ---------------^^^
    FROM __stage0
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)

  ● rank › works ordered by dimension - databricks

    [MISSING_AGGREGATION] The non-aggregating expression "births" is based on columns which are not participating in the GROUP BY clause.
    Add the columns or the expression to the GROUP BY, aggregate the expression, or use "any_value(births)" if you do not care which of the values within a group is returned. SQLSTATE: 42803

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)

  ● rank › properly isolated nested calculations - databricks

    query.run failed: 
    [PARSE_SYNTAX_ERROR] Syntax error at or near 'ORDER'. SQLSTATE: 42601 (line 53, pos 17)

    == SQL ==
    WITH __stage0 AS (
      SELECT
        group_set,
        base.`faa_region` as `faa_region__0`,
        CASE WHEN group_set=0 THEN
          COUNT(1)
          END as `airport_count__0`,
        CASE WHEN group_set=0 THEN ROW_NUMBER() OVER(PARTITION BY group_set  ORDER BY  CASE WHEN group_set=0 THEN
          COUNT(1)
          END desc NULLS LAST ) END as `id__0`,
        CASE WHEN group_set IN (1,2) THEN
          base.`fac_type`
          END as `fac_type__1`,
        CASE WHEN group_set=1 THEN
          COUNT(1)
          END as `airport_count__1`,
        CASE WHEN group_set=1 THEN ROW_NUMBER() OVER(PARTITION BY group_set, base.`faa_region`  ORDER BY  CASE WHEN group_set=1 THEN
          COUNT(1)
          END desc NULLS LAST ) END as `id2__1`,
        CASE WHEN group_set=2 THEN
          AVG(base.`elevation`)
          END as `avg_elevation__2`
      FROM malloytest.airports as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,2,1)) as group_set)
      GROUP BY 1,2,5
    )
    , __stage1 AS (
      SELECT 
        CASE WHEN group_set=2 THEN 1 ELSE group_set END as group_set,
        `faa_region__0` as `faa_region__0`,
        ANY(`airport_count__0`) as `airport_count__0`,
        ANY(`id__0`) as `id__0`,
        CASE WHEN group_set IN (1,2) THEN
          `fac_type__1`
          END as `fac_type__1`,
        ANY(`airport_count__1`) as `airport_count__1`,
        ANY(`id2__1`) as `id2__1`,
        TO_JSONB((ARRAY_AGG((SELECT __x FROM (SELECT 
          `avg_elevation__2`::BIGINT as `avg_elevation`) as __x)) FILTER (WHERE group_set=2))[1]) as `elevation__1`
      FROM __stage0
      GROUP BY 1,2,5
    )
    , __stage2 AS (
      SELECT
        `faa_region__0` as `faa_region`,
        GET((ARRAY_AGG(`airport_count__0`) FILTER (WHERE group_set=0 AND `airport_count__0` IS NOT NULL)),0) as `airport_count`,
        GET((ARRAY_AGG(`id__0`) FILTER (WHERE group_set=0 AND `id__0` IS NOT NULL)),0) as `id`,
        COALESCE(TO_JSONB((ARRAY_AGG((SELECT TO_JSONB(__x) FROM (SELECT 
          `fac_type__1` as `fac_type`, 
          `airport_count__1`::BIGINT as `airport_count`, 
          `id2__1`::BIGINT as `id2`, 
          `elevation__1` as `elevation`
          ) as __x)  ORDER BY  `airport_count__1` desc NULLS LAST ) FILTER (WHERE group_set=1))[1:2]),'[]'::JSONB) as `by_fac_type`
    -----------------^^^
      FROM __stage1
      GROUP BY 1
    )
    SELECT 
       JSONB_EXTRACT_PATH_TEXT(by_fac_type_0,'id2')::double as `id2`
    FROM __stage2 as base
    LEFT JOIN JSONB_ARRAY_ELEMENTS(base.`by_fac_type`) as by_fac_type_0 ON true
    GROUP BY 1
    ORDER BY 1 desc NULLS LAST

    SQL: WITH __stage0 AS (
      SELECT
        group_set,
        base.`faa_region` as `faa_region__0`,
        CASE WHEN group_set=0 THEN
          COUNT(1)
          END as `airport_count__0`,
        CASE WHEN group_set=0 THEN ROW_NUMBER() OVER(PARTITION BY group_set  ORDER BY  CASE WHEN group_set=0 THEN
          COUNT(1)
          END desc NULLS LAST ) END as `id__0`,
        CASE WHEN group_set IN (1,2) THEN
          base.`fac_type`
          END as `fac_type__1`,
        CASE WHEN group_set=1 THEN
          COUNT(1)
          END as `airport_count__1`,
        CASE WHEN group_set=1 THEN ROW_NUMBER() OVER(PARTITION BY group_set, base.`faa_region`  ORDER BY  CASE WHEN group_set=1 THEN
          COUNT(1)
          END desc NULLS LAST ) END as `id2__1`,
        CASE WHEN group_set=2 THEN
          AVG(base.`elevation`)
          END as `avg_elevation__2`
      FROM malloytest.airports as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,2,1)) as group_set)
      GROUP BY 1,2,5
    )
    , __stage1 AS (
      SELECT 
        CASE WHEN group_set=2 THEN 1 ELSE group_set END as group_set,
        `faa_region__0` as `faa_region__0`,
        ANY(`airport_count__0`) as `airport_count__0`,
        ANY(`id__0`) as `id__0`,
        CASE WHEN group_set IN (1,2) THEN
          `fac_type__1`
          END as `fac_type__1`,
        ANY(`airport_count__1`) as `airport_count__1`,
        ANY(`id2__1`) as `id2__1`,
        TO_JSONB((ARRAY_AGG((SELECT __x FROM (SELECT 
          `avg_elevation__2`::BIGINT as `avg_elevation`) as __x)) FILTER (WHERE group_set=2))[1]) as `elevation__1`
      FROM __stage0
      GROUP BY 1,2,5
    )
    , __stage2 AS (
      SELECT
        `faa_region__0` as `faa_region`,
        GET((ARRAY_AGG(`airport_count__0`) FILTER (WHERE group_set=0 AND `airport_count__0` IS NOT NULL)),0) as `airport_count`,
        GET((ARRAY_AGG(`id__0`) FILTER (WHERE group_set=0 AND `id__0` IS NOT NULL)),0) as `id`,
        COALESCE(TO_JSONB((ARRAY_AGG((SELECT TO_JSONB(__x) FROM (SELECT 
          `fac_type__1` as `fac_type`, 
          `airport_count__1`::BIGINT as `airport_count`, 
          `id2__1`::BIGINT as `id2`, 
          `elevation__1` as `elevation`
          ) as __x)  ORDER BY  `airport_count__1` desc NULLS LAST ) FILTER (WHERE group_set=1))[1:2]),'[]'::JSONB) as `by_fac_type`
      FROM __stage1
      GROUP BY 1
    )
    SELECT 
       JSONB_EXTRACT_PATH_TEXT(by_fac_type_0,'id2')::double as `id2`
    FROM __stage2 as base
    LEFT JOIN JSONB_ARRAY_ELEMENTS(base.`by_fac_type`) as by_fac_type_0 ON true
    GROUP BY 1
    ORDER BY 1 desc NULLS LAST

    [PARSE_SYNTAX_ERROR] Syntax error at or near 'ORDER'. SQLSTATE: 42601 (line 53, pos 17)

    == SQL ==
    WITH __stage0 AS (
      SELECT
        group_set,
        base.`faa_region` as `faa_region__0`,
        CASE WHEN group_set=0 THEN
          COUNT(1)
          END as `airport_count__0`,
        CASE WHEN group_set=0 THEN ROW_NUMBER() OVER(PARTITION BY group_set  ORDER BY  CASE WHEN group_set=0 THEN
          COUNT(1)
          END desc NULLS LAST ) END as `id__0`,
        CASE WHEN group_set IN (1,2) THEN
          base.`fac_type`
          END as `fac_type__1`,
        CASE WHEN group_set=1 THEN
          COUNT(1)
          END as `airport_count__1`,
        CASE WHEN group_set=1 THEN ROW_NUMBER() OVER(PARTITION BY group_set, base.`faa_region`  ORDER BY  CASE WHEN group_set=1 THEN
          COUNT(1)
          END desc NULLS LAST ) END as `id2__1`,
        CASE WHEN group_set=2 THEN
          AVG(base.`elevation`)
          END as `avg_elevation__2`
      FROM malloytest.airports as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,2,1)) as group_set)
      GROUP BY 1,2,5
    )
    , __stage1 AS (
      SELECT 
        CASE WHEN group_set=2 THEN 1 ELSE group_set END as group_set,
        `faa_region__0` as `faa_region__0`,
        ANY(`airport_count__0`) as `airport_count__0`,
        ANY(`id__0`) as `id__0`,
        CASE WHEN group_set IN (1,2) THEN
          `fac_type__1`
          END as `fac_type__1`,
        ANY(`airport_count__1`) as `airport_count__1`,
        ANY(`id2__1`) as `id2__1`,
        TO_JSONB((ARRAY_AGG((SELECT __x FROM (SELECT 
          `avg_elevation__2`::BIGINT as `avg_elevation`) as __x)) FILTER (WHERE group_set=2))[1]) as `elevation__1`
      FROM __stage0
      GROUP BY 1,2,5
    )
    , __stage2 AS (
      SELECT
        `faa_region__0` as `faa_region`,
        GET((ARRAY_AGG(`airport_count__0`) FILTER (WHERE group_set=0 AND `airport_count__0` IS NOT NULL)),0) as `airport_count`,
        GET((ARRAY_AGG(`id__0`) FILTER (WHERE group_set=0 AND `id__0` IS NOT NULL)),0) as `id`,
        COALESCE(TO_JSONB((ARRAY_AGG((SELECT TO_JSONB(__x) FROM (SELECT 
          `fac_type__1` as `fac_type`, 
          `airport_count__1`::BIGINT as `airport_count`, 
          `id2__1`::BIGINT as `id2`, 
          `elevation__1` as `elevation`
          ) as __x)  ORDER BY  `airport_count__1` desc NULLS LAST ) FILTER (WHERE group_set=1))[1:2]),'[]'::JSONB) as `by_fac_type`
    -----------------^^^
      FROM __stage1
      GROUP BY 1
    )
    SELECT 
       JSONB_EXTRACT_PATH_TEXT(by_fac_type_0,'id2')::double as `id2`
    FROM __stage2 as base
    LEFT JOIN JSONB_ARRAY_ELEMENTS(base.`by_fac_type`) as by_fac_type_0 ON true
    GROUP BY 1
    ORDER BY 1 desc NULLS LAST

      502 |             order_by: id2 desc
      503 |           }
    > 504 |       `).malloyResultMatches(expressionModel, {
          |          ^
      505 |         id2: 2,
      506 |       });
      507 |     });

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)
      at Object.<anonymous> (test/src/databases/all/functions.spec.ts:504:10)

  ● lag › works with expression field - databricks

    [MISSING_AGGREGATION] The non-aggregating expression "state" is based on columns which are not participating in the GROUP BY clause.
    Add the columns or the expression to the GROUP BY, aggregate the expression, or use "any_value(state)" if you do not care which of the values within a group is returned. SQLSTATE: 42803

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)

  ● lag › works with field, ordering by expression field - databricks

    [MISSING_AGGREGATION] The non-aggregating expression "state" is based on columns which are not participating in the GROUP BY clause.
    Add the columns or the expression to the GROUP BY, aggregate the expression, or use "any_value(state)" if you do not care which of the values within a group is returned. SQLSTATE: 42803

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)

  ● first_value › works in nest - databricks


    [PARSE_SYNTAX_ERROR] Syntax error at or near 'ORDER'. SQLSTATE: 42601 (line 27, pos 15)

    == SQL ==
    WITH __stage0 AS (
      SELECT
        group_set,
        base.`state` as `state__0`,
        CASE WHEN group_set=1 THEN
          base.`county`
          END as `county__1`,
        CASE WHEN group_set=1 THEN
          COUNT(1)
          END as `aircraft_count__1`,
        CASE WHEN group_set=1 THEN FIRST_VALUE(CASE WHEN group_set=1 THEN
          COUNT(1)
          END) OVER(PARTITION BY group_set, base.`state`  ORDER BY  CASE WHEN group_set=1 THEN
          COUNT(1)
          END desc NULLS LAST ) END as `first_count__1`
      FROM malloytest.aircraft as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,1,1)) as group_set)
      WHERE base.`state` IS NOT NULL
      GROUP BY 1,2,3
    )
    SELECT
      `state__0` as `state`,
      COALESCE(TO_JSONB((ARRAY_AGG((SELECT TO_JSONB(__x) FROM (SELECT 
        `county__1` as `county`, 
        `aircraft_count__1`::BIGINT as `aircraft_count`, 
        `first_count__1`::BIGINT as `first_count`
        ) as __x)  ORDER BY  `aircraft_count__1` desc NULLS LAST ) FILTER (WHERE group_set=1))[1:2]),'[]'::JSONB) as `by_county`
    ---------------^^^
    FROM __stage0
    GROUP BY 1
    ORDER BY 1 asc NULLS LAST

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)

  ● trunc › works - databricks

    [WRONG_NUM_ARGS.WITHOUT_SUGGESTION] The `trunc` requires 2 parameters but the actual number is 1. Please, refer to 'https://spark.apache.org/docs/latest/sql-ref-functions.html' for a fix. SQLSTATE: 42605; line 2 pos 3

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)

  ● is_inf › works - databricks


    [UNSUPPORTED_TYPED_LITERAL] Literals of the type "DOUBLE" are not supported. Supported types are "DATE", "TIMESTAMP_NTZ", "TIMESTAMP_LTZ", "TIMESTAMP", "INTERVAL", "X". SQLSTATE: 0A000
    == SQL (line 2, position 38) ==
    ...ALESCE(CAST('+inf' AS double) = DOUBLE 'Infinity' OR CAST('+inf' AS double) = DOU...
                                       ^^^^^^^^^^^^^^^^^

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)

  ● is_nan › works - databricks


    [UNSUPPORTED_TYPED_LITERAL] Literals of the type "NUMERIC" are not supported. Supported types are "DATE", "TIMESTAMP_NTZ", "TIMESTAMP_LTZ", "TIMESTAMP", "INTERVAL", "X". SQLSTATE: 0A000
    == SQL (line 2, position 37) ==
    ...OALESCE(CAST('NaN' AS double) = NUMERIC 'NaN', false) as `f0`,
                                       ^^^^^^^^^^^^^

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)

  ● greatest › works - databricks

    [UNRESOLVED_ROUTINE] Cannot resolve routine `NUM_NULLS` on search path [`system`.`builtin`, `system`.`session`, `workspace`.`default`]. SQLSTATE: 42883; line 2 pos 13

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)

  ● least › works - databricks

    [UNRESOLVED_ROUTINE] Cannot resolve routine `NUM_NULLS` on search path [`system`.`builtin`, `system`.`session`, `workspace`.`default`]. SQLSTATE: 42883; line 2 pos 13

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)

  ● strpos › works - databricks

    [UNRESOLVED_ROUTINE] Cannot resolve routine `STRPOS` on search path [`system`.`builtin`, `system`.`session`, `workspace`.`default`]. SQLSTATE: 42883; line 2 pos 3

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)

  ● starts_with › works - databricks

    [UNRESOLVED_ROUTINE] Cannot resolve routine `STARTS_WITH` on search path [`system`.`builtin`, `system`.`session`, `workspace`.`default`]. SQLSTATE: 42883; line 2 pos 12

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)

  ● trim › trim works - databricks

    expect(received).toBe(expected) // Object.is equality

    Expected: "keep_this"
    Received: ""

      119 |       // console.log(databaseName, result.sql);
      120 |       // console.log(result.data);
    > 121 |       expect(result.data.path(0, `f${i}`).value).toBe(testCase[1]);
          |                                                  ^
      122 |     });
      123 |   };
      124 |

      at test/src/databases/all/functions.spec.ts:121:50
          at Array.forEach (<anonymous>)
      at funcTestMultiple (test/src/databases/all/functions.spec.ts:118:15)
      at async Object.<anonymous> (test/src/databases/all/functions.spec.ts:947:7)

  ● ltrim › ltrim works - databricks

    expect(received).toBe(expected) // Object.is equality

    Expected: "keep_this -> __"
    Received: ""

      119 |       // console.log(databaseName, result.sql);
      120 |       // console.log(result.data);
    > 121 |       expect(result.data.path(0, `f${i}`).value).toBe(testCase[1]);
          |                                                  ^
      122 |     });
      123 |   };
      124 |

      at test/src/databases/all/functions.spec.ts:121:50
          at Array.forEach (<anonymous>)
      at funcTestMultiple (test/src/databases/all/functions.spec.ts:118:15)
      at async Object.<anonymous> (test/src/databases/all/functions.spec.ts:959:7)

  ● rtrim › rtrim works - databricks

    expect(received).toBe(expected) // Object.is equality

    Expected: "__ <- keep_this"
    Received: ""

      119 |       // console.log(databaseName, result.sql);
      120 |       // console.log(result.data);
    > 121 |       expect(result.data.path(0, `f${i}`).value).toBe(testCase[1]);
          |                                                  ^
      122 |     });
      123 |   };
      124 |

      at test/src/databases/all/functions.spec.ts:121:50
          at Array.forEach (<anonymous>)
      at funcTestMultiple (test/src/databases/all/functions.spec.ts:118:15)
      at async Object.<anonymous> (test/src/databases/all/functions.spec.ts:971:7)

  ● databricks › string_agg › works with multiple order_bys - databricks

    SQL Generated:
      SELECT 
         ARRAY_JOIN(ARRAY_SORT(COLLECT_LIST(base.`name`)), ',') as `f`
      FROM malloytest.aircraft as base
      WHERE base.`name` RLIKE '.*RUTHERFORD.*'
      
    Expected {f: "RUTHERFORD PAT R JR,RUTHERFORD JAMES C"} Got: "RUTHERFORD JAMES C,RUTHERFORD PAT R JR"

      1425 |           order_by: city, name
      1426 |         }
    > 1427 |       }`).malloyResultMatches(expressionModel, {
           |           ^
      1428 |         f: 'RUTHERFORD PAT R JR,RUTHERFORD JAMES C',
      1429 |       });
      1430 |     });

      at Object.<anonymous> (test/src/databases/all/functions.spec.ts:1427:11)

  ● databricks › string_agg › works with order by expression - databricks

    SQL Generated:
      WITH __stage0 AS (
        SELECT 
           base.`name` as `name`
        FROM malloytest.aircraft as base
        WHERE base.`name` RLIKE '.*FLY.*'
        GROUP BY 1
        ORDER BY 1 desc NULLS LAST
        LIMIT 3
      )
      SELECT 
         ARRAY_JOIN(ARRAY_SORT(COLLECT_LIST(base.`name`)), ',') as `f`
      FROM __stage0 as base
      
    Expected {f: "YANKEE FLYING CLUB INC,WESTCHESTER FLYING CLUB,WILSON FLYING SERVICE INC"} Got: "WESTCHESTER FLYING CLUB,WILSON FLYING SERVICE INC,YANKEE FLYING CLUB INC"

      1441 |           order_by: length(name)
      1442 |         }
    > 1443 |       }`).malloyResultMatches(expressionModel, {
           |           ^
      1444 |         f: 'YANKEE FLYING CLUB INC,WESTCHESTER FLYING CLUB,WILSON FLYING SERVICE INC',
      1445 |       });
      1446 |     });

      at Object.<anonymous> (test/src/databases/all/functions.spec.ts:1443:11)

  ● databricks › string_agg › works with order by join expression - databricks

    SQL Generated:
      SELECT 
         ARRAY_JOIN(ARRAY_SORT(COLLECT_LIST(base.`name`)), ',') as `f`
      FROM malloytest.aircraft as base
       LEFT JOIN malloytest.aircraft_models AS aircraft_models_0
        ON aircraft_models_0.`aircraft_model_code`=base.`aircraft_model_code`
      WHERE base.`name` RLIKE '.*ADVENTURE.*'
      
    Expected {f: "ADVENTURE INC,SEA PLANE ADVENTURE INC,A BALLOON ADVENTURES ALOFT,A AERONAUTICAL ADVENTURE INC"} Got: "A AERONAUTICAL ADVENTURE INC,A BALLOON ADVENTURES ALOFT,ADVENTURE INC,SEA PLANE ADVENTURE INC"

      1451 |         where: name ~ r'.*ADVENTURE.*'
      1452 |         aggregate: f is string_agg(name, ',') { order_by: aircraft_models.model }
    > 1453 |       }`).malloyResultMatches(expressionModel, {
           |           ^
      1454 |         f: 'ADVENTURE INC,SEA PLANE ADVENTURE INC,A BALLOON ADVENTURES ALOFT,A AERONAUTICAL ADVENTURE INC',
      1455 |       });
      1456 |     });

      at Object.<anonymous> (test/src/databases/all/functions.spec.ts:1453:11)

  ● databricks › string_agg › works with order desc - databricks

    SQL Generated:
      WITH __stage0 AS (
        SELECT 
           base.`name` as `name`
        FROM malloytest.aircraft as base
        WHERE base.`name` RLIKE '.*FLY.*'
        GROUP BY 1
        ORDER BY 1 desc NULLS LAST
        LIMIT 3
      )
      SELECT 
         ARRAY_JOIN(ARRAY_SORT(COLLECT_LIST(base.`name`)), ',') as `f`
      FROM __stage0 as base
      
    Expected {f: "YANKEE FLYING CLUB INC,WILSON FLYING SERVICE INC,WESTCHESTER FLYING CLUB"} Got: "WESTCHESTER FLYING CLUB,WILSON FLYING SERVICE INC,YANKEE FLYING CLUB INC"

      1479 |       } -> {
      1480 |         aggregate: f is string_agg(name, ',') { order_by: name desc }
    > 1481 |       }`).malloyResultMatches(expressionModel, {
           |           ^
      1482 |         f: 'YANKEE FLYING CLUB INC,WILSON FLYING SERVICE INC,WESTCHESTER FLYING CLUB',
      1483 |       });
      1484 |     });

      at Object.<anonymous> (test/src/databases/all/functions.spec.ts:1481:11)

  ● databricks › string_agg › works with fanout and order_by - databricks

    query.run failed: 
    [PARSE_SYNTAX_ERROR] Syntax error at or near '->'. SQLSTATE: 42601 (line 4, pos 56)

    == SQL ==
    SELECT 
       COUNT(DISTINCT state_facts2_0.`__distinct_key`) as `c`,
       (
          SELECT ARRAY_JOIN(ARRAY_SORT(COLLECT_LIST((a::json->>'f2'))), ', ') as value
    --------------------------------------------------------^^^
          FROM (
            SELECT UNNEST(array_agg(distinct row_to_json(row(base.`__distinct_key`,base.`state`,base.`popular_name`,base.`state`))::text)) a
          ) a
        ) as `s`
    FROM (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) as base
     LEFT JOIN (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) AS state_facts2_0
      ON state_facts2_0.`state`=base.`state`

    SQL: SELECT 
       COUNT(DISTINCT state_facts2_0.`__distinct_key`) as `c`,
       (
          SELECT ARRAY_JOIN(ARRAY_SORT(COLLECT_LIST((a::json->>'f2'))), ', ') as value
          FROM (
            SELECT UNNEST(array_agg(distinct row_to_json(row(base.`__distinct_key`,base.`state`,base.`popular_name`,base.`state`))::text)) a
          ) a
        ) as `s`
    FROM (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) as base
     LEFT JOIN (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) AS state_facts2_0
      ON state_facts2_0.`state`=base.`state`

    [PARSE_SYNTAX_ERROR] Syntax error at or near '->'. SQLSTATE: 42601 (line 4, pos 56)

    == SQL ==
    SELECT 
       COUNT(DISTINCT state_facts2_0.`__distinct_key`) as `c`,
       (
          SELECT ARRAY_JOIN(ARRAY_SORT(COLLECT_LIST((a::json->>'f2'))), ', ') as value
    --------------------------------------------------------^^^
          FROM (
            SELECT UNNEST(array_agg(distinct row_to_json(row(base.`__distinct_key`,base.`state`,base.`popular_name`,base.`state`))::text)) a
          ) a
        ) as `s`
    FROM (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) as base
     LEFT JOIN (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) AS state_facts2_0
      ON state_facts2_0.`state`=base.`state`

      1501 |           order_by: popular_name, state
      1502 |         }
    > 1503 |       }`).malloyResultMatches(expressionModel, {
           |           ^
      1504 |         s: 'IA,LA,MN,AL,AR,IN,ME,MT,NC,AZ,CA,CO,CT,FL,GA,HI,IL,KS,KY,MA,MO,NJ,NM,NV,NY,OH,OK,PA,RI,TN,TX,WV,WY,DC,MS,SC,ID,NE,UT,VA,AK,DE,MD,MI,ND,NH,OR,SD,VT,WA,WI',
      1505 |         c: 51,
      1506 |       });

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)
      at Object.<anonymous> (test/src/databases/all/functions.spec.ts:1503:11)

  ● databricks › string_agg › works with fanout - databricks

    query.run failed: 
    [PARSE_SYNTAX_ERROR] Syntax error at or near '->'. SQLSTATE: 42601 (line 4, pos 56)

    == SQL ==
    SELECT 
       COUNT(DISTINCT state_facts2_0.`__distinct_key`) as `c`,
       (
          SELECT ARRAY_JOIN(ARRAY_SORT(COLLECT_LIST((a::json->>'f2'))), ', ') as value
    --------------------------------------------------------^^^
          FROM (
            SELECT UNNEST(array_agg(distinct row_to_json(row(base.`__distinct_key`,'o'))::text)) a
          ) a
        ) as `s`
    FROM (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) as base
     LEFT JOIN (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) AS state_facts2_0
      ON state_facts2_0.`state`=base.`state`

    SQL: SELECT 
       COUNT(DISTINCT state_facts2_0.`__distinct_key`) as `c`,
       (
          SELECT ARRAY_JOIN(ARRAY_SORT(COLLECT_LIST((a::json->>'f2'))), ', ') as value
          FROM (
            SELECT UNNEST(array_agg(distinct row_to_json(row(base.`__distinct_key`,'o'))::text)) a
          ) a
        ) as `s`
    FROM (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) as base
     LEFT JOIN (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) AS state_facts2_0
      ON state_facts2_0.`state`=base.`state`

    [PARSE_SYNTAX_ERROR] Syntax error at or near '->'. SQLSTATE: 42601 (line 4, pos 56)

    == SQL ==
    SELECT 
       COUNT(DISTINCT state_facts2_0.`__distinct_key`) as `c`,
       (
          SELECT ARRAY_JOIN(ARRAY_SORT(COLLECT_LIST((a::json->>'f2'))), ', ') as value
    --------------------------------------------------------^^^
          FROM (
            SELECT UNNEST(array_agg(distinct row_to_json(row(base.`__distinct_key`,'o'))::text)) a
          ) a
        ) as `s`
    FROM (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) as base
     LEFT JOIN (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) AS state_facts2_0
      ON state_facts2_0.`state`=base.`state`

      1517 |         aggregate: c is state_facts2.count()
      1518 |         aggregate: s is string_agg('o')
    > 1519 |       }`).malloyResultMatches(expressionModel, {
           |           ^
      1520 |         s: 'o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o,o',
      1521 |         c: 51,
      1522 |       });

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)
      at Object.<anonymous> (test/src/databases/all/functions.spec.ts:1519:11)

  ● databricks › string_agg › works with fanout and separator - databricks

    query.run failed: 
    [PARSE_SYNTAX_ERROR] Syntax error at or near '->'. SQLSTATE: 42601 (line 4, pos 56)

    == SQL ==
    SELECT 
       COUNT(DISTINCT state_facts2_0.`__distinct_key`) as `c`,
       (
          SELECT ARRAY_JOIN(ARRAY_SORT(COLLECT_LIST((a::json->>'f2'))), '') as value
    --------------------------------------------------------^^^
          FROM (
            SELECT UNNEST(array_agg(distinct row_to_json(row(base.`__distinct_key`,'o',''))::text)) a
          ) a
        ) as `s`
    FROM (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) as base
     LEFT JOIN (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) AS state_facts2_0
      ON state_facts2_0.`state`=base.`state`

    SQL: SELECT 
       COUNT(DISTINCT state_facts2_0.`__distinct_key`) as `c`,
       (
          SELECT ARRAY_JOIN(ARRAY_SORT(COLLECT_LIST((a::json->>'f2'))), '') as value
          FROM (
            SELECT UNNEST(array_agg(distinct row_to_json(row(base.`__distinct_key`,'o',''))::text)) a
          ) a
        ) as `s`
    FROM (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) as base
     LEFT JOIN (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) AS state_facts2_0
      ON state_facts2_0.`state`=base.`state`

    [PARSE_SYNTAX_ERROR] Syntax error at or near '->'. SQLSTATE: 42601 (line 4, pos 56)

    == SQL ==
    SELECT 
       COUNT(DISTINCT state_facts2_0.`__distinct_key`) as `c`,
       (
          SELECT ARRAY_JOIN(ARRAY_SORT(COLLECT_LIST((a::json->>'f2'))), '') as value
    --------------------------------------------------------^^^
          FROM (
            SELECT UNNEST(array_agg(distinct row_to_json(row(base.`__distinct_key`,'o',''))::text)) a
          ) a
        ) as `s`
    FROM (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) as base
     LEFT JOIN (SELECT uuid() as `__distinct_key`, x.*  FROM malloytest.state_facts as x) AS state_facts2_0
      ON state_facts2_0.`state`=base.`state`

      1533 |         aggregate: c is state_facts2.count()
      1534 |         aggregate: s is string_agg('o', '')
    > 1535 |       }`).malloyResultMatches(expressionModel, {
           |           ^
      1536 |         s: 'ooooooooooooooooooooooooooooooooooooooooooooooooooo',
      1537 |         c: 51,
      1538 |       });

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)
      at Object.<anonymous> (test/src/databases/all/functions.spec.ts:1535:11)

  ● databricks › string_agg_distinct › actually distincts - databricks

    SQL Generated:
      SELECT 
         ARRAY_JOIN(ARRAY_SORT(COLLECT_SET(aircraft_0.`name`)), ', ') as `f_dist`,
         ARRAY_JOIN(ARRAY_SORT(COLLECT_LIST(aircraft_0.`name`)), ', ') as `f_all`
      FROM malloytest.aircraft_models as base
       LEFT JOIN malloytest.aircraft AS aircraft_0
        ON base.`aircraft_model_code`=aircraft_0.`aircraft_model_code`
      WHERE aircraft_0.`name` IN ('RAYTHEON AIRCRAFT COMPANY','FOWLER IRA R DBA')
      
    Expected {f_dist: "FOWLER IRA R DBA,RAYTHEON AIRCRAFT COMPANY"} Got: "FOWLER IRA R DBA, RAYTHEON AIRCRAFT COMPANY"
    Expected {f_all: "FOWLER IRA R DBA,FOWLER IRA R DBA,RAYTHEON AIRCRAFT COMPANY,RAYTHEON AIRCRAFT COMPANY"} Got: "FOWLER IRA R DBA, FOWLER IRA R DBA, RAYTHEON AIRCRAFT COMPANY, RAYTHEON AIRCRAFT COMPANY"

      1580 |           aggregate: f_dist is aircraft.name.string_agg_distinct() { order_by: asc }
      1581 |           aggregate: f_all is aircraft.name.string_agg() { order_by: aircraft.name }
    > 1582 |       }`).malloyResultMatches(runtime, {
           |           ^
      1583 |         f_dist: 'FOWLER IRA R DBA,RAYTHEON AIRCRAFT COMPANY',
      1584 |         f_all:
      1585 |           'FOWLER IRA R DBA,FOWLER IRA R DBA,RAYTHEON AIRCRAFT COMPANY,RAYTHEON AIRCRAFT COMPANY',

      at Object.<anonymous> (test/src/databases/all/functions.spec.ts:1582:11)

  ● databricks › string_agg_distinct › works with order desc - databricks

    SQL Generated:
      WITH __stage0 AS (
        SELECT 
           base.`name` as `name`
        FROM malloytest.aircraft as base
        WHERE base.`name` RLIKE '.*FLY.*'
        GROUP BY 1
        ORDER BY 1 desc NULLS LAST
        LIMIT 3
      )
      SELECT 
         ARRAY_JOIN(ARRAY_SORT(COLLECT_SET(base.`name`)), ',') as `f`
      FROM __stage0 as base
      
    Expected {f: "YANKEE FLYING CLUB INC,WILSON FLYING SERVICE INC,WESTCHESTER FLYING CLUB"} Got: "WESTCHESTER FLYING CLUB,WILSON FLYING SERVICE INC,YANKEE FLYING CLUB INC"

      1640 |       } -> {
      1641 |         aggregate: f is string_agg_distinct(name, ',') { order_by: desc }
    > 1642 |       }`).malloyResultMatches(expressionModel, {
           |           ^
      1643 |         f: 'YANKEE FLYING CLUB INC,WILSON FLYING SERVICE INC,WESTCHESTER FLYING CLUB',
      1644 |       });
      1645 |     });

      at Object.<anonymous> (test/src/databases/all/functions.spec.ts:1642:11)

  ● databricks › partition_by › works - databricks

    query.run failed: [MISSING_AGGREGATION] The non-aggregating expression "dep_time" is based on columns which are not participating in the GROUP BY clause.
    Add the columns or the expression to the GROUP BY, aggregate the expression, or use "any_value(dep_time)" if you do not care which of the values within a group is returned. SQLSTATE: 42803
    SQL: SELECT 
       EXTRACT(year FROM base.`dep_time`) as `yr`,
       EXTRACT(quarter FROM base.`dep_time`) as `qtr`,
       COUNT(1) as `qtr_flights`,
       LAG((COUNT(1))) OVER(PARTITION BY (EXTRACT(quarter FROM base.`dep_time`)) ORDER BY (EXTRACT(year FROM base.`dep_time`)) ASC ) as `last_yr_qtr_flights`
    FROM malloytest.flights as base
    WHERE base.`dep_time`<timestamp'2002-01-01 00:00:00'
    GROUP BY 1,2
    ORDER BY 1 ASC NULLS LAST,2 ASC NULLS LAST

    Error: [MISSING_AGGREGATION] The non-aggregating expression "dep_time" is based on columns which are not participating in the GROUP BY clause.
    Add the columns or the expression to the GROUP BY, aggregate the expression, or use "any_value(dep_time)" if you do not care which of the values within a group is returned. SQLSTATE: 42803

      1688 |         order_by: yr, qtr
      1689 |         where: dep_time < @2002
    > 1690 |       }`).malloyResultMatches(expressionModel, [
           |           ^
      1691 |         {yr: 2000, qtr: 1, qtr_flights: 12148, last_yr_qtr_flights: null},
      1692 |         {yr: 2000, qtr: 2, qtr_flights: 11599, last_yr_qtr_flights: null},
      1693 |         {yr: 2000, qtr: 3, qtr_flights: 12075, last_yr_qtr_flights: null},

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)
      at Object.<anonymous> (test/src/databases/all/functions.spec.ts:1690:11)

  ● databricks › partition_by › works with aggregate - databricks

    query.run failed: [MISSING_AGGREGATION] The non-aggregating expression "state" is based on columns which are not participating in the GROUP BY clause.
    Add the columns or the expression to the GROUP BY, aggregate the expression, or use "any_value(state)" if you do not care which of the values within a group is returned. SQLSTATE: 42803
    SQL: SELECT 
       COUNT(1) as `c`,
       SUBSTR(base.`state`, CASE WHEN 1 < 0 THEN LENGTH(base.`state`) + 1 + 1 ELSE 1 END, 1) as `l`,
       LAG((SUBSTR(base.`state`, CASE WHEN 1 < 0 THEN LENGTH(base.`state`) + 1 + 1 ELSE 1 END, 1))) OVER(PARTITION BY (COUNT(1))  ORDER BY  SUBSTR(base.`state`, CASE WHEN 1 < 0 THEN LENGTH(base.`state`) + 1 + 1 ELSE 1 END, 1) ASC NULLS LAST ) as `prev`
    FROM malloytest.state_facts as base
    GROUP BY 2
    ORDER BY 2 ASC NULLS LAST
    LIMIT 5

    Error: [MISSING_AGGREGATION] The non-aggregating expression "state" is based on columns which are not participating in the GROUP BY clause.
    Add the columns or the expression to the GROUP BY, aggregate the expression, or use "any_value(state)" if you do not care which of the values within a group is returned. SQLSTATE: 42803

      1712 |         order_by: l
      1713 |         limit: 5
    > 1714 |       }`).malloyResultMatches(expressionModel, [
           |           ^
      1715 |         {l: 'A', c: 4, prev: null},
      1716 |         {l: 'C', c: 3, prev: null},
      1717 |         {l: 'D', c: 2, prev: null},

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)
      at Object.<anonymous> (test/src/databases/all/functions.spec.ts:1714:11)

Test Suites: 1 failed, 1 total
Tests:       29 failed, 10 skipped, 74 passed, 113 total
Snapshots:   0 total
Time:        91.187 s
Ran all test suites matching /functions/i.


> malloy@0.0.1 test
> jest --runInBand nomodel

{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
  console.log
    Exeption when running SQL:
     WITH __stage0 AS (
      SELECT 
         COALESCE(SUM(base.`airport_count`),0) as `r`
      FROM malloytest.state_facts as base
    )
    SELECT 
       count(distinct CONCAT(base.`state`,CAST(a_0.`r` AS undefined))) as `row_count`,
       COALESCE(SUM(base.`airport_count`),0) as `left_sum`,
       COALESCE((SUM(DISTINCT (CAST(conv(substring(md5(concat(a_0.`__distinct_key`, '')), 1, 16), 16, 10) AS DECIMAL(38,0)) * 4294967296 + CAST(conv(substring(md5(concat(a_0.`__distinct_key`, '')), 16, 8), 16, 10) AS DECIMAL(38,0))) + COALESCE(a_0.`r`, 0)) - SUM(DISTINCT (CAST(conv(substring(md5(concat(a_0.`__distinct_key`, '')), 1, 16), 16, 10) AS DECIMAL(38,0)) * 4294967296 + CAST(conv(substring(md5(concat(a_0.`__distinct_key`, '')), 16, 8), 16, 10) AS DECIMAL(38,0))))),0) as `right_sum`,
       COALESCE(SUM(base.`airport_count`+a_0.`r`),0) as `sum_sum`
    FROM malloytest.state_facts as base
     LEFT JOIN (SELECT uuid() as `__distinct_key`, x.*  FROM __stage0 as x) AS a_0
      ON 1=1

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:128:15)

  console.log
    Exception: Error: 
    [UNSUPPORTED_DATATYPE] Unsupported data type "UNDEFINED". SQLSTATE: 0A000
    == SQL (line 7, position 55) ==
    ...AT(base.`state`,CAST(a_0.`r` AS undefined))) as `row_count`,
                                       ^^^^^^^^^

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:130:15)

{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
  console.log
    Exeption when running SQL:
     WITH __stage0 AS (
      SELECT
        group_set,
        CASE WHEN group_set IN (2,1) THEN
          base.`popular_name`
          END as `popular_name__2`,
        CASE WHEN group_set=2 THEN
          base.`state`
          END as `state__2`,
        CASE WHEN group_set=2 THEN
          COALESCE(SUM(base.`births`),0)
          END as `total_births__2`,
        MAX((CASE WHEN group_set=0 THEN
          COALESCE(SUM(base.`births`),0)
          END)) OVER () as `all_births__2`,
        MAX((CASE WHEN group_set=1 THEN
          COALESCE(SUM(base.`births`),0)
          END)) OVER (PARTITION BY CASE WHEN group_set IN (2,1) THEN
          base.`popular_name`
          END) as `all_name__2`
      FROM malloytest.state_facts as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,2,1)) as group_set)
      GROUP BY 1,2,3
    )
    SELECT
      `popular_name__2` as `popular_name`,
      `state__2` as `state`,
      GET((ARRAY_AGG(`total_births__2`) FILTER (WHERE group_set=2 AND `total_births__2` IS NOT NULL)),0) as `total_births`,
      GET((ARRAY_AGG(`all_births__2`) FILTER (WHERE group_set=2 AND `all_births__2` IS NOT NULL)),0) as `all_births`,
      GET((ARRAY_AGG(`all_name__2`) FILTER (WHERE group_set=2 AND `all_name__2` IS NOT NULL)),0) as `all_name`
    FROM __stage0
    WHERE group_set NOT IN (0,1)
    GROUP BY 1,2
    ORDER BY 3 desc NULLS LAST

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:128:15)

  console.log
    Exception: Error: [MISSING_AGGREGATION] The non-aggregating expression "popular_name" is based on columns which are not participating in the GROUP BY clause.
    Add the columns or the expression to the GROUP BY, aggregate the expression, or use "any_value(popular_name)" if you do not care which of the values within a group is returned. SQLSTATE: 42803

      at DatabricksTestConnection.runSQL (test/src/runtimes.ts:130:15)

{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
{"level":"info","message":"Created DBSQLClient"}
{"level":"info","message":"DBSQLClient: initializing thrift client"}
FAIL test/src/databases/all/nomodel.spec.ts (89.127 s)
  ✓ parenthesize output field values - databricks (13129 ms)
  ✓ bug 151 which used to throw unknown dialect is still fixed- databricks (5473 ms)
  ✓ refine query from query - databricks (2721 ms)
  ✓ source- not -found  - databricks (45 ms)
  ✓ join_many - databricks (3341 ms)
  ✓ join_many condition no primary key - databricks (1949 ms)
  ✓ join_many filter multiple values - databricks (2175 ms)
  ✓ join_one condition no primary key - databricks (1248 ms)
  ✓ join_one filter multiple values - databricks (1330 ms)
  ✓ join_many cross from  - databricks (1384 ms)
  ✕ join_one only  - databricks (542 ms)
  ✓ join_many cross ON  - databricks (1158 ms)
  ✓ limit - provided - databricks (982 ms)
  ✓ join inner- databricks (1371 ms)
  ✓ join left - databricks (1234 ms)
  ✓ join right - databricks (1332 ms)
  ✓ join full - databricks (1319 ms)
  ✓ leafy count - databricks (955 ms)
  ✓ nest/unnest -basic - databricks (1 ms)
  ✓ count at root should not use distinct key - databricks (969 ms)
  ✓ leafy nested count - databricks (1 ms)
  ✓ basic index - databricks (5789 ms)
  ✓ sql block- databricks (1525 ms)
  ✓ avg ignore null- databricks (2493 ms)
  ✓ limit - not provided - databricks (985 ms)
  ✓ ungrouped top level - databricks (1249 ms)
  ✓ ungrouped - eliminate rows  - databricks (1201 ms)
  ✓ run simple sql - databricks (1390 ms)
  ✓ simple sql is exactly as written - databricks (522 ms)
  ✓ source from query defined as sql query - databricks (550 ms)
  ✓ source from query defined as other query - databricks (1087 ms)
  ✕ all with parameters - basic  - databricks (619 ms)
  ✓ sql as source - databricks (1604 ms)
  ✓ sql directly - databricks (646 ms)
  ✓ sql with turducken- databricks (2144 ms)
  ✓ local declarations external query - databricks (664 ms)
  ✓ local declarations named query - databricks (833 ms)
  ✓ local declarations refined named query - databricks (763 ms)
  ✓ regexp match- databricks (2154 ms)
  ✓ substitution precedence- databricks (1509 ms)
  ✓ removes surpuflous order_by - solo aggregates - databricks (697 ms)
  ✓ removes surpuflous order_by - pipeline - databricks (849 ms)
  ✓ removes surpuflous order_by - joined_query - databricks (1082 ms)
  ✓ removes surpuflous order_by - joined_query pipeline - databricks (1057 ms)
  ○ skipped number as null 2 - databricks
  ○ skipped ungrouped top level with nested  - databricks
  ○ skipped ungrouped nested with no grouping above - databricks
  ○ skipped ungrouped - partial grouping - databricks
  ○ skipped ungrouped - all nested - databricks
  ○ skipped ungrouped nested  - databricks
  ○ skipped ungrouped nested expression  - databricks
  ○ skipped ungrouped nested group by float  - databricks
  ○ skipped all with parameters - nest  - databricks
  ○ skipped single value to udf - databricks
  ○ skipped Multi value to udf - databricks
  ○ skipped Multi value to udf group by - databricks
  ○ skipped array unnest - databricks
  ○ skipped array unnest x 2 - databricks
  ○ skipped can unnest simply from file - databricks
  ○ skipped can unnest from file - databricks
  ○ skipped can double unnest - databricks
  ○ skipped nest null - databricks
  ○ skipped Nested pipelines sort properly - databricks
  ○ skipped number as null- databricks
  quoting and strings
    ✓ backslash quote (1380 ms)
    ✓ backslash backslash (525 ms)
    ✓ source with reserve word (672 ms)
    ○ skipped spaces in names

  ● join_one only  - databricks

    query.run failed: 
    [UNSUPPORTED_DATATYPE] Unsupported data type "UNDEFINED". SQLSTATE: 0A000
    == SQL (line 7, position 55) ==
    ...AT(base.`state`,CAST(a_0.`r` AS undefined))) as `row_count`,
                                       ^^^^^^^^^

    SQL: WITH __stage0 AS (
      SELECT 
         COALESCE(SUM(base.`airport_count`),0) as `r`
      FROM malloytest.state_facts as base
    )
    SELECT 
       count(distinct CONCAT(base.`state`,CAST(a_0.`r` AS undefined))) as `row_count`,
       COALESCE(SUM(base.`airport_count`),0) as `left_sum`,
       COALESCE((SUM(DISTINCT (CAST(conv(substring(md5(concat(a_0.`__distinct_key`, '')), 1, 16), 16, 10) AS DECIMAL(38,0)) * 4294967296 + CAST(conv(substring(md5(concat(a_0.`__distinct_key`, '')), 16, 8), 16, 10) AS DECIMAL(38,0))) + COALESCE(a_0.`r`, 0)) - SUM(DISTINCT (CAST(conv(substring(md5(concat(a_0.`__distinct_key`, '')), 1, 16), 16, 10) AS DECIMAL(38,0)) * 4294967296 + CAST(conv(substring(md5(concat(a_0.`__distinct_key`, '')), 16, 8), 16, 10) AS DECIMAL(38,0))))),0) as `right_sum`,
       COALESCE(SUM(base.`airport_count`+a_0.`r`),0) as `sum_sum`
    FROM malloytest.state_facts as base
     LEFT JOIN (SELECT uuid() as `__distinct_key`, x.*  FROM __stage0 as x) AS a_0
      ON 1=1

    [UNSUPPORTED_DATATYPE] Unsupported data type "UNDEFINED". SQLSTATE: 0A000
    == SQL (line 7, position 55) ==
    ...AT(base.`state`,CAST(a_0.`r` AS undefined))) as `row_count`,
                                       ^^^^^^^^^

      245 |           sum_sum is sum(airport_count + a.r)
      246 |       }
    > 247 |     `).malloyResultMatches(runtime, {
          |        ^
      248 |       row_count: 51,
      249 |       left_sum: 19701,
      250 |       right_sum: 19701,

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)
      at Object.<anonymous> (test/src/databases/all/nomodel.spec.ts:247:8)

  ● all with parameters - basic  - databricks

    query.run failed: [MISSING_AGGREGATION] The non-aggregating expression "popular_name" is based on columns which are not participating in the GROUP BY clause.
    Add the columns or the expression to the GROUP BY, aggregate the expression, or use "any_value(popular_name)" if you do not care which of the values within a group is returned. SQLSTATE: 42803
    SQL: WITH __stage0 AS (
      SELECT
        group_set,
        CASE WHEN group_set IN (2,1) THEN
          base.`popular_name`
          END as `popular_name__2`,
        CASE WHEN group_set=2 THEN
          base.`state`
          END as `state__2`,
        CASE WHEN group_set=2 THEN
          COALESCE(SUM(base.`births`),0)
          END as `total_births__2`,
        MAX((CASE WHEN group_set=0 THEN
          COALESCE(SUM(base.`births`),0)
          END)) OVER () as `all_births__2`,
        MAX((CASE WHEN group_set=1 THEN
          COALESCE(SUM(base.`births`),0)
          END)) OVER (PARTITION BY CASE WHEN group_set IN (2,1) THEN
          base.`popular_name`
          END) as `all_name__2`
      FROM malloytest.state_facts as base
      CROSS JOIN (SELECT EXPLODE(SEQUENCE(0,2,1)) as group_set)
      GROUP BY 1,2,3
    )
    SELECT
      `popular_name__2` as `popular_name`,
      `state__2` as `state`,
      GET((ARRAY_AGG(`total_births__2`) FILTER (WHERE group_set=2 AND `total_births__2` IS NOT NULL)),0) as `total_births`,
      GET((ARRAY_AGG(`all_births__2`) FILTER (WHERE group_set=2 AND `all_births__2` IS NOT NULL)),0) as `all_births`,
      GET((ARRAY_AGG(`all_name__2`) FILTER (WHERE group_set=2 AND `all_name__2` IS NOT NULL)),0) as `all_name`
    FROM __stage0
    WHERE group_set NOT IN (0,1)
    GROUP BY 1,2
    ORDER BY 3 desc NULLS LAST

    Error: [MISSING_AGGREGATION] The non-aggregating expression "popular_name" is based on columns which are not participating in the GROUP BY clause.
    Add the columns or the expression to the GROUP BY, aggregate the expression, or use "any_value(popular_name)" if you do not care which of the values within a group is returned. SQLSTATE: 42803

      841 |           all_name is exclude(total_births, state)
      842 |       }
    > 843 |     `).malloyResultMatches(runtime, {
          |        ^
      844 |       all_births: 295727065,
      845 |       all_name: 197260594,
      846 |     });

      at DBSQLOperation.waitUntilReady (node_modules/@databricks/sql/lib/DBSQLOperation.ts:369:17)
      at async DBSQLOperation.fetchChunk (node_modules/@databricks/sql/lib/DBSQLOperation.ts:173:5)
      at async DBSQLOperation.fetchAll (node_modules/@databricks/sql/lib/DBSQLOperation.ts:149:21)
      at Object.<anonymous> (test/src/databases/all/nomodel.spec.ts:843:8)

Test Suites: 1 failed, 1 total
Tests:       2 failed, 21 skipped, 45 passed, 68 total
Snapshots:   0 total
Time:        89.23 s
Ran all test suites matching /nomodel/i.
